openapi: 3.0.1
info:
  title: Chaos Manager API
  contact: {}
  version: "1.0"
servers:
- url: /api/manager
paths:
  /rest/v2/infrastructure:
    post:
      tags:
      - external
      summary: Register a new v2 infra
      description: Register a new v2 infra
      operationId: registerInfraV2
      parameters:
      - name: correlationID
        in: query
        description: correlation id is used to debug micro svc communication
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: accountIdentifier
        in: query
        description: account id that want to access the resource
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: organizationIdentifier
        in: query
        description: organization id that want to access the resource
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: project id that want to access the resource
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: Register Infra V2
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/infra_v2.RegisterInfrastructureV2Request'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/infra_v2.RegisterInfrastructureV2Response'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api.RestError'
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: request"
components:
  schemas:
    api.RestError:
      type: object
      properties:
        description:
          type: string
        message:
          type: string
    infra_v2.InfraScope:
      type: string
      enum:
      - NAMESPACE
      - CLUSTER
      x-enum-varnames:
      - InfraScopeNamespace
      - InfraScopeCluster
    infra_v2.InfraType:
      type: string
      enum:
      - KUBERNETES
      - KUBERNETESV2
      x-enum-varnames:
      - InfraTypeKubernetes
      - InfraTypeKubernetesV2
    infra_v2.MTLSConfiguration:
      type: object
      properties:
        certPath:
          type: string
        keyPath:
          type: string
        secretName:
          type: string
        url:
          type: string
    infra_v2.ProxyConfiguration:
      type: object
      properties:
        httpProxy:
          type: string
        httpsProxy:
          type: string
        noProxy:
          type: string
        url:
          type: string
    infra_v2.RegisterInfrastructureV2Request:
      type: object
      properties:
        annotation:
          type: object
          additionalProperties:
            type: string
        correlationId:
          type: string
        description:
          type: string
        discoveryAgentID:
          type: string
        env:
          type: array
          items:
            $ref: '#/components/schemas/v1.EnvVar'
        envFrom:
          type: array
          items:
            $ref: '#/components/schemas/v1.EnvFromSource'
        environmentID:
          type: string
        identity:
          type: string
        infraID:
          type: string
        infraNamespace:
          type: string
        infraScope:
          $ref: '#/components/schemas/infra_v2.InfraScope'
        infraType:
          $ref: '#/components/schemas/infra_v2.InfraType'
        initContainers:
          type: string
        insecureSkipVerify:
          type: boolean
        k8sConnectorID:
          type: string
        label:
          type: object
          additionalProperties:
            type: string
        mtls:
          $ref: '#/components/schemas/infra_v2.MTLSConfiguration'
        name:
          type: string
        nodeSelector:
          type: object
          additionalProperties:
            type: string
        proxy:
          $ref: '#/components/schemas/infra_v2.ProxyConfiguration'
        runAsGroup:
          type: integer
        runAsUser:
          type: integer
        serviceAccount:
          type: string
        sidecarContainers:
          type: string
        tags:
          type: array
          items:
            type: string
        tolerations:
          type: array
          items:
            $ref: '#/components/schemas/v1.Toleration'
        volumeMounts:
          type: array
          items:
            $ref: '#/components/schemas/v1.VolumeMount'
        volumes:
          type: array
          items:
            $ref: '#/components/schemas/v1.Volume'
    infra_v2.RegisterInfrastructureV2Response:
      type: object
      properties:
        identity:
          type: string
        name:
          type: string
        token:
          type: string
      example:
        identity: identity
        name: name
        token: token
    resource.Quantity:
      type: object
      properties:
        Format:
          type: string
          enum:
          - DecimalExponent
          - BinarySI
          - DecimalSI
          x-enum-varnames:
          - DecimalExponent
          - BinarySI
          - DecimalSI
          x-enum-comments:
            BinarySI: "e.g., 12Mi (12 * 2^20)"
            DecimalExponent: "e.g., 12e6"
            DecimalSI: "e.g., 12M  (12 * 10^6)"
    v1.AWSElasticBlockStoreVolumeSource:
      type: object
      properties:
        fsType:
          type: string
          description: |-
            Filesystem type of the volume that you want to mount.
            Tip: Ensure that the filesystem type is supported by the host operating system.
            Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
            TODO: how do we prevent errors in the filesystem from compromising the machine
            +optional
        partition:
          type: integer
          description: |-
            The partition in the volume that you want to mount.
            If omitted, the default is to mount by volume name.
            Examples: For volume /dev/sda1, you specify the partition as "1".
            Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
            +optional
        readOnly:
          type: boolean
          description: |-
            Specify "true" to force and set the ReadOnly property in VolumeMounts to "true".
            If omitted, the default is "false".
            More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
            +optional
        volumeID:
          type: string
          description: |-
            Unique ID of the persistent disk resource in AWS (Amazon EBS volume).
            More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
    v1.AzureDataDiskCachingMode:
      type: string
      enum:
      - None
      - ReadOnly
      - ReadWrite
      x-enum-varnames:
      - AzureDataDiskCachingNone
      - AzureDataDiskCachingReadOnly
      - AzureDataDiskCachingReadWrite
    v1.AzureDataDiskKind:
      type: string
      enum:
      - Shared
      - Dedicated
      - Managed
      x-enum-varnames:
      - AzureSharedBlobDisk
      - AzureDedicatedBlobDisk
      - AzureManagedDisk
    v1.AzureDiskVolumeSource:
      type: object
      properties:
        cachingMode:
          type: object
          description: |-
            Host Caching mode: None, Read Only, Read Write.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.AzureDataDiskCachingMode'
        diskName:
          type: string
          description: The Name of the data disk in the blob storage
        diskURI:
          type: string
          description: The URI the data disk in the blob storage
        fsType:
          type: string
          description: |-
            Filesystem type to mount.
            Must be a filesystem type supported by the host operating system.
            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
            +optional
        kind:
          type: object
          description: "Expected values Shared: multiple blob disks per storage account\
            \  Dedicated: single blob disk per storage account  Managed: azure managed\
            \ data disk (only in managed availability set). defaults to shared"
          allOf:
          - $ref: '#/components/schemas/v1.AzureDataDiskKind'
        readOnly:
          type: boolean
          description: |-
            Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            +optional
    v1.AzureFileVolumeSource:
      type: object
      properties:
        readOnly:
          type: boolean
          description: |-
            Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            +optional
        secretName:
          type: string
          description: the name of secret that contains Azure Storage Account Name
            and Key
        shareName:
          type: string
          description: Share Name
    v1.CSIVolumeSource:
      type: object
      properties:
        driver:
          type: string
          description: |-
            Driver is the name of the CSI driver that handles this volume.
            Consult with your admin for the correct name as registered in the cluster.
        fsType:
          type: string
          description: |-
            Filesystem type to mount. Ex. "ext4", "xfs", "ntfs".
            If not provided, the empty value is passed to the associated CSI driver
            which will determine the default filesystem to apply.
            +optional
        nodePublishSecretRef:
          type: object
          description: |-
            NodePublishSecretRef is a reference to the secret object containing
            sensitive information to pass to the CSI driver to complete the CSI
            NodePublishVolume and NodeUnpublishVolume calls.
            This field is optional, and  may be empty if no secret is required. If the
            secret object contains more than one secret, all secret references are passed.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.LocalObjectReference'
        readOnly:
          type: boolean
          description: |-
            Specifies a read-only configuration for the volume.
            Defaults to false (read/write).
            +optional
        volumeAttributes:
          type: object
          additionalProperties:
            type: string
          description: |-
            VolumeAttributes stores driver-specific properties that are passed to the CSI
            driver. Consult your driver's documentation for supported values.
            +optional
    v1.CephFSVolumeSource:
      type: object
      properties:
        monitors:
          type: array
          description: |-
            Required: Monitors is a collection of Ceph monitors
            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
          items:
            type: string
        path:
          type: string
          description: |-
            Optional: Used as the mounted root, rather than the full Ceph tree, default is /
            +optional
        readOnly:
          type: boolean
          description: |-
            Optional: Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            +optional
        secretFile:
          type: string
          description: |-
            Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            +optional
        secretRef:
          type: object
          description: |-
            Optional: SecretRef is reference to the authentication secret for User, default is empty.
            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.LocalObjectReference'
        user:
          type: string
          description: |-
            Optional: User is the rados user name, default is admin
            More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
            +optional
    v1.CinderVolumeSource:
      type: object
      properties:
        fsType:
          type: string
          description: |-
            Filesystem type to mount.
            Must be a filesystem type supported by the host operating system.
            Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
            More info: https://examples.k8s.io/mysql-cinder-pd/README.md
            +optional
        readOnly:
          type: boolean
          description: |-
            Optional: Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            More info: https://examples.k8s.io/mysql-cinder-pd/README.md
            +optional
        secretRef:
          type: object
          description: |-
            Optional: points to a secret object containing parameters used to connect
            to OpenStack.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.LocalObjectReference'
        volumeID:
          type: string
          description: |-
            volume id used to identify the volume in cinder.
            More info: https://examples.k8s.io/mysql-cinder-pd/README.md
    v1.ConfigMapEnvSource:
      type: object
      properties:
        name:
          type: string
          description: |-
            Name of the referent.
            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            TODO: Add other useful fields. apiVersion, kind, uid?
            +optional
        optional:
          type: boolean
          description: |-
            Specify whether the ConfigMap must be defined
            +optional
    v1.ConfigMapKeySelector:
      type: object
      properties:
        key:
          type: string
          description: The key to select.
        name:
          type: string
          description: |-
            Name of the referent.
            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            TODO: Add other useful fields. apiVersion, kind, uid?
            +optional
        optional:
          type: boolean
          description: |-
            Specify whether the ConfigMap or its key must be defined
            +optional
    v1.ConfigMapProjection:
      type: object
      properties:
        items:
          type: array
          description: |-
            If unspecified, each key-value pair in the Data field of the referenced
            ConfigMap will be projected into the volume as a file whose name is the
            key and content is the value. If specified, the listed keys will be
            projected into the specified paths, and unlisted keys will not be
            present. If a key is specified which is not present in the ConfigMap,
            the volume setup will error unless it is marked optional. Paths must be
            relative and may not contain the '..' path or start with '..'.
            +optional
          items:
            $ref: '#/components/schemas/v1.KeyToPath'
        name:
          type: string
          description: |-
            Name of the referent.
            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            TODO: Add other useful fields. apiVersion, kind, uid?
            +optional
        optional:
          type: boolean
          description: |-
            Specify whether the ConfigMap or its keys must be defined
            +optional
    v1.ConfigMapVolumeSource:
      type: object
      properties:
        defaultMode:
          type: integer
          description: |-
            Optional: mode bits used to set permissions on created files by default.
            Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
            YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
            Defaults to 0644.
            Directories within the path are not affected by this setting.
            This might be in conflict with other options that affect the file
            mode, like fsGroup, and the result can be other mode bits set.
            +optional
        items:
          type: array
          description: |-
            If unspecified, each key-value pair in the Data field of the referenced
            ConfigMap will be projected into the volume as a file whose name is the
            key and content is the value. If specified, the listed keys will be
            projected into the specified paths, and unlisted keys will not be
            present. If a key is specified which is not present in the ConfigMap,
            the volume setup will error unless it is marked optional. Paths must be
            relative and may not contain the '..' path or start with '..'.
            +optional
          items:
            $ref: '#/components/schemas/v1.KeyToPath'
        name:
          type: string
          description: |-
            Name of the referent.
            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            TODO: Add other useful fields. apiVersion, kind, uid?
            +optional
        optional:
          type: boolean
          description: |-
            Specify whether the ConfigMap or its keys must be defined
            +optional
    v1.DownwardAPIProjection:
      type: object
      properties:
        items:
          type: array
          description: |-
            Items is a list of DownwardAPIVolume file
            +optional
          items:
            $ref: '#/components/schemas/v1.DownwardAPIVolumeFile'
    v1.DownwardAPIVolumeFile:
      type: object
      properties:
        fieldRef:
          type: object
          description: |-
            Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.ObjectFieldSelector'
        mode:
          type: integer
          description: |-
            Optional: mode bits used to set permissions on this file, must be an octal value
            between 0000 and 0777 or a decimal value between 0 and 511.
            YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
            If not specified, the volume defaultMode will be used.
            This might be in conflict with other options that affect the file
            mode, like fsGroup, and the result can be other mode bits set.
            +optional
        path:
          type: string
          description: "Required: Path is  the relative path name of the file to be\
            \ created. Must not be absolute or contain the '..' path. Must be utf-8\
            \ encoded. The first item of the relative path must not start with '..'"
        resourceFieldRef:
          type: object
          description: |-
            Selects a resource of the container: only resources limits and requests
            (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.ResourceFieldSelector'
    v1.DownwardAPIVolumeSource:
      type: object
      properties:
        defaultMode:
          type: integer
          description: |-
            Optional: mode bits to use on created files by default. Must be a
            Optional: mode bits used to set permissions on created files by default.
            Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
            YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
            Defaults to 0644.
            Directories within the path are not affected by this setting.
            This might be in conflict with other options that affect the file
            mode, like fsGroup, and the result can be other mode bits set.
            +optional
        items:
          type: array
          description: |-
            Items is a list of downward API volume file
            +optional
          items:
            $ref: '#/components/schemas/v1.DownwardAPIVolumeFile'
    v1.EmptyDirVolumeSource:
      type: object
      properties:
        medium:
          type: object
          description: |-
            What type of storage medium should back this directory.
            The default is "" which means to use the node's default medium.
            Must be an empty string (default) or Memory.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.StorageMedium'
        sizeLimit:
          type: object
          description: |-
            Total amount of local storage required for this EmptyDir volume.
            The size limit is also applicable for memory medium.
            The maximum usage on memory medium EmptyDir would be the minimum value between
            the SizeLimit specified here and the sum of memory limits of all containers in a pod.
            The default is nil which means that the limit is undefined.
            More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
            +optional
          allOf:
          - $ref: '#/components/schemas/resource.Quantity'
    v1.EnvFromSource:
      type: object
      properties:
        configMapRef:
          type: object
          description: |-
            The ConfigMap to select from
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.ConfigMapEnvSource'
        prefix:
          type: string
          description: |-
            An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
            +optional
        secretRef:
          type: object
          description: |-
            The Secret to select from
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.SecretEnvSource'
    v1.EnvVar:
      type: object
      properties:
        name:
          type: string
          description: Name of the environment variable. Must be a C_IDENTIFIER.
        value:
          type: string
          description: |-
            Variable references $(VAR_NAME) are expanded
            using the previous defined environment variables in the container and
            any service environment variables. If a variable cannot be resolved,
            the reference in the input string will be unchanged. The $(VAR_NAME)
            syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
            references will never be expanded, regardless of whether the variable
            exists or not.
            Defaults to "".
            +optional
        valueFrom:
          type: object
          description: |-
            Source for the environment variable's value. Cannot be used if value is not empty.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.EnvVarSource'
    v1.EnvVarSource:
      type: object
      properties:
        configMapKeyRef:
          type: object
          description: |-
            Selects a key of a ConfigMap.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.ConfigMapKeySelector'
        fieldRef:
          type: object
          description: |-
            Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
            spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.ObjectFieldSelector'
        resourceFieldRef:
          type: object
          description: |-
            Selects a resource of the container: only resources limits and requests
            (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.ResourceFieldSelector'
        secretKeyRef:
          type: object
          description: |-
            Selects a key of a secret in the pod's namespace
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.SecretKeySelector'
    v1.EphemeralVolumeSource:
      type: object
      properties:
        volumeClaimTemplate:
          type: object
          description: |-
            Will be used to create a stand-alone PVC to provision the volume.
            The pod in which this EphemeralVolumeSource is embedded will be the
            owner of the PVC, i.e. the PVC will be deleted together with the
            pod.  The name of the PVC will be `<pod name>-<volume name>` where
            `<volume name>` is the name from the `PodSpec.Volumes` array
            entry. Pod validation will reject the pod if the concatenated name
            is not valid for a PVC (for example, too long).

            An existing PVC with that name that is not owned by the pod
            will *not* be used for the pod to avoid using an unrelated
            volume by mistake. Starting the pod is then blocked until
            the unrelated PVC is removed. If such a pre-created PVC is
            meant to be used by the pod, the PVC has to updated with an
            owner reference to the pod once the pod exists. Normally
            this should not be necessary, but it may be useful when
            manually reconstructing a broken cluster.

            This field is read-only and no changes will be made by Kubernetes
            to the PVC after it has been created.

            Required, must not be nil.
          allOf:
          - $ref: '#/components/schemas/v1.PersistentVolumeClaimTemplate'
    v1.FCVolumeSource:
      type: object
      properties:
        fsType:
          type: string
          description: |-
            Filesystem type to mount.
            Must be a filesystem type supported by the host operating system.
            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
            TODO: how do we prevent errors in the filesystem from compromising the machine
            +optional
        lun:
          type: integer
          description: |-
            Optional: FC target lun number
            +optional
        readOnly:
          type: boolean
          description: |-
            Optional: Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            +optional
        targetWWNs:
          type: array
          description: |-
            Optional: FC target worldwide names (WWNs)
            +optional
          items:
            type: string
        wwids:
          type: array
          description: |-
            Optional: FC volume world wide identifiers (wwids)
            Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
            +optional
          items:
            type: string
    v1.FieldsV1:
      type: object
    v1.FlexVolumeSource:
      type: object
      properties:
        driver:
          type: string
          description: Driver is the name of the driver to use for this volume.
        fsType:
          type: string
          description: |-
            Filesystem type to mount.
            Must be a filesystem type supported by the host operating system.
            Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
            +optional
        options:
          type: object
          additionalProperties:
            type: string
          description: |-
            Optional: Extra command options if any.
            +optional
        readOnly:
          type: boolean
          description: |-
            Optional: Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            +optional
        secretRef:
          type: object
          description: |-
            Optional: SecretRef is reference to the secret object containing
            sensitive information to pass to the plugin scripts. This may be
            empty if no secret object is specified. If the secret object
            contains more than one secret, all secrets are passed to the plugin
            scripts.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.LocalObjectReference'
    v1.FlockerVolumeSource:
      type: object
      properties:
        datasetName:
          type: string
          description: |-
            Name of the dataset stored as metadata -> name on the dataset for Flocker
            should be considered as deprecated
            +optional
        datasetUUID:
          type: string
          description: |-
            UUID of the dataset. This is unique identifier of a Flocker dataset
            +optional
    v1.GCEPersistentDiskVolumeSource:
      type: object
      properties:
        fsType:
          type: string
          description: |-
            Filesystem type of the volume that you want to mount.
            Tip: Ensure that the filesystem type is supported by the host operating system.
            Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            TODO: how do we prevent errors in the filesystem from compromising the machine
            +optional
        partition:
          type: integer
          description: |-
            The partition in the volume that you want to mount.
            If omitted, the default is to mount by volume name.
            Examples: For volume /dev/sda1, you specify the partition as "1".
            Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            +optional
        pdName:
          type: string
          description: |-
            Unique name of the PD resource in GCE. Used to identify the disk in GCE.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        readOnly:
          type: boolean
          description: |-
            ReadOnly here will force the ReadOnly setting in VolumeMounts.
            Defaults to false.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            +optional
    v1.GitRepoVolumeSource:
      type: object
      properties:
        directory:
          type: string
          description: |-
            Target directory name.
            Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
            git repository.  Otherwise, if specified, the volume will contain the git repository in
            the subdirectory with the given name.
            +optional
        repository:
          type: string
          description: Repository URL
        revision:
          type: string
          description: |-
            Commit hash for the specified revision.
            +optional
    v1.GlusterfsVolumeSource:
      type: object
      properties:
        endpoints:
          type: string
          description: |-
            EndpointsName is the endpoint name that details Glusterfs topology.
            More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        path:
          type: string
          description: |-
            Path is the Glusterfs volume path.
            More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
        readOnly:
          type: boolean
          description: |-
            ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions.
            Defaults to false.
            More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
            +optional
    v1.HostPathType:
      type: string
      enum:
      - ""
      - DirectoryOrCreate
      - Directory
      - FileOrCreate
      - File
      - Socket
      - CharDevice
      - BlockDevice
      x-enum-varnames:
      - HostPathUnset
      - HostPathDirectoryOrCreate
      - HostPathDirectory
      - HostPathFileOrCreate
      - HostPathFile
      - HostPathSocket
      - HostPathCharDev
      - HostPathBlockDev
    v1.HostPathVolumeSource:
      type: object
      properties:
        path:
          type: string
          description: |-
            Path of the directory on the host.
            If the path is a symlink, it will follow the link to the real path.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        type:
          type: object
          description: |-
            Type for HostPath Volume
            Defaults to ""
            More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.HostPathType'
    v1.ISCSIVolumeSource:
      type: object
      properties:
        chapAuthDiscovery:
          type: boolean
          description: |-
            whether support iSCSI Discovery CHAP authentication
            +optional
        chapAuthSession:
          type: boolean
          description: |-
            whether support iSCSI Session CHAP authentication
            +optional
        fsType:
          type: string
          description: |-
            Filesystem type of the volume that you want to mount.
            Tip: Ensure that the filesystem type is supported by the host operating system.
            Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
            TODO: how do we prevent errors in the filesystem from compromising the machine
            +optional
        initiatorName:
          type: string
          description: |-
            Custom iSCSI Initiator Name.
            If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
            <target portal>:<volume name> will be created for the connection.
            +optional
        iqn:
          type: string
          description: Target iSCSI Qualified Name.
        iscsiInterface:
          type: string
          description: |-
            iSCSI Interface Name that uses an iSCSI transport.
            Defaults to 'default' (tcp).
            +optional
        lun:
          type: integer
          description: iSCSI Target Lun number.
        portals:
          type: array
          description: |-
            iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
            is other than default (typically TCP ports 860 and 3260).
            +optional
          items:
            type: string
        readOnly:
          type: boolean
          description: |-
            ReadOnly here will force the ReadOnly setting in VolumeMounts.
            Defaults to false.
            +optional
        secretRef:
          type: object
          description: |-
            CHAP Secret for iSCSI target and initiator authentication
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.LocalObjectReference'
        targetPortal:
          type: string
          description: |-
            iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
            is other than default (typically TCP ports 860 and 3260).
    v1.KeyToPath:
      type: object
      properties:
        key:
          type: string
          description: The key to project.
        mode:
          type: integer
          description: |-
            Optional: mode bits used to set permissions on this file.
            Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
            YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
            If not specified, the volume defaultMode will be used.
            This might be in conflict with other options that affect the file
            mode, like fsGroup, and the result can be other mode bits set.
            +optional
        path:
          type: string
          description: |-
            The relative path of the file to map the key to.
            May not be an absolute path.
            May not contain the path element '..'.
            May not start with the string '..'.
    v1.LabelSelector:
      type: object
      properties:
        matchExpressions:
          type: array
          description: |-
            matchExpressions is a list of label selector requirements. The requirements are ANDed.
            +optional
          items:
            $ref: '#/components/schemas/v1.LabelSelectorRequirement'
        matchLabels:
          type: object
          additionalProperties:
            type: string
          description: |-
            matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
            map is equivalent to an element of matchExpressions, whose key field is "key", the
            operator is "In", and the values array contains only "value". The requirements are ANDed.
            +optional
    v1.LabelSelectorOperator:
      type: string
      enum:
      - In
      - NotIn
      - Exists
      - DoesNotExist
      x-enum-varnames:
      - LabelSelectorOpIn
      - LabelSelectorOpNotIn
      - LabelSelectorOpExists
      - LabelSelectorOpDoesNotExist
    v1.LabelSelectorRequirement:
      type: object
      properties:
        key:
          type: string
          description: |-
            key is the label key that the selector applies to.
            +patchMergeKey=key
            +patchStrategy=merge
        operator:
          type: object
          description: |-
            operator represents a key's relationship to a set of values.
            Valid operators are In, NotIn, Exists and DoesNotExist.
          allOf:
          - $ref: '#/components/schemas/v1.LabelSelectorOperator'
        values:
          type: array
          description: |-
            values is an array of string values. If the operator is In or NotIn,
            the values array must be non-empty. If the operator is Exists or DoesNotExist,
            the values array must be empty. This array is replaced during a strategic
            merge patch.
            +optional
          items:
            type: string
    v1.LocalObjectReference:
      type: object
      properties:
        name:
          type: string
          description: |-
            Name of the referent.
            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            TODO: Add other useful fields. apiVersion, kind, uid?
            +optional
    v1.ManagedFieldsEntry:
      type: object
      properties:
        apiVersion:
          type: string
          description: |-
            APIVersion defines the version of this resource that this field set
            applies to. The format is "group/version" just like the top-level
            APIVersion field. It is necessary to track the version of a field
            set because it cannot be automatically converted.
        fieldsType:
          type: string
          description: |-
            FieldsType is the discriminator for the different fields format and version.
            There is currently only one possible value: "FieldsV1"
        fieldsV1:
          type: object
          description: |-
            FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.FieldsV1'
        manager:
          type: string
          description: Manager is an identifier of the workflow managing these fields.
        operation:
          type: object
          description: |-
            Operation is the type of operation which lead to this ManagedFieldsEntry being created.
            The only valid values for this field are 'Apply' and 'Update'.
          allOf:
          - $ref: '#/components/schemas/v1.ManagedFieldsOperationType'
        time:
          type: string
          description: |-
            Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
            +optional
    v1.ManagedFieldsOperationType:
      type: string
      enum:
      - Apply
      - Update
      x-enum-varnames:
      - ManagedFieldsOperationApply
      - ManagedFieldsOperationUpdate
    v1.MountPropagationMode:
      type: string
      enum:
      - None
      - HostToContainer
      - Bidirectional
      x-enum-varnames:
      - MountPropagationNone
      - MountPropagationHostToContainer
      - MountPropagationBidirectional
    v1.NFSVolumeSource:
      type: object
      properties:
        path:
          type: string
          description: |-
            Path that is exported by the NFS server.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        readOnly:
          type: boolean
          description: |-
            ReadOnly here will force
            the NFS export to be mounted with read-only permissions.
            Defaults to false.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
            +optional
        server:
          type: string
          description: |-
            Server is the hostname or IP address of the NFS server.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
    v1.ObjectFieldSelector:
      type: object
      properties:
        apiVersion:
          type: string
          description: |-
            Version of the schema the FieldPath is written in terms of, defaults to "v1".
            +optional
        fieldPath:
          type: string
          description: Path of the field to select in the specified API version.
    v1.ObjectMeta:
      type: object
      properties:
        annotations:
          type: object
          additionalProperties:
            type: string
          description: |-
            Annotations is an unstructured key value map stored with a resource that may be
            set by external tools to store and retrieve arbitrary metadata. They are not
            queryable and should be preserved when modifying objects.
            More info: http://kubernetes.io/docs/user-guide/annotations
            +optional
        clusterName:
          type: string
          description: |-
            The name of the cluster which the object belongs to.
            This is used to distinguish resources with same name and namespace in different clusters.
            This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
            +optional
        creationTimestamp:
          type: string
          description: |-
            CreationTimestamp is a timestamp representing the server time when this object was
            created. It is not guaranteed to be set in happens-before order across separate operations.
            Clients may not set this value. It is represented in RFC3339 form and is in UTC.

            Populated by the system.
            Read-only.
            Null for lists.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            +optional
        deletionGracePeriodSeconds:
          type: integer
          description: |-
            Number of seconds allowed for this object to gracefully terminate before
            it will be removed from the system. Only set when deletionTimestamp is also set.
            May only be shortened.
            Read-only.
            +optional
        deletionTimestamp:
          type: string
          description: |-
            DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
            field is set by the server when a graceful deletion is requested by the user, and is not
            directly settable by a client. The resource is expected to be deleted (no longer visible
            from resource lists, and not reachable by name) after the time in this field, once the
            finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
            Once the deletionTimestamp is set, this value may not be unset or be set further into the
            future, although it may be shortened or the resource may be deleted prior to this time.
            For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
            by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
            the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
            remove the pod from the API. In the presence of network partitions, this object may still
            exist after this timestamp, until an administrator or automated process can determine the
            resource is fully terminated.
            If not set, graceful deletion of the object has not been requested.

            Populated by the system when a graceful deletion is requested.
            Read-only.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            +optional
        finalizers:
          type: array
          description: |-
            Must be empty before the object is deleted from the registry. Each entry
            is an identifier for the responsible component that will remove the entry
            from the list. If the deletionTimestamp of the object is non-nil, entries
            in this list can only be removed.
            Finalizers may be processed and removed in any order.  Order is NOT enforced
            because it introduces significant risk of stuck finalizers.
            finalizers is a shared field, any actor with permission can reorder it.
            If the finalizer list is processed in order, then this can lead to a situation
            in which the component responsible for the first finalizer in the list is
            waiting for a signal (field value, external system, or other) produced by a
            component responsible for a finalizer later in the list, resulting in a deadlock.
            Without enforced ordering finalizers are free to order amongst themselves and
            are not vulnerable to ordering changes in the list.
            +optional
            +patchStrategy=merge
          items:
            type: string
        generateName:
          type: string
          description: |-
            GenerateName is an optional prefix, used by the server, to generate a unique
            name ONLY IF the Name field has not been provided.
            If this field is used, the name returned to the client will be different
            than the name passed. This value will also be combined with a unique suffix.
            The provided value has the same validation rules as the Name field,
            and may be truncated by the length of the suffix required to make the value
            unique on the server.

            If this field is specified and the generated name exists, the server will
            NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
            ServerTimeout indicating a unique name could not be found in the time allotted, and the client
            should retry (optionally after the time indicated in the Retry-After header).

            Applied only if Name is not specified.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
            +optional
        generation:
          type: integer
          description: |-
            A sequence number representing a specific generation of the desired state.
            Populated by the system. Read-only.
            +optional
        labels:
          type: object
          additionalProperties:
            type: string
          description: |-
            Map of string keys and values that can be used to organize and categorize
            (scope and select) objects. May match selectors of replication controllers
            and services.
            More info: http://kubernetes.io/docs/user-guide/labels
            +optional
        managedFields:
          type: array
          description: |-
            ManagedFields maps workflow-id and version to the set of fields
            that are managed by that workflow. This is mostly for internal
            housekeeping, and users typically shouldn't need to set or
            understand this field. A workflow can be the user's name, a
            controller's name, or the name of a specific apply path like
            "ci-cd". The set of fields is always in the version that the
            workflow used when modifying the object.

            +optional
          items:
            $ref: '#/components/schemas/v1.ManagedFieldsEntry'
        name:
          type: string
          description: |-
            Name must be unique within a namespace. Is required when creating resources, although
            some resources may allow a client to request the generation of an appropriate name
            automatically. Name is primarily intended for creation idempotence and configuration
            definition.
            Cannot be updated.
            More info: http://kubernetes.io/docs/user-guide/identifiers#names
            +optional
        namespace:
          type: string
          description: |-
            Namespace defines the space within which each name must be unique. An empty namespace is
            equivalent to the "default" namespace, but "default" is the canonical representation.
            Not all objects are required to be scoped to a namespace - the value of this field for
            those objects will be empty.

            Must be a DNS_LABEL.
            Cannot be updated.
            More info: http://kubernetes.io/docs/user-guide/namespaces
            +optional
        ownerReferences:
          type: array
          description: |-
            List of objects depended by this object. If ALL objects in the list have
            been deleted, this object will be garbage collected. If this object is managed by a controller,
            then an entry in this list will point to this controller, with the controller field set to true.
            There cannot be more than one managing controller.
            +optional
            +patchMergeKey=uid
            +patchStrategy=merge
          items:
            $ref: '#/components/schemas/v1.OwnerReference'
        resourceVersion:
          type: string
          description: |-
            An opaque value that represents the internal version of this object that can
            be used by clients to determine when objects have changed. May be used for optimistic
            concurrency, change detection, and the watch operation on a resource or set of resources.
            Clients must treat these values as opaque and passed unmodified back to the server.
            They may only be valid for a particular resource or set of resources.

            Populated by the system.
            Read-only.
            Value must be treated as opaque by clients and .
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
            +optional
        selfLink:
          type: string
          description: |-
            SelfLink is a URL representing this object.
            Populated by the system.
            Read-only.

            DEPRECATED
            Kubernetes will stop propagating this field in 1.20 release and the field is planned
            to be removed in 1.21 release.
            +optional
        uid:
          type: string
          description: |-
            UID is the unique in time and space value for this object. It is typically generated by
            the server on successful creation of a resource and is not allowed to change on PUT
            operations.

            Populated by the system.
            Read-only.
            More info: http://kubernetes.io/docs/user-guide/identifiers#uids
            +optional
    v1.OwnerReference:
      type: object
      properties:
        apiVersion:
          type: string
          description: API version of the referent.
        blockOwnerDeletion:
          type: boolean
          description: |-
            If true, AND if the owner has the "foregroundDeletion" finalizer, then
            the owner cannot be deleted from the key-value store until this
            reference is removed.
            Defaults to false.
            To set this field, a user needs "delete" permission of the owner,
            otherwise 422 (Unprocessable Entity) will be returned.
            +optional
        controller:
          type: boolean
          description: |-
            If true, this reference points to the managing controller.
            +optional
        kind:
          type: string
          description: |-
            Kind of the referent.
            More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        name:
          type: string
          description: |-
            Name of the referent.
            More info: http://kubernetes.io/docs/user-guide/identifiers#names
        uid:
          type: string
          description: |-
            UID of the referent.
            More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    v1.PersistentVolumeAccessMode:
      type: string
      enum:
      - ReadWriteOnce
      - ReadOnlyMany
      - ReadWriteMany
      x-enum-varnames:
      - ReadWriteOnce
      - ReadOnlyMany
      - ReadWriteMany
    v1.PersistentVolumeClaimSpec:
      type: object
      properties:
        accessModes:
          type: array
          description: |-
            AccessModes contains the desired access modes the volume should have.
            More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
            +optional
          items:
            $ref: '#/components/schemas/v1.PersistentVolumeAccessMode'
        dataSource:
          type: object
          description: |-
            This field can be used to specify either:
            * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
            * An existing PVC (PersistentVolumeClaim)
            * An existing custom resource that implements data population (Alpha)
            In order to use custom resource types that implement data population,
            the AnyVolumeDataSource feature gate must be enabled.
            If the provisioner or an external controller can support the specified data source,
            it will create a new volume based on the contents of the specified data source.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.TypedLocalObjectReference'
        resources:
          type: object
          description: |-
            Resources represents the minimum resources the volume should have.
            More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.ResourceRequirements'
        selector:
          type: object
          description: |-
            A label query over volumes to consider for binding.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.LabelSelector'
        storageClassName:
          type: string
          description: |-
            Name of the StorageClass required by the claim.
            More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
            +optional
        volumeMode:
          type: object
          description: |-
            volumeMode defines what type of volume is required by the claim.
            Value of Filesystem is implied when not included in claim spec.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.PersistentVolumeMode'
        volumeName:
          type: string
          description: |-
            VolumeName is the binding reference to the PersistentVolume backing this claim.
            +optional
    v1.PersistentVolumeClaimTemplate:
      type: object
      properties:
        metadata:
          type: object
          description: |-
            May contain labels and annotations that will be copied into the PVC
            when creating it. No other fields are allowed and will be rejected during
            validation.

            +optional
          allOf:
          - $ref: '#/components/schemas/v1.ObjectMeta'
        spec:
          type: object
          description: |-
            The specification for the PersistentVolumeClaim. The entire content is
            copied unchanged into the PVC that gets created from this
            template. The same fields as in a PersistentVolumeClaim
            are also valid here.
          allOf:
          - $ref: '#/components/schemas/v1.PersistentVolumeClaimSpec'
    v1.PersistentVolumeClaimVolumeSource:
      type: object
      properties:
        claimName:
          type: string
          description: |-
            ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
            More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        readOnly:
          type: boolean
          description: |-
            Will force the ReadOnly setting in VolumeMounts.
            Default false.
            +optional
    v1.PersistentVolumeMode:
      type: string
      enum:
      - Block
      - Filesystem
      x-enum-varnames:
      - PersistentVolumeBlock
      - PersistentVolumeFilesystem
    v1.PhotonPersistentDiskVolumeSource:
      type: object
      properties:
        fsType:
          type: string
          description: |-
            Filesystem type to mount.
            Must be a filesystem type supported by the host operating system.
            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        pdID:
          type: string
          description: ID that identifies Photon Controller persistent disk
    v1.PortworxVolumeSource:
      type: object
      properties:
        fsType:
          type: string
          description: |-
            FSType represents the filesystem type to mount
            Must be a filesystem type supported by the host operating system.
            Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        readOnly:
          type: boolean
          description: |-
            Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            +optional
        volumeID:
          type: string
          description: VolumeID uniquely identifies a Portworx volume
    v1.ProjectedVolumeSource:
      type: object
      properties:
        defaultMode:
          type: integer
          description: |-
            Mode bits used to set permissions on created files by default.
            Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
            YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
            Directories within the path are not affected by this setting.
            This might be in conflict with other options that affect the file
            mode, like fsGroup, and the result can be other mode bits set.
            +optional
        sources:
          type: array
          description: |-
            list of volume projections
            +optional
          items:
            $ref: '#/components/schemas/v1.VolumeProjection'
    v1.QuobyteVolumeSource:
      type: object
      properties:
        group:
          type: string
          description: |-
            Group to map volume access to
            Default is no group
            +optional
        readOnly:
          type: boolean
          description: |-
            ReadOnly here will force the Quobyte volume to be mounted with read-only permissions.
            Defaults to false.
            +optional
        registry:
          type: string
          description: |-
            Registry represents a single or multiple Quobyte Registry services
            specified as a string as host:port pair (multiple entries are separated with commas)
            which acts as the central registry for volumes
        tenant:
          type: string
          description: |-
            Tenant owning the given Quobyte volume in the Backend
            Used with dynamically provisioned Quobyte volumes, value is set by the plugin
            +optional
        user:
          type: string
          description: |-
            User to map volume access to
            Defaults to serivceaccount user
            +optional
        volume:
          type: string
          description: Volume is a string that references an already created Quobyte
            volume by name.
    v1.RBDVolumeSource:
      type: object
      properties:
        fsType:
          type: string
          description: |-
            Filesystem type of the volume that you want to mount.
            Tip: Ensure that the filesystem type is supported by the host operating system.
            Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
            TODO: how do we prevent errors in the filesystem from compromising the machine
            +optional
        image:
          type: string
          description: |-
            The rados image name.
            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
        keyring:
          type: string
          description: |-
            Keyring is the path to key ring for RBDUser.
            Default is /etc/ceph/keyring.
            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            +optional
        monitors:
          type: array
          description: |-
            A collection of Ceph monitors.
            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
          items:
            type: string
        pool:
          type: string
          description: |-
            The rados pool name.
            Default is rbd.
            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            +optional
        readOnly:
          type: boolean
          description: |-
            ReadOnly here will force the ReadOnly setting in VolumeMounts.
            Defaults to false.
            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            +optional
        secretRef:
          type: object
          description: |-
            SecretRef is name of the authentication secret for RBDUser. If provided
            overrides keyring.
            Default is nil.
            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.LocalObjectReference'
        user:
          type: string
          description: |-
            The rados user name.
            Default is admin.
            More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
            +optional
    v1.ResourceFieldSelector:
      type: object
      properties:
        containerName:
          type: string
          description: |-
            Container name: required for volumes, optional for env vars
            +optional
        divisor:
          type: object
          description: |-
            Specifies the output format of the exposed resources, defaults to "1"
            +optional
          allOf:
          - $ref: '#/components/schemas/resource.Quantity'
        resource:
          type: string
          description: "Required: resource to select"
    v1.ResourceList:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/resource.Quantity'
    v1.ResourceRequirements:
      type: object
      properties:
        limits:
          type: object
          description: |-
            Limits describes the maximum amount of compute resources allowed.
            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.ResourceList'
        requests:
          type: object
          description: |-
            Requests describes the minimum amount of compute resources required.
            If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
            otherwise to an implementation-defined value.
            More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.ResourceList'
    v1.ScaleIOVolumeSource:
      type: object
      properties:
        fsType:
          type: string
          description: |-
            Filesystem type to mount.
            Must be a filesystem type supported by the host operating system.
            Ex. "ext4", "xfs", "ntfs".
            Default is "xfs".
            +optional
        gateway:
          type: string
          description: The host address of the ScaleIO API Gateway.
        protectionDomain:
          type: string
          description: |-
            The name of the ScaleIO Protection Domain for the configured storage.
            +optional
        readOnly:
          type: boolean
          description: |-
            Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            +optional
        secretRef:
          type: object
          description: |-
            SecretRef references to the secret for ScaleIO user and other
            sensitive information. If this is not provided, Login operation will fail.
          allOf:
          - $ref: '#/components/schemas/v1.LocalObjectReference'
        sslEnabled:
          type: boolean
          description: |-
            Flag to enable/disable SSL communication with Gateway, default false
            +optional
        storageMode:
          type: string
          description: |-
            Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
            Default is ThinProvisioned.
            +optional
        storagePool:
          type: string
          description: |-
            The ScaleIO Storage Pool associated with the protection domain.
            +optional
        system:
          type: string
          description: The name of the storage system as configured in ScaleIO.
        volumeName:
          type: string
          description: |-
            The name of a volume already created in the ScaleIO system
            that is associated with this volume source.
    v1.SecretEnvSource:
      type: object
      properties:
        name:
          type: string
          description: |-
            Name of the referent.
            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            TODO: Add other useful fields. apiVersion, kind, uid?
            +optional
        optional:
          type: boolean
          description: |-
            Specify whether the Secret must be defined
            +optional
    v1.SecretKeySelector:
      type: object
      properties:
        key:
          type: string
          description: The key of the secret to select from.  Must be a valid secret
            key.
        name:
          type: string
          description: |-
            Name of the referent.
            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            TODO: Add other useful fields. apiVersion, kind, uid?
            +optional
        optional:
          type: boolean
          description: |-
            Specify whether the Secret or its key must be defined
            +optional
    v1.SecretProjection:
      type: object
      properties:
        items:
          type: array
          description: |-
            If unspecified, each key-value pair in the Data field of the referenced
            Secret will be projected into the volume as a file whose name is the
            key and content is the value. If specified, the listed keys will be
            projected into the specified paths, and unlisted keys will not be
            present. If a key is specified which is not present in the Secret,
            the volume setup will error unless it is marked optional. Paths must be
            relative and may not contain the '..' path or start with '..'.
            +optional
          items:
            $ref: '#/components/schemas/v1.KeyToPath'
        name:
          type: string
          description: |-
            Name of the referent.
            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
            TODO: Add other useful fields. apiVersion, kind, uid?
            +optional
        optional:
          type: boolean
          description: |-
            Specify whether the Secret or its key must be defined
            +optional
    v1.SecretVolumeSource:
      type: object
      properties:
        defaultMode:
          type: integer
          description: |-
            Optional: mode bits used to set permissions on created files by default.
            Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
            YAML accepts both octal and decimal values, JSON requires decimal values
            for mode bits. Defaults to 0644.
            Directories within the path are not affected by this setting.
            This might be in conflict with other options that affect the file
            mode, like fsGroup, and the result can be other mode bits set.
            +optional
        items:
          type: array
          description: |-
            If unspecified, each key-value pair in the Data field of the referenced
            Secret will be projected into the volume as a file whose name is the
            key and content is the value. If specified, the listed keys will be
            projected into the specified paths, and unlisted keys will not be
            present. If a key is specified which is not present in the Secret,
            the volume setup will error unless it is marked optional. Paths must be
            relative and may not contain the '..' path or start with '..'.
            +optional
          items:
            $ref: '#/components/schemas/v1.KeyToPath'
        optional:
          type: boolean
          description: |-
            Specify whether the Secret or its keys must be defined
            +optional
        secretName:
          type: string
          description: |-
            Name of the secret in the pod's namespace to use.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
            +optional
    v1.ServiceAccountTokenProjection:
      type: object
      properties:
        audience:
          type: string
          description: |-
            Audience is the intended audience of the token. A recipient of a token
            must identify itself with an identifier specified in the audience of the
            token, and otherwise should reject the token. The audience defaults to the
            identifier of the apiserver.
            +optional
        expirationSeconds:
          type: integer
          description: |-
            ExpirationSeconds is the requested duration of validity of the service
            account token. As the token approaches expiration, the kubelet volume
            plugin will proactively rotate the service account token. The kubelet will
            start trying to rotate the token if the token is older than 80 percent of
            its time to live or if the token is older than 24 hours.Defaults to 1 hour
            and must be at least 10 minutes.
            +optional
        path:
          type: string
          description: |-
            Path is the path relative to the mount point of the file to project the
            token into.
    v1.StorageMedium:
      type: string
      enum:
      - ""
      - Memory
      - HugePages
      - HugePages-
      x-enum-comments:
        StorageMediumDefault: "use whatever the default is for the node, assume anything\
          \ we don't explicitly handle is this"
        StorageMediumHugePages: use hugepages
        StorageMediumHugePagesPrefix: prefix for full medium notation HugePages-<size>
        StorageMediumMemory: use memory (e.g. tmpfs on linux)
      x-enum-varnames:
      - StorageMediumDefault
      - StorageMediumMemory
      - StorageMediumHugePages
      - StorageMediumHugePagesPrefix
    v1.StorageOSVolumeSource:
      type: object
      properties:
        fsType:
          type: string
          description: |-
            Filesystem type to mount.
            Must be a filesystem type supported by the host operating system.
            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
            +optional
        readOnly:
          type: boolean
          description: |-
            Defaults to false (read/write). ReadOnly here will force
            the ReadOnly setting in VolumeMounts.
            +optional
        secretRef:
          type: object
          description: |-
            SecretRef specifies the secret to use for obtaining the StorageOS API
            credentials.  If not specified, default values will be attempted.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.LocalObjectReference'
        volumeName:
          type: string
          description: |-
            VolumeName is the human-readable name of the StorageOS volume.  Volume
            names are only unique within a namespace.
        volumeNamespace:
          type: string
          description: |-
            VolumeNamespace specifies the scope of the volume within StorageOS.  If no
            namespace is specified then the Pod's namespace will be used.  This allows the
            Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
            Set VolumeName to any name to override the default behaviour.
            Set to "default" if you are not using namespaces within StorageOS.
            Namespaces that do not pre-exist within StorageOS will be created.
            +optional
    v1.TaintEffect:
      type: string
      enum:
      - NoSchedule
      - PreferNoSchedule
      - NoExecute
      x-enum-varnames:
      - TaintEffectNoSchedule
      - TaintEffectPreferNoSchedule
      - TaintEffectNoExecute
    v1.Toleration:
      type: object
      properties:
        effect:
          type: object
          description: |-
            Effect indicates the taint effect to match. Empty means match all taint effects.
            When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.TaintEffect'
        key:
          type: string
          description: |-
            Key is the taint key that the toleration applies to. Empty means match all taint keys.
            If the key is empty, operator must be Exists; this combination means to match all values and all keys.
            +optional
        operator:
          type: object
          description: |-
            Operator represents a key's relationship to the value.
            Valid operators are Exists and Equal. Defaults to Equal.
            Exists is equivalent to wildcard for value, so that a pod can
            tolerate all taints of a particular category.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.TolerationOperator'
        tolerationSeconds:
          type: integer
          description: |-
            TolerationSeconds represents the period of time the toleration (which must be
            of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
            it is not set, which means tolerate the taint forever (do not evict). Zero and
            negative values will be treated as 0 (evict immediately) by the system.
            +optional
        value:
          type: string
          description: |-
            Value is the taint value the toleration matches to.
            If the operator is Exists, the value should be empty, otherwise just a regular string.
            +optional
    v1.TolerationOperator:
      type: string
      enum:
      - Exists
      - Equal
      x-enum-varnames:
      - TolerationOpExists
      - TolerationOpEqual
    v1.TypedLocalObjectReference:
      type: object
      properties:
        apiGroup:
          type: string
          description: |-
            APIGroup is the group for the resource being referenced.
            If APIGroup is not specified, the specified Kind must be in the core API group.
            For any other third-party types, APIGroup is required.
            +optional
        kind:
          type: string
          description: Kind is the type of resource being referenced
        name:
          type: string
          description: Name is the name of resource being referenced
    v1.Volume:
      type: object
      properties:
        awsElasticBlockStore:
          type: object
          description: |-
            AWSElasticBlockStore represents an AWS Disk resource that is attached to a
            kubelet's host machine and then exposed to the pod.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.AWSElasticBlockStoreVolumeSource'
        azureDisk:
          type: object
          description: |-
            AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.AzureDiskVolumeSource'
        azureFile:
          type: object
          description: |-
            AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.AzureFileVolumeSource'
        cephfs:
          type: object
          description: |-
            CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.CephFSVolumeSource'
        cinder:
          type: object
          description: |-
            Cinder represents a cinder volume attached and mounted on kubelets host machine.
            More info: https://examples.k8s.io/mysql-cinder-pd/README.md
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.CinderVolumeSource'
        configMap:
          type: object
          description: |-
            ConfigMap represents a configMap that should populate this volume
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.ConfigMapVolumeSource'
        csi:
          type: object
          description: |-
            CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.CSIVolumeSource'
        downwardAPI:
          type: object
          description: |-
            DownwardAPI represents downward API about the pod that should populate this volume
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.DownwardAPIVolumeSource'
        emptyDir:
          type: object
          description: |-
            EmptyDir represents a temporary directory that shares a pod's lifetime.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.EmptyDirVolumeSource'
        ephemeral:
          type: object
          description: |-
            Ephemeral represents a volume that is handled by a cluster storage driver.
            The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
            and deleted when the pod is removed.

            Use this if:
            a) the volume is only needed while the pod runs,
            b) features of normal volumes like restoring from snapshot or capacity
               tracking are needed,
            c) the storage driver is specified through a storage class, and
            d) the storage driver supports dynamic volume provisioning through
               a PersistentVolumeClaim (see EphemeralVolumeSource for more
               information on the connection between this volume type
               and PersistentVolumeClaim).

            Use PersistentVolumeClaim or one of the vendor-specific
            APIs for volumes that persist for longer than the lifecycle
            of an individual pod.

            Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
            be used that way - see the documentation of the driver for
            more information.

            A pod can use both types of ephemeral volumes and
            persistent volumes at the same time.

            This is a beta feature and only available when the GenericEphemeralVolume
            feature gate is enabled.

            +optional
          allOf:
          - $ref: '#/components/schemas/v1.EphemeralVolumeSource'
        fc:
          type: object
          description: |-
            FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.FCVolumeSource'
        flexVolume:
          type: object
          description: |-
            FlexVolume represents a generic volume resource that is
            provisioned/attached using an exec based plugin.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.FlexVolumeSource'
        flocker:
          type: object
          description: |-
            Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.FlockerVolumeSource'
        gcePersistentDisk:
          type: object
          description: |-
            GCEPersistentDisk represents a GCE Disk resource that is attached to a
            kubelet's host machine and then exposed to the pod.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.GCEPersistentDiskVolumeSource'
        gitRepo:
          type: object
          description: |-
            GitRepo represents a git repository at a particular revision.
            DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an
            EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
            into the Pod's container.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.GitRepoVolumeSource'
        glusterfs:
          type: object
          description: |-
            Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
            More info: https://examples.k8s.io/volumes/glusterfs/README.md
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.GlusterfsVolumeSource'
        hostPath:
          type: object
          description: |-
            HostPath represents a pre-existing file or directory on the host
            machine that is directly exposed to the container. This is generally
            used for system agents or other privileged things that are allowed
            to see the host machine. Most containers will NOT need this.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
            ---
            TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not
            mount host directories as read/write.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.HostPathVolumeSource'
        iscsi:
          type: object
          description: |-
            ISCSI represents an ISCSI Disk resource that is attached to a
            kubelet's host machine and then exposed to the pod.
            More info: https://examples.k8s.io/volumes/iscsi/README.md
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.ISCSIVolumeSource'
        name:
          type: string
          description: |-
            Volume's name.
            Must be a DNS_LABEL and unique within the pod.
            More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        nfs:
          type: object
          description: |-
            NFS represents an NFS mount on the host that shares a pod's lifetime
            More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.NFSVolumeSource'
        persistentVolumeClaim:
          type: object
          description: |-
            PersistentVolumeClaimVolumeSource represents a reference to a
            PersistentVolumeClaim in the same namespace.
            More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.PersistentVolumeClaimVolumeSource'
        photonPersistentDisk:
          type: object
          description: PhotonPersistentDisk represents a PhotonController persistent
            disk attached and mounted on kubelets host machine
          allOf:
          - $ref: '#/components/schemas/v1.PhotonPersistentDiskVolumeSource'
        portworxVolume:
          type: object
          description: |-
            PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.PortworxVolumeSource'
        projected:
          type: object
          description: "Items for all in one resources secrets, configmaps, and downward\
            \ API"
          allOf:
          - $ref: '#/components/schemas/v1.ProjectedVolumeSource'
        quobyte:
          type: object
          description: |-
            Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.QuobyteVolumeSource'
        rbd:
          type: object
          description: |-
            RBD represents a Rados Block Device mount on the host that shares a pod's lifetime.
            More info: https://examples.k8s.io/volumes/rbd/README.md
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.RBDVolumeSource'
        scaleIO:
          type: object
          description: |-
            ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.ScaleIOVolumeSource'
        secret:
          type: object
          description: |-
            Secret represents a secret that should populate this volume.
            More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.SecretVolumeSource'
        storageos:
          type: object
          description: |-
            StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.StorageOSVolumeSource'
        vsphereVolume:
          type: object
          description: |-
            VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.VsphereVirtualDiskVolumeSource'
    v1.VolumeMount:
      type: object
      properties:
        mountPath:
          type: string
          description: |-
            Path within the container at which the volume should be mounted.  Must
            not contain ':'.
        mountPropagation:
          type: object
          description: |-
            mountPropagation determines how mounts are propagated from the host
            to container and the other way around.
            When not set, MountPropagationNone is used.
            This field is beta in 1.10.
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.MountPropagationMode'
        name:
          type: string
          description: This must match the Name of a Volume.
        readOnly:
          type: boolean
          description: |-
            Mounted read-only if true, read-write otherwise (false or unspecified).
            Defaults to false.
            +optional
        subPath:
          type: string
          description: |-
            Path within the volume from which the container's volume should be mounted.
            Defaults to "" (volume's root).
            +optional
        subPathExpr:
          type: string
          description: |-
            Expanded path within the volume from which the container's volume should be mounted.
            Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
            Defaults to "" (volume's root).
            SubPathExpr and SubPath are mutually exclusive.
            +optional
    v1.VolumeProjection:
      type: object
      properties:
        configMap:
          type: object
          description: |-
            information about the configMap data to project
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.ConfigMapProjection'
        downwardAPI:
          type: object
          description: |-
            information about the downwardAPI data to project
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.DownwardAPIProjection'
        secret:
          type: object
          description: |-
            information about the secret data to project
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.SecretProjection'
        serviceAccountToken:
          type: object
          description: |-
            information about the serviceAccountToken data to project
            +optional
          allOf:
          - $ref: '#/components/schemas/v1.ServiceAccountTokenProjection'
    v1.VsphereVirtualDiskVolumeSource:
      type: object
      properties:
        fsType:
          type: string
          description: |-
            Filesystem type to mount.
            Must be a filesystem type supported by the host operating system.
            Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
            +optional
        storagePolicyID:
          type: string
          description: |-
            Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
            +optional
        storagePolicyName:
          type: string
          description: |-
            Storage Policy Based Management (SPBM) profile name.
            +optional
        volumePath:
          type: string
          description: Path that identifies vSphere volume vmdk
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-Key
      in: header
    BasicAuth:
      type: http
      scheme: basic
x-original-swagger-version: "2.0"
