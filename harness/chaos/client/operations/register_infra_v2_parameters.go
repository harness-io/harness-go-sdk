// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/harness/harness-go-sdk/harness/chaos/models"
)

// NewRegisterInfraV2Params creates a new RegisterInfraV2Params object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRegisterInfraV2Params() *RegisterInfraV2Params {
	return &RegisterInfraV2Params{
		timeout: cr.DefaultTimeout,
	}
}

// NewRegisterInfraV2ParamsWithTimeout creates a new RegisterInfraV2Params object
// with the ability to set a timeout on a request.
func NewRegisterInfraV2ParamsWithTimeout(timeout time.Duration) *RegisterInfraV2Params {
	return &RegisterInfraV2Params{
		timeout: timeout,
	}
}

// NewRegisterInfraV2ParamsWithContext creates a new RegisterInfraV2Params object
// with the ability to set a context for a request.
func NewRegisterInfraV2ParamsWithContext(ctx context.Context) *RegisterInfraV2Params {
	return &RegisterInfraV2Params{
		Context: ctx,
	}
}

// NewRegisterInfraV2ParamsWithHTTPClient creates a new RegisterInfraV2Params object
// with the ability to set a custom HTTPClient for a request.
func NewRegisterInfraV2ParamsWithHTTPClient(client *http.Client) *RegisterInfraV2Params {
	return &RegisterInfraV2Params{
		HTTPClient: client,
	}
}

/*
RegisterInfraV2Params contains all the parameters to send to the API endpoint

	for the register infra v2 operation.

	Typically these are written to a http.Request.
*/
type RegisterInfraV2Params struct {

	/* AccountIdentifier.

	   account id that want to access the resource
	*/
	AccountIdentifier string

	/* CorrelationID.

	   correlation id is used to debug micro svc communication
	*/
	CorrelationID *string

	/* OrganizationIdentifier.

	   organization id that want to access the resource
	*/
	OrganizationIdentifier string

	/* ProjectIdentifier.

	   project id that want to access the resource
	*/
	ProjectIdentifier string

	/* Request.

	   Register Infra V2
	*/
	Request *models.InfraV2RegisterInfrastructureV2Request

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the register infra v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RegisterInfraV2Params) WithDefaults() *RegisterInfraV2Params {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the register infra v2 params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RegisterInfraV2Params) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the register infra v2 params
func (o *RegisterInfraV2Params) WithTimeout(timeout time.Duration) *RegisterInfraV2Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the register infra v2 params
func (o *RegisterInfraV2Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the register infra v2 params
func (o *RegisterInfraV2Params) WithContext(ctx context.Context) *RegisterInfraV2Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the register infra v2 params
func (o *RegisterInfraV2Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the register infra v2 params
func (o *RegisterInfraV2Params) WithHTTPClient(client *http.Client) *RegisterInfraV2Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the register infra v2 params
func (o *RegisterInfraV2Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountIdentifier adds the accountIdentifier to the register infra v2 params
func (o *RegisterInfraV2Params) WithAccountIdentifier(accountIdentifier string) *RegisterInfraV2Params {
	o.SetAccountIdentifier(accountIdentifier)
	return o
}

// SetAccountIdentifier adds the accountIdentifier to the register infra v2 params
func (o *RegisterInfraV2Params) SetAccountIdentifier(accountIdentifier string) {
	o.AccountIdentifier = accountIdentifier
}

// WithCorrelationID adds the correlationID to the register infra v2 params
func (o *RegisterInfraV2Params) WithCorrelationID(correlationID *string) *RegisterInfraV2Params {
	o.SetCorrelationID(correlationID)
	return o
}

// SetCorrelationID adds the correlationId to the register infra v2 params
func (o *RegisterInfraV2Params) SetCorrelationID(correlationID *string) {
	o.CorrelationID = correlationID
}

// WithOrganizationIdentifier adds the organizationIdentifier to the register infra v2 params
func (o *RegisterInfraV2Params) WithOrganizationIdentifier(organizationIdentifier string) *RegisterInfraV2Params {
	o.SetOrganizationIdentifier(organizationIdentifier)
	return o
}

// SetOrganizationIdentifier adds the organizationIdentifier to the register infra v2 params
func (o *RegisterInfraV2Params) SetOrganizationIdentifier(organizationIdentifier string) {
	o.OrganizationIdentifier = organizationIdentifier
}

// WithProjectIdentifier adds the projectIdentifier to the register infra v2 params
func (o *RegisterInfraV2Params) WithProjectIdentifier(projectIdentifier string) *RegisterInfraV2Params {
	o.SetProjectIdentifier(projectIdentifier)
	return o
}

// SetProjectIdentifier adds the projectIdentifier to the register infra v2 params
func (o *RegisterInfraV2Params) SetProjectIdentifier(projectIdentifier string) {
	o.ProjectIdentifier = projectIdentifier
}

// WithRequest adds the request to the register infra v2 params
func (o *RegisterInfraV2Params) WithRequest(request *models.InfraV2RegisterInfrastructureV2Request) *RegisterInfraV2Params {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the register infra v2 params
func (o *RegisterInfraV2Params) SetRequest(request *models.InfraV2RegisterInfrastructureV2Request) {
	o.Request = request
}

// WriteToRequest writes these params to a swagger request
func (o *RegisterInfraV2Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param accountIdentifier
	qrAccountIdentifier := o.AccountIdentifier
	qAccountIdentifier := qrAccountIdentifier
	if qAccountIdentifier != "" {

		if err := r.SetQueryParam("accountIdentifier", qAccountIdentifier); err != nil {
			return err
		}
	}

	if o.CorrelationID != nil {

		// query param correlationID
		var qrCorrelationID string

		if o.CorrelationID != nil {
			qrCorrelationID = *o.CorrelationID
		}
		qCorrelationID := qrCorrelationID
		if qCorrelationID != "" {

			if err := r.SetQueryParam("correlationID", qCorrelationID); err != nil {
				return err
			}
		}
	}

	// query param organizationIdentifier
	qrOrganizationIdentifier := o.OrganizationIdentifier
	qOrganizationIdentifier := qrOrganizationIdentifier
	if qOrganizationIdentifier != "" {

		if err := r.SetQueryParam("organizationIdentifier", qOrganizationIdentifier); err != nil {
			return err
		}
	}

	// query param projectIdentifier
	qrProjectIdentifier := o.ProjectIdentifier
	qProjectIdentifier := qrProjectIdentifier
	if qProjectIdentifier != "" {

		if err := r.SetQueryParam("projectIdentifier", qProjectIdentifier); err != nil {
			return err
		}
	}
	if o.Request != nil {
		if err := r.SetBodyParam(o.Request); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
