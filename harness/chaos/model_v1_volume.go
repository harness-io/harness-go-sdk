/*
 * Chaos Manager API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package chaos

type V1Volume struct {
	// AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore +optional
	AwsElasticBlockStore *AllOfv1VolumeAwsElasticBlockStore `json:"awsElasticBlockStore,omitempty"`
	// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod. +optional
	AzureDisk *AllOfv1VolumeAzureDisk `json:"azureDisk,omitempty"`
	// AzureFile represents an Azure File Service mount on the host and bind mount to the pod. +optional
	AzureFile *AllOfv1VolumeAzureFile `json:"azureFile,omitempty"`
	// CephFS represents a Ceph FS mount on the host that shares a pod's lifetime +optional
	Cephfs *AllOfv1VolumeCephfs `json:"cephfs,omitempty"`
	// Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md +optional
	Cinder *AllOfv1VolumeCinder `json:"cinder,omitempty"`
	// ConfigMap represents a configMap that should populate this volume +optional
	ConfigMap *AllOfv1VolumeConfigMap `json:"configMap,omitempty"`
	// CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature). +optional
	Csi *AllOfv1VolumeCsi `json:"csi,omitempty"`
	// DownwardAPI represents downward API about the pod that should populate this volume +optional
	DownwardAPI *AllOfv1VolumeDownwardApi `json:"downwardAPI,omitempty"`
	// EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir +optional
	EmptyDir *AllOfv1VolumeEmptyDir `json:"emptyDir,omitempty"`
	// Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim).  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.  A pod can use both types of ephemeral volumes and persistent volumes at the same time.  This is a beta feature and only available when the GenericEphemeralVolume feature gate is enabled.  +optional
	Ephemeral *AllOfv1VolumeEphemeral `json:"ephemeral,omitempty"`
	// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod. +optional
	Fc *AllOfv1VolumeFc `json:"fc,omitempty"`
	// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. +optional
	FlexVolume *AllOfv1VolumeFlexVolume `json:"flexVolume,omitempty"`
	// Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running +optional
	Flocker *AllOfv1VolumeFlocker `json:"flocker,omitempty"`
	// GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk +optional
	GcePersistentDisk *AllOfv1VolumeGcePersistentDisk `json:"gcePersistentDisk,omitempty"`
	// GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container. +optional
	GitRepo *AllOfv1VolumeGitRepo `json:"gitRepo,omitempty"`
	// Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md +optional
	Glusterfs *AllOfv1VolumeGlusterfs `json:"glusterfs,omitempty"`
	// HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write. +optional
	HostPath *AllOfv1VolumeHostPath `json:"hostPath,omitempty"`
	// ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md +optional
	Iscsi *AllOfv1VolumeIscsi `json:"iscsi,omitempty"`
	// Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name string `json:"name,omitempty"`
	// NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs +optional
	Nfs *AllOfv1VolumeNfs `json:"nfs,omitempty"`
	// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims +optional
	PersistentVolumeClaim *AllOfv1VolumePersistentVolumeClaim `json:"persistentVolumeClaim,omitempty"`
	// PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
	PhotonPersistentDisk *AllOfv1VolumePhotonPersistentDisk `json:"photonPersistentDisk,omitempty"`
	// PortworxVolume represents a portworx volume attached and mounted on kubelets host machine +optional
	PortworxVolume *AllOfv1VolumePortworxVolume `json:"portworxVolume,omitempty"`
	// Items for all in one resources secrets, configmaps, and downward API
	Projected *AllOfv1VolumeProjected `json:"projected,omitempty"`
	// Quobyte represents a Quobyte mount on the host that shares a pod's lifetime +optional
	Quobyte *AllOfv1VolumeQuobyte `json:"quobyte,omitempty"`
	// RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md +optional
	Rbd *AllOfv1VolumeRbd `json:"rbd,omitempty"`
	// ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes. +optional
	ScaleIO *AllOfv1VolumeScaleIo `json:"scaleIO,omitempty"`
	// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret +optional
	Secret *AllOfv1VolumeSecret `json:"secret,omitempty"`
	// StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes. +optional
	Storageos *AllOfv1VolumeStorageos `json:"storageos,omitempty"`
	// VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine +optional
	VsphereVolume *AllOfv1VolumeVsphereVolume `json:"vsphereVolume,omitempty"`
}
