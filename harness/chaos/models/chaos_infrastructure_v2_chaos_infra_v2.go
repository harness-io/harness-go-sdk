// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChaosInfrastructureV2ChaosInfraV2 chaos infrastructure v2 chaos infra v2
//
// swagger:model chaos_infrastructure_v2.ChaosInfraV2
type ChaosInfrastructureV2ChaosInfraV2 struct {

	// account ID
	AccountID string `json:"accountID,omitempty"`

	// api version
	APIVersion string `json:"apiVersion,omitempty"`

	// created at
	CreatedAt int64 `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// environment Id
	EnvironmentID string `json:"environmentId,omitempty"`

	// identity
	Identity string `json:"identity,omitempty"`

	// is removed
	IsRemoved bool `json:"isRemoved,omitempty"`

	// kind
	Kind string `json:"kind,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// org ID
	OrgID string `json:"orgID,omitempty"`

	// project ID
	ProjectID string `json:"projectID,omitempty"`

	// spec
	Spec *ChaosInfrastructureV2ChaosInfraV2Spec `json:"spec,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// updated at
	UpdatedAt int64 `json:"updatedAt,omitempty"`

	// updated by
	UpdatedBy string `json:"updatedBy,omitempty"`
}

// Validate validates this chaos infrastructure v2 chaos infra v2
func (m *ChaosInfrastructureV2ChaosInfraV2) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChaosInfrastructureV2ChaosInfraV2) validateSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	if m.Spec != nil {
		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this chaos infrastructure v2 chaos infra v2 based on the context it is used
func (m *ChaosInfrastructureV2ChaosInfraV2) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChaosInfrastructureV2ChaosInfraV2) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.Spec != nil {

		if swag.IsZero(m.Spec) { // not required
			return nil
		}

		if err := m.Spec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChaosInfrastructureV2ChaosInfraV2) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChaosInfrastructureV2ChaosInfraV2) UnmarshalBinary(b []byte) error {
	var res ChaosInfrastructureV2ChaosInfraV2
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
