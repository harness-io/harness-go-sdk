// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ChaosInfrastructureV2InfraScope chaos infrastructure v2 infra scope
//
// swagger:model chaos_infrastructure_v2.InfraScope
type ChaosInfrastructureV2InfraScope string

func NewChaosInfrastructureV2InfraScope(value ChaosInfrastructureV2InfraScope) *ChaosInfrastructureV2InfraScope {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ChaosInfrastructureV2InfraScope.
func (m ChaosInfrastructureV2InfraScope) Pointer() *ChaosInfrastructureV2InfraScope {
	return &m
}

const (

	// ChaosInfrastructureV2InfraScopeNAMESPACE captures enum value "NAMESPACE"
	ChaosInfrastructureV2InfraScopeNAMESPACE ChaosInfrastructureV2InfraScope = "NAMESPACE"

	// ChaosInfrastructureV2InfraScopeCLUSTER captures enum value "CLUSTER"
	ChaosInfrastructureV2InfraScopeCLUSTER ChaosInfrastructureV2InfraScope = "CLUSTER"
)

// for schema
var chaosInfrastructureV2InfraScopeEnum []interface{}

func init() {
	var res []ChaosInfrastructureV2InfraScope
	if err := json.Unmarshal([]byte(`["NAMESPACE","CLUSTER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chaosInfrastructureV2InfraScopeEnum = append(chaosInfrastructureV2InfraScopeEnum, v)
	}
}

func (m ChaosInfrastructureV2InfraScope) validateChaosInfrastructureV2InfraScopeEnum(path, location string, value ChaosInfrastructureV2InfraScope) error {
	if err := validate.EnumCase(path, location, value, chaosInfrastructureV2InfraScopeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this chaos infrastructure v2 infra scope
func (m ChaosInfrastructureV2InfraScope) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateChaosInfrastructureV2InfraScopeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this chaos infrastructure v2 infra scope based on context it is used
func (m ChaosInfrastructureV2InfraScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
