// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ChaosInfrastructureV2InfraType chaos infrastructure v2 infra type
//
// swagger:model chaos_infrastructure_v2.InfraType
type ChaosInfrastructureV2InfraType string

func NewChaosInfrastructureV2InfraType(value ChaosInfrastructureV2InfraType) *ChaosInfrastructureV2InfraType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ChaosInfrastructureV2InfraType.
func (m ChaosInfrastructureV2InfraType) Pointer() *ChaosInfrastructureV2InfraType {
	return &m
}

const (

	// ChaosInfrastructureV2InfraTypeKUBERNETES captures enum value "KUBERNETES"
	ChaosInfrastructureV2InfraTypeKUBERNETES ChaosInfrastructureV2InfraType = "KUBERNETES"

	// ChaosInfrastructureV2InfraTypeKUBERNETESV2 captures enum value "KUBERNETESV2"
	ChaosInfrastructureV2InfraTypeKUBERNETESV2 ChaosInfrastructureV2InfraType = "KUBERNETESV2"
)

// for schema
var chaosInfrastructureV2InfraTypeEnum []interface{}

func init() {
	var res []ChaosInfrastructureV2InfraType
	if err := json.Unmarshal([]byte(`["KUBERNETES","KUBERNETESV2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chaosInfrastructureV2InfraTypeEnum = append(chaosInfrastructureV2InfraTypeEnum, v)
	}
}

func (m ChaosInfrastructureV2InfraType) validateChaosInfrastructureV2InfraTypeEnum(path, location string, value ChaosInfrastructureV2InfraType) error {
	if err := validate.EnumCase(path, location, value, chaosInfrastructureV2InfraTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this chaos infrastructure v2 infra type
func (m ChaosInfrastructureV2InfraType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateChaosInfrastructureV2InfraTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this chaos infrastructure v2 infra type based on context it is used
func (m ChaosInfrastructureV2InfraType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
