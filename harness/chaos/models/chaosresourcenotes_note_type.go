// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ChaosresourcenotesNoteType chaosresourcenotes note type
//
// swagger:model chaosresourcenotes.NoteType
type ChaosresourcenotesNoteType string

func NewChaosresourcenotesNoteType(value ChaosresourcenotesNoteType) *ChaosresourcenotesNoteType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ChaosresourcenotesNoteType.
func (m ChaosresourcenotesNoteType) Pointer() *ChaosresourcenotesNoteType {
	return &m
}

const (

	// ChaosresourcenotesNoteTypeExperimentDashRun captures enum value "experiment-run"
	ChaosresourcenotesNoteTypeExperimentDashRun ChaosresourcenotesNoteType = "experiment-run"

	// ChaosresourcenotesNoteTypeGamedayDashRunDashSummary captures enum value "gameday-run-summary"
	ChaosresourcenotesNoteTypeGamedayDashRunDashSummary ChaosresourcenotesNoteType = "gameday-run-summary"

	// ChaosresourcenotesNoteTypeGamedayDashRunDashExperiment captures enum value "gameday-run-experiment"
	ChaosresourcenotesNoteTypeGamedayDashRunDashExperiment ChaosresourcenotesNoteType = "gameday-run-experiment"
)

// for schema
var chaosresourcenotesNoteTypeEnum []interface{}

func init() {
	var res []ChaosresourcenotesNoteType
	if err := json.Unmarshal([]byte(`["experiment-run","gameday-run-summary","gameday-run-experiment"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chaosresourcenotesNoteTypeEnum = append(chaosresourcenotesNoteTypeEnum, v)
	}
}

func (m ChaosresourcenotesNoteType) validateChaosresourcenotesNoteTypeEnum(path, location string, value ChaosresourcenotesNoteType) error {
	if err := validate.EnumCase(path, location, value, chaosresourcenotesNoteTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this chaosresourcenotes note type
func (m ChaosresourcenotesNoteType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateChaosresourcenotesNoteTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this chaosresourcenotes note type based on context it is used
func (m ChaosresourcenotesNoteType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
