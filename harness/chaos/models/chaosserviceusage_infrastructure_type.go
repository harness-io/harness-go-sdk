// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ChaosserviceusageInfrastructureType chaosserviceusage infrastructure type
//
// swagger:model chaosserviceusage.InfrastructureType
type ChaosserviceusageInfrastructureType string

func NewChaosserviceusageInfrastructureType(value ChaosserviceusageInfrastructureType) *ChaosserviceusageInfrastructureType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ChaosserviceusageInfrastructureType.
func (m ChaosserviceusageInfrastructureType) Pointer() *ChaosserviceusageInfrastructureType {
	return &m
}

const (

	// ChaosserviceusageInfrastructureTypeKubernetes captures enum value "Kubernetes"
	ChaosserviceusageInfrastructureTypeKubernetes ChaosserviceusageInfrastructureType = "Kubernetes"

	// ChaosserviceusageInfrastructureTypeKubernetesV2 captures enum value "KubernetesV2"
	ChaosserviceusageInfrastructureTypeKubernetesV2 ChaosserviceusageInfrastructureType = "KubernetesV2"

	// ChaosserviceusageInfrastructureTypeWindows captures enum value "Windows"
	ChaosserviceusageInfrastructureTypeWindows ChaosserviceusageInfrastructureType = "Windows"

	// ChaosserviceusageInfrastructureTypeLinux captures enum value "Linux"
	ChaosserviceusageInfrastructureTypeLinux ChaosserviceusageInfrastructureType = "Linux"
)

// for schema
var chaosserviceusageInfrastructureTypeEnum []interface{}

func init() {
	var res []ChaosserviceusageInfrastructureType
	if err := json.Unmarshal([]byte(`["Kubernetes","KubernetesV2","Windows","Linux"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chaosserviceusageInfrastructureTypeEnum = append(chaosserviceusageInfrastructureTypeEnum, v)
	}
}

func (m ChaosserviceusageInfrastructureType) validateChaosserviceusageInfrastructureTypeEnum(path, location string, value ChaosserviceusageInfrastructureType) error {
	if err := validate.EnumCase(path, location, value, chaosserviceusageInfrastructureTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this chaosserviceusage infrastructure type
func (m ChaosserviceusageInfrastructureType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateChaosserviceusageInfrastructureTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this chaosserviceusage infrastructure type based on context it is used
func (m ChaosserviceusageInfrastructureType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
