// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChaosserviceusageOverallServiceUsageStats chaosserviceusage overall service usage stats
//
// swagger:model chaosserviceusage.OverallServiceUsageStats
type ChaosserviceusageOverallServiceUsageStats struct {

	// account ID
	AccountID string `json:"accountID,omitempty"`

	// license service mapping
	LicenseServiceMapping *ChaosserviceusageServiceStatsByType `json:"licenseServiceMapping,omitempty"`

	// service stats
	ServiceStats *ChaosserviceusageServiceStatsByType `json:"serviceStats,omitempty"`

	// total usage
	TotalUsage float64 `json:"totalUsage,omitempty"`
}

// Validate validates this chaosserviceusage overall service usage stats
func (m *ChaosserviceusageOverallServiceUsageStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLicenseServiceMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChaosserviceusageOverallServiceUsageStats) validateLicenseServiceMapping(formats strfmt.Registry) error {
	if swag.IsZero(m.LicenseServiceMapping) { // not required
		return nil
	}

	if m.LicenseServiceMapping != nil {
		if err := m.LicenseServiceMapping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("licenseServiceMapping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("licenseServiceMapping")
			}
			return err
		}
	}

	return nil
}

func (m *ChaosserviceusageOverallServiceUsageStats) validateServiceStats(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceStats) { // not required
		return nil
	}

	if m.ServiceStats != nil {
		if err := m.ServiceStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceStats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this chaosserviceusage overall service usage stats based on the context it is used
func (m *ChaosserviceusageOverallServiceUsageStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLicenseServiceMapping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChaosserviceusageOverallServiceUsageStats) contextValidateLicenseServiceMapping(ctx context.Context, formats strfmt.Registry) error {

	if m.LicenseServiceMapping != nil {

		if swag.IsZero(m.LicenseServiceMapping) { // not required
			return nil
		}

		if err := m.LicenseServiceMapping.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("licenseServiceMapping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("licenseServiceMapping")
			}
			return err
		}
	}

	return nil
}

func (m *ChaosserviceusageOverallServiceUsageStats) contextValidateServiceStats(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceStats != nil {

		if swag.IsZero(m.ServiceStats) { // not required
			return nil
		}

		if err := m.ServiceStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceStats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChaosserviceusageOverallServiceUsageStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChaosserviceusageOverallServiceUsageStats) UnmarshalBinary(b []byte) error {
	var res ChaosserviceusageOverallServiceUsageStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
