// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChaosserviceusageServiceData chaosserviceusage service data
//
// swagger:model chaosserviceusage.ServiceData
type ChaosserviceusageServiceData struct {

	// experiment runs
	ExperimentRuns int64 `json:"experimentRuns,omitempty"`

	// experiments
	Experiments int64 `json:"experiments,omitempty"`

	// faults ran
	FaultsRan int64 `json:"faultsRan,omitempty"`

	// infra structure
	InfraStructure string `json:"infraStructure,omitempty"`

	// infra type
	InfraType ChaosserviceusageInfrastructureType `json:"infraType,omitempty"`

	// license utilisation
	LicenseUtilisation float64 `json:"licenseUtilisation,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// org ID
	OrgID string `json:"orgID,omitempty"`

	// project ID
	ProjectID string `json:"projectID,omitempty"`

	// resource
	Resource string `json:"resource,omitempty"`

	// service
	Service string `json:"service,omitempty"`

	// service ID
	ServiceID string `json:"serviceID,omitempty"`

	// sub type
	SubType string `json:"subType,omitempty"`

	// type
	Type ChaosserviceusageServiceType `json:"type,omitempty"`
}

// Validate validates this chaosserviceusage service data
func (m *ChaosserviceusageServiceData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInfraType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChaosserviceusageServiceData) validateInfraType(formats strfmt.Registry) error {
	if swag.IsZero(m.InfraType) { // not required
		return nil
	}

	if err := m.InfraType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraType")
		}
		return err
	}

	return nil
}

func (m *ChaosserviceusageServiceData) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this chaosserviceusage service data based on the context it is used
func (m *ChaosserviceusageServiceData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInfraType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChaosserviceusageServiceData) contextValidateInfraType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.InfraType) { // not required
		return nil
	}

	if err := m.InfraType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraType")
		}
		return err
	}

	return nil
}

func (m *ChaosserviceusageServiceData) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChaosserviceusageServiceData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChaosserviceusageServiceData) UnmarshalBinary(b []byte) error {
	var res ChaosserviceusageServiceData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
