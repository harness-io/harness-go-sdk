// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ChaosserviceusageServiceType chaosserviceusage service type
//
// swagger:model chaosserviceusage.ServiceType
type ChaosserviceusageServiceType string

func NewChaosserviceusageServiceType(value ChaosserviceusageServiceType) *ChaosserviceusageServiceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ChaosserviceusageServiceType.
func (m ChaosserviceusageServiceType) Pointer() *ChaosserviceusageServiceType {
	return &m
}

const (

	// ChaosserviceusageServiceTypeKubernetes captures enum value "Kubernetes"
	ChaosserviceusageServiceTypeKubernetes ChaosserviceusageServiceType = "Kubernetes"

	// ChaosserviceusageServiceTypeLinux captures enum value "Linux"
	ChaosserviceusageServiceTypeLinux ChaosserviceusageServiceType = "Linux"

	// ChaosserviceusageServiceTypeWindows captures enum value "Windows"
	ChaosserviceusageServiceTypeWindows ChaosserviceusageServiceType = "Windows"

	// ChaosserviceusageServiceTypeServerless captures enum value "Serverless"
	ChaosserviceusageServiceTypeServerless ChaosserviceusageServiceType = "Serverless"

	// ChaosserviceusageServiceTypeContainerServices captures enum value "ContainerServices"
	ChaosserviceusageServiceTypeContainerServices ChaosserviceusageServiceType = "ContainerServices"

	// ChaosserviceusageServiceTypeCloudResources captures enum value "CloudResources"
	ChaosserviceusageServiceTypeCloudResources ChaosserviceusageServiceType = "CloudResources"

	// ChaosserviceusageServiceTypeOthers captures enum value "Others"
	ChaosserviceusageServiceTypeOthers ChaosserviceusageServiceType = "Others"
)

// for schema
var chaosserviceusageServiceTypeEnum []interface{}

func init() {
	var res []ChaosserviceusageServiceType
	if err := json.Unmarshal([]byte(`["Kubernetes","Linux","Windows","Serverless","ContainerServices","CloudResources","Others"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chaosserviceusageServiceTypeEnum = append(chaosserviceusageServiceTypeEnum, v)
	}
}

func (m ChaosserviceusageServiceType) validateChaosserviceusageServiceTypeEnum(path, location string, value ChaosserviceusageServiceType) error {
	if err := validate.EnumCase(path, location, value, chaosserviceusageServiceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this chaosserviceusage service type
func (m ChaosserviceusageServiceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateChaosserviceusageServiceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this chaosserviceusage service type based on context it is used
func (m ChaosserviceusageServiceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
