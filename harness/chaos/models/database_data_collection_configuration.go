// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DatabaseDataCollectionConfiguration database data collection configuration
//
// swagger:model database.DataCollectionConfiguration
type DatabaseDataCollectionConfiguration struct {

	// blacklisted namespaces
	BlacklistedNamespaces []string `json:"blacklistedNamespaces"`

	// collection window in min
	CollectionWindowInMin int64 `json:"collectionWindowInMin,omitempty"`

	// cron
	Cron *DatabaseCronConfig `json:"cron,omitempty"`

	// enable batch resources
	EnableBatchResources bool `json:"enableBatchResources,omitempty"`

	// enable node agent
	EnableNodeAgent bool `json:"enableNodeAgent,omitempty"`

	// enable orphaned pod
	EnableOrphanedPod bool `json:"enableOrphanedPod,omitempty"`

	// namespace selector
	NamespaceSelector string `json:"namespaceSelector,omitempty"`

	// node agent selector
	NodeAgentSelector string `json:"nodeAgentSelector,omitempty"`

	// observed namespaces
	ObservedNamespaces []string `json:"observedNamespaces"`
}

// Validate validates this database data collection configuration
func (m *DatabaseDataCollectionConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCron(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseDataCollectionConfiguration) validateCron(formats strfmt.Registry) error {
	if swag.IsZero(m.Cron) { // not required
		return nil
	}

	if m.Cron != nil {
		if err := m.Cron.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cron")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cron")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this database data collection configuration based on the context it is used
func (m *DatabaseDataCollectionConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCron(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseDataCollectionConfiguration) contextValidateCron(ctx context.Context, formats strfmt.Registry) error {

	if m.Cron != nil {

		if swag.IsZero(m.Cron) { // not required
			return nil
		}

		if err := m.Cron.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cron")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cron")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseDataCollectionConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseDataCollectionConfiguration) UnmarshalBinary(b []byte) error {
	var res DatabaseDataCollectionConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
