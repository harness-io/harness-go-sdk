// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DatabaseDiscoveredKubernetesWorkload database discovered kubernetes workload
//
// swagger:model database.DiscoveredKubernetesWorkload
type DatabaseDiscoveredKubernetesWorkload struct {

	// annotations
	Annotations map[string]string `json:"annotations,omitempty"`

	// identity
	Identity *V1ObjectReference `json:"identity,omitempty"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// pod annotations
	PodAnnotations map[string]string `json:"podAnnotations,omitempty"`

	// pod labels
	PodLabels map[string]string `json:"podLabels,omitempty"`

	// replicas
	Replicas []*DatabaseDiscoveredPod `json:"replicas"`
}

// Validate validates this database discovered kubernetes workload
func (m *DatabaseDiscoveredKubernetesWorkload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicas(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseDiscoveredKubernetesWorkload) validateIdentity(formats strfmt.Registry) error {
	if swag.IsZero(m.Identity) { // not required
		return nil
	}

	if m.Identity != nil {
		if err := m.Identity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseDiscoveredKubernetesWorkload) validateReplicas(formats strfmt.Registry) error {
	if swag.IsZero(m.Replicas) { // not required
		return nil
	}

	for i := 0; i < len(m.Replicas); i++ {
		if swag.IsZero(m.Replicas[i]) { // not required
			continue
		}

		if m.Replicas[i] != nil {
			if err := m.Replicas[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this database discovered kubernetes workload based on the context it is used
func (m *DatabaseDiscoveredKubernetesWorkload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIdentity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReplicas(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseDiscoveredKubernetesWorkload) contextValidateIdentity(ctx context.Context, formats strfmt.Registry) error {

	if m.Identity != nil {

		if swag.IsZero(m.Identity) { // not required
			return nil
		}

		if err := m.Identity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identity")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseDiscoveredKubernetesWorkload) contextValidateReplicas(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Replicas); i++ {

		if m.Replicas[i] != nil {

			if swag.IsZero(m.Replicas[i]) { // not required
				return nil
			}

			if err := m.Replicas[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicas" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicas" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseDiscoveredKubernetesWorkload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseDiscoveredKubernetesWorkload) UnmarshalBinary(b []byte) error {
	var res DatabaseDiscoveredKubernetesWorkload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
