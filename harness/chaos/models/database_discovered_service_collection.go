// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabaseDiscoveredServiceCollection database discovered service collection
//
// swagger:model database.DiscoveredServiceCollection
type DatabaseDiscoveredServiceCollection struct {

	// agent ID
	// Required: true
	AgentID *string `json:"agentID"`

	// agent identity
	// Required: true
	AgentIdentity *string `json:"agentIdentity"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// removed
	Removed bool `json:"removed,omitempty"`

	// removed at
	RemovedAt string `json:"removedAt,omitempty"`

	// spec
	// Required: true
	Spec *DatabaseDiscoveredServiceSpec `json:"spec"`

	// type
	// Required: true
	Type *string `json:"type"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`

	// updated by
	UpdatedBy string `json:"updatedBy,omitempty"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this database discovered service collection
func (m *DatabaseDiscoveredServiceCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseDiscoveredServiceCollection) validateAgentID(formats strfmt.Registry) error {

	if err := validate.Required("agentID", "body", m.AgentID); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseDiscoveredServiceCollection) validateAgentIdentity(formats strfmt.Registry) error {

	if err := validate.Required("agentIdentity", "body", m.AgentIdentity); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseDiscoveredServiceCollection) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseDiscoveredServiceCollection) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseDiscoveredServiceCollection) validateSpec(formats strfmt.Registry) error {

	if err := validate.Required("spec", "body", m.Spec); err != nil {
		return err
	}

	if m.Spec != nil {
		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseDiscoveredServiceCollection) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseDiscoveredServiceCollection) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this database discovered service collection based on the context it is used
func (m *DatabaseDiscoveredServiceCollection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseDiscoveredServiceCollection) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.Spec != nil {

		if err := m.Spec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseDiscoveredServiceCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseDiscoveredServiceCollection) UnmarshalBinary(b []byte) error {
	var res DatabaseDiscoveredServiceCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
