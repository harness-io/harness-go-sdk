// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DatabaseDiscoveredServiceSpec database discovered service spec
//
// swagger:model database.DiscoveredServiceSpec
type DatabaseDiscoveredServiceSpec struct {

	// fqdn
	Fqdn []string `json:"fqdn"`

	// harness environment identity
	HarnessEnvironmentIdentity *DatabaseEnvironmentIdentity `json:"harnessEnvironmentIdentity,omitempty"`

	// harness service identity
	HarnessServiceIdentity *DatabaseServiceIdentity `json:"harnessServiceIdentity,omitempty"`

	// ip
	IP []string `json:"ip"`

	// kubernetes
	Kubernetes *DatabaseDiscoveredServiceKubernetesSpec `json:"kubernetes,omitempty"`

	// port
	Port []string `json:"port"`
}

// Validate validates this database discovered service spec
func (m *DatabaseDiscoveredServiceSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHarnessEnvironmentIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHarnessServiceIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseDiscoveredServiceSpec) validateHarnessEnvironmentIdentity(formats strfmt.Registry) error {
	if swag.IsZero(m.HarnessEnvironmentIdentity) { // not required
		return nil
	}

	if m.HarnessEnvironmentIdentity != nil {
		if err := m.HarnessEnvironmentIdentity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("harnessEnvironmentIdentity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("harnessEnvironmentIdentity")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseDiscoveredServiceSpec) validateHarnessServiceIdentity(formats strfmt.Registry) error {
	if swag.IsZero(m.HarnessServiceIdentity) { // not required
		return nil
	}

	if m.HarnessServiceIdentity != nil {
		if err := m.HarnessServiceIdentity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("harnessServiceIdentity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("harnessServiceIdentity")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseDiscoveredServiceSpec) validateKubernetes(formats strfmt.Registry) error {
	if swag.IsZero(m.Kubernetes) { // not required
		return nil
	}

	if m.Kubernetes != nil {
		if err := m.Kubernetes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this database discovered service spec based on the context it is used
func (m *DatabaseDiscoveredServiceSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHarnessEnvironmentIdentity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHarnessServiceIdentity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseDiscoveredServiceSpec) contextValidateHarnessEnvironmentIdentity(ctx context.Context, formats strfmt.Registry) error {

	if m.HarnessEnvironmentIdentity != nil {

		if swag.IsZero(m.HarnessEnvironmentIdentity) { // not required
			return nil
		}

		if err := m.HarnessEnvironmentIdentity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("harnessEnvironmentIdentity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("harnessEnvironmentIdentity")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseDiscoveredServiceSpec) contextValidateHarnessServiceIdentity(ctx context.Context, formats strfmt.Registry) error {

	if m.HarnessServiceIdentity != nil {

		if swag.IsZero(m.HarnessServiceIdentity) { // not required
			return nil
		}

		if err := m.HarnessServiceIdentity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("harnessServiceIdentity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("harnessServiceIdentity")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseDiscoveredServiceSpec) contextValidateKubernetes(ctx context.Context, formats strfmt.Registry) error {

	if m.Kubernetes != nil {

		if swag.IsZero(m.Kubernetes) { // not required
			return nil
		}

		if err := m.Kubernetes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseDiscoveredServiceSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseDiscoveredServiceSpec) UnmarshalBinary(b []byte) error {
	var res DatabaseDiscoveredServiceSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
