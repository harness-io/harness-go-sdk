// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DatabaseKubernetesAgentConfiguration database kubernetes agent configuration
//
// swagger:model database.KubernetesAgentConfiguration
type DatabaseKubernetesAgentConfiguration struct {

	// image pull policy
	ImagePullPolicy V1PullPolicy `json:"imagePullPolicy,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// namespaced
	Namespaced bool `json:"namespaced,omitempty"`

	// node selector
	NodeSelector map[string]string `json:"nodeSelector,omitempty"`

	// resources
	Resources *DatabaseResourceRequirements `json:"resources,omitempty"`

	// run as group
	RunAsGroup int64 `json:"runAsGroup,omitempty"`

	// run as user
	RunAsUser int64 `json:"runAsUser,omitempty"`

	// service account
	ServiceAccount string `json:"serviceAccount,omitempty"`

	// tolerations
	Tolerations []*V1Toleration `json:"tolerations"`
}

// Validate validates this database kubernetes agent configuration
func (m *DatabaseKubernetesAgentConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImagePullPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTolerations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseKubernetesAgentConfiguration) validateImagePullPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.ImagePullPolicy) { // not required
		return nil
	}

	if err := m.ImagePullPolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("imagePullPolicy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("imagePullPolicy")
		}
		return err
	}

	return nil
}

func (m *DatabaseKubernetesAgentConfiguration) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseKubernetesAgentConfiguration) validateTolerations(formats strfmt.Registry) error {
	if swag.IsZero(m.Tolerations) { // not required
		return nil
	}

	for i := 0; i < len(m.Tolerations); i++ {
		if swag.IsZero(m.Tolerations[i]) { // not required
			continue
		}

		if m.Tolerations[i] != nil {
			if err := m.Tolerations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tolerations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tolerations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this database kubernetes agent configuration based on the context it is used
func (m *DatabaseKubernetesAgentConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImagePullPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTolerations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseKubernetesAgentConfiguration) contextValidateImagePullPolicy(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ImagePullPolicy) { // not required
		return nil
	}

	if err := m.ImagePullPolicy.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("imagePullPolicy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("imagePullPolicy")
		}
		return err
	}

	return nil
}

func (m *DatabaseKubernetesAgentConfiguration) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	if m.Resources != nil {

		if swag.IsZero(m.Resources) { // not required
			return nil
		}

		if err := m.Resources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseKubernetesAgentConfiguration) contextValidateTolerations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tolerations); i++ {

		if m.Tolerations[i] != nil {

			if swag.IsZero(m.Tolerations[i]) { // not required
				return nil
			}

			if err := m.Tolerations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tolerations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tolerations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseKubernetesAgentConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseKubernetesAgentConfiguration) UnmarshalBinary(b []byte) error {
	var res DatabaseKubernetesAgentConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
