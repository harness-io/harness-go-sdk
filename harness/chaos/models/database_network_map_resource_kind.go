// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DatabaseNetworkMapResourceKind database network map resource kind
//
// swagger:model database.NetworkMapResourceKind
type DatabaseNetworkMapResourceKind string

func NewDatabaseNetworkMapResourceKind(value DatabaseNetworkMapResourceKind) *DatabaseNetworkMapResourceKind {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DatabaseNetworkMapResourceKind.
func (m DatabaseNetworkMapResourceKind) Pointer() *DatabaseNetworkMapResourceKind {
	return &m
}

const (

	// DatabaseNetworkMapResourceKindK8SCustomService captures enum value "K8SCustomService"
	DatabaseNetworkMapResourceKindK8SCustomService DatabaseNetworkMapResourceKind = "K8SCustomService"

	// DatabaseNetworkMapResourceKindDiscoveredservice captures enum value "discoveredservice"
	DatabaseNetworkMapResourceKindDiscoveredservice DatabaseNetworkMapResourceKind = "discoveredservice"
)

// for schema
var databaseNetworkMapResourceKindEnum []interface{}

func init() {
	var res []DatabaseNetworkMapResourceKind
	if err := json.Unmarshal([]byte(`["K8SCustomService","discoveredservice"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		databaseNetworkMapResourceKindEnum = append(databaseNetworkMapResourceKindEnum, v)
	}
}

func (m DatabaseNetworkMapResourceKind) validateDatabaseNetworkMapResourceKindEnum(path, location string, value DatabaseNetworkMapResourceKind) error {
	if err := validate.EnumCase(path, location, value, databaseNetworkMapResourceKindEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this database network map resource kind
func (m DatabaseNetworkMapResourceKind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDatabaseNetworkMapResourceKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this database network map resource kind based on context it is used
func (m DatabaseNetworkMapResourceKind) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
