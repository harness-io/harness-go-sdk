// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabaseServiceCollection database service collection
//
// swagger:model database.ServiceCollection
type DatabaseServiceCollection struct {

	// agent ID
	// Required: true
	AgentID *string `json:"agentID"`

	// annotations
	Annotations map[string]string `json:"annotations,omitempty"`

	// api version
	// Required: true
	APIVersion *string `json:"apiVersion"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// creation timestamp
	CreationTimestamp string `json:"creationTimestamp,omitempty"`

	// deletion timestamp
	DeletionTimestamp string `json:"deletionTimestamp,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// kind
	// Required: true
	Kind *string `json:"kind"`

	// labels
	Labels map[string]string `json:"labels,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// namespace
	// Required: true
	Namespace *string `json:"namespace"`

	// owner reference
	OwnerReference []*V1OwnerReference `json:"ownerReference"`

	// removed
	Removed bool `json:"removed,omitempty"`

	// removed at
	RemovedAt string `json:"removedAt,omitempty"`

	// resource version
	// Required: true
	ResourceVersion *string `json:"resourceVersion"`

	// spec
	// Required: true
	Spec *V1ServiceSpec `json:"spec"`

	// status
	Status *V1ServiceStatus `json:"status,omitempty"`

	// uid
	// Required: true
	UID *string `json:"uid"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`

	// updated by
	UpdatedBy string `json:"updatedBy,omitempty"`
}

// Validate validates this database service collection
func (m *DatabaseServiceCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAPIVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseServiceCollection) validateAgentID(formats strfmt.Registry) error {

	if err := validate.Required("agentID", "body", m.AgentID); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServiceCollection) validateAPIVersion(formats strfmt.Registry) error {

	if err := validate.Required("apiVersion", "body", m.APIVersion); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServiceCollection) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServiceCollection) validateKind(formats strfmt.Registry) error {

	if err := validate.Required("kind", "body", m.Kind); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServiceCollection) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServiceCollection) validateNamespace(formats strfmt.Registry) error {

	if err := validate.Required("namespace", "body", m.Namespace); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServiceCollection) validateOwnerReference(formats strfmt.Registry) error {
	if swag.IsZero(m.OwnerReference) { // not required
		return nil
	}

	for i := 0; i < len(m.OwnerReference); i++ {
		if swag.IsZero(m.OwnerReference[i]) { // not required
			continue
		}

		if m.OwnerReference[i] != nil {
			if err := m.OwnerReference[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ownerReference" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ownerReference" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DatabaseServiceCollection) validateResourceVersion(formats strfmt.Registry) error {

	if err := validate.Required("resourceVersion", "body", m.ResourceVersion); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServiceCollection) validateSpec(formats strfmt.Registry) error {

	if err := validate.Required("spec", "body", m.Spec); err != nil {
		return err
	}

	if m.Spec != nil {
		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseServiceCollection) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseServiceCollection) validateUID(formats strfmt.Registry) error {

	if err := validate.Required("uid", "body", m.UID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this database service collection based on the context it is used
func (m *DatabaseServiceCollection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOwnerReference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseServiceCollection) contextValidateOwnerReference(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OwnerReference); i++ {

		if m.OwnerReference[i] != nil {

			if swag.IsZero(m.OwnerReference[i]) { // not required
				return nil
			}

			if err := m.OwnerReference[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ownerReference" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ownerReference" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DatabaseServiceCollection) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.Spec != nil {

		if err := m.Spec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseServiceCollection) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {

		if swag.IsZero(m.Status) { // not required
			return nil
		}

		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseServiceCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseServiceCollection) UnmarshalBinary(b []byte) error {
	var res DatabaseServiceCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
