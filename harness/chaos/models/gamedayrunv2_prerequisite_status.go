// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Gamedayrunv2PrerequisiteStatus gamedayrunv2 prerequisite status
//
// swagger:model gamedayrunv2.PrerequisiteStatus
type Gamedayrunv2PrerequisiteStatus string

func NewGamedayrunv2PrerequisiteStatus(value Gamedayrunv2PrerequisiteStatus) *Gamedayrunv2PrerequisiteStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Gamedayrunv2PrerequisiteStatus.
func (m Gamedayrunv2PrerequisiteStatus) Pointer() *Gamedayrunv2PrerequisiteStatus {
	return &m
}

const (

	// Gamedayrunv2PrerequisiteStatusDone captures enum value "done"
	Gamedayrunv2PrerequisiteStatusDone Gamedayrunv2PrerequisiteStatus = "done"

	// Gamedayrunv2PrerequisiteStatusPending captures enum value "pending"
	Gamedayrunv2PrerequisiteStatusPending Gamedayrunv2PrerequisiteStatus = "pending"
)

// for schema
var gamedayrunv2PrerequisiteStatusEnum []interface{}

func init() {
	var res []Gamedayrunv2PrerequisiteStatus
	if err := json.Unmarshal([]byte(`["done","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gamedayrunv2PrerequisiteStatusEnum = append(gamedayrunv2PrerequisiteStatusEnum, v)
	}
}

func (m Gamedayrunv2PrerequisiteStatus) validateGamedayrunv2PrerequisiteStatusEnum(path, location string, value Gamedayrunv2PrerequisiteStatus) error {
	if err := validate.EnumCase(path, location, value, gamedayrunv2PrerequisiteStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this gamedayrunv2 prerequisite status
func (m Gamedayrunv2PrerequisiteStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGamedayrunv2PrerequisiteStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this gamedayrunv2 prerequisite status based on context it is used
func (m Gamedayrunv2PrerequisiteStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
