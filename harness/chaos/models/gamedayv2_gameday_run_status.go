// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Gamedayv2GamedayRunStatus gamedayv2 gameday run status
//
// swagger:model gamedayv2.GamedayRunStatus
type Gamedayv2GamedayRunStatus string

func NewGamedayv2GamedayRunStatus(value Gamedayv2GamedayRunStatus) *Gamedayv2GamedayRunStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Gamedayv2GamedayRunStatus.
func (m Gamedayv2GamedayRunStatus) Pointer() *Gamedayv2GamedayRunStatus {
	return &m
}

const (

	// Gamedayv2GamedayRunStatusAwaitingApproval captures enum value "awaiting_approval"
	Gamedayv2GamedayRunStatusAwaitingApproval Gamedayv2GamedayRunStatus = "awaiting_approval"

	// Gamedayv2GamedayRunStatusPreparingPrerequisites captures enum value "preparing_prerequisites"
	Gamedayv2GamedayRunStatusPreparingPrerequisites Gamedayv2GamedayRunStatus = "preparing_prerequisites"

	// Gamedayv2GamedayRunStatusRunningExperiments captures enum value "running_experiments"
	Gamedayv2GamedayRunStatusRunningExperiments Gamedayv2GamedayRunStatus = "running_experiments"

	// Gamedayv2GamedayRunStatusPostMortem captures enum value "post_mortem"
	Gamedayv2GamedayRunStatusPostMortem Gamedayv2GamedayRunStatus = "post_mortem"

	// Gamedayv2GamedayRunStatusTerminated captures enum value "terminated"
	Gamedayv2GamedayRunStatusTerminated Gamedayv2GamedayRunStatus = "terminated"

	// Gamedayv2GamedayRunStatusCompleted captures enum value "completed"
	Gamedayv2GamedayRunStatusCompleted Gamedayv2GamedayRunStatus = "completed"
)

// for schema
var gamedayv2GamedayRunStatusEnum []interface{}

func init() {
	var res []Gamedayv2GamedayRunStatus
	if err := json.Unmarshal([]byte(`["awaiting_approval","preparing_prerequisites","running_experiments","post_mortem","terminated","completed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gamedayv2GamedayRunStatusEnum = append(gamedayv2GamedayRunStatusEnum, v)
	}
}

func (m Gamedayv2GamedayRunStatus) validateGamedayv2GamedayRunStatusEnum(path, location string, value Gamedayv2GamedayRunStatus) error {
	if err := validate.EnumCase(path, location, value, gamedayv2GamedayRunStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this gamedayv2 gameday run status
func (m Gamedayv2GamedayRunStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGamedayv2GamedayRunStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this gamedayv2 gameday run status based on context it is used
func (m Gamedayv2GamedayRunStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
