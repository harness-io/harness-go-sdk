// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Gamedayv2StakeHolderRole gamedayv2 stake holder role
//
// swagger:model gamedayv2.StakeHolderRole
type Gamedayv2StakeHolderRole string

func NewGamedayv2StakeHolderRole(value Gamedayv2StakeHolderRole) *Gamedayv2StakeHolderRole {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Gamedayv2StakeHolderRole.
func (m Gamedayv2StakeHolderRole) Pointer() *Gamedayv2StakeHolderRole {
	return &m
}

const (

	// Gamedayv2StakeHolderRoleCoordinator captures enum value "coordinator"
	Gamedayv2StakeHolderRoleCoordinator Gamedayv2StakeHolderRole = "coordinator"

	// Gamedayv2StakeHolderRoleTriageEngineer captures enum value "triage_engineer"
	Gamedayv2StakeHolderRoleTriageEngineer Gamedayv2StakeHolderRole = "triage_engineer"

	// Gamedayv2StakeHolderRoleAttendee captures enum value "attendee"
	Gamedayv2StakeHolderRoleAttendee Gamedayv2StakeHolderRole = "attendee"

	// Gamedayv2StakeHolderRoleOthers captures enum value "others"
	Gamedayv2StakeHolderRoleOthers Gamedayv2StakeHolderRole = "others"
)

// for schema
var gamedayv2StakeHolderRoleEnum []interface{}

func init() {
	var res []Gamedayv2StakeHolderRole
	if err := json.Unmarshal([]byte(`["coordinator","triage_engineer","attendee","others"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gamedayv2StakeHolderRoleEnum = append(gamedayv2StakeHolderRoleEnum, v)
	}
}

func (m Gamedayv2StakeHolderRole) validateGamedayv2StakeHolderRoleEnum(path, location string, value Gamedayv2StakeHolderRole) error {
	if err := validate.EnumCase(path, location, value, gamedayv2StakeHolderRoleEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this gamedayv2 stake holder role
func (m Gamedayv2StakeHolderRole) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGamedayv2StakeHolderRoleEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this gamedayv2 stake holder role based on context it is used
func (m Gamedayv2StakeHolderRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
