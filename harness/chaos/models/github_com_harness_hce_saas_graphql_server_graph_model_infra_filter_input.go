// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GithubComHarnessHceSaasGraphqlServerGraphModelInfraFilterInput github com harness hce saas graphql server graph model infra filter input
//
// swagger:model github_com_harness_hce-saas_graphql_server_graph_model.InfraFilterInput
type GithubComHarnessHceSaasGraphqlServerGraphModelInfraFilterInput struct {

	// To filter out infras that are compatible with the new experiment manifest format: without experiment CRs
	CompatibleWithNewExp bool `json:"compatibleWithNewExp,omitempty"`

	// ID of the infra
	Description string `json:"description,omitempty"`

	// ID of the infra
	InfraID string `json:"infraID,omitempty"`

	// Scope of infra
	InfraScope struct {
		ModelInfraScope
	} `json:"infraScope,omitempty"`

	// Status of infra
	IsActive bool `json:"isActive,omitempty"`

	// Name of the infra
	Name string `json:"name,omitempty"`

	// Platform name of infra
	PlatformName string `json:"platformName,omitempty"`

	// Tags of an infra
	Tags []string `json:"tags"`
}

// Validate validates this github com harness hce saas graphql server graph model infra filter input
func (m *GithubComHarnessHceSaasGraphqlServerGraphModelInfraFilterInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInfraScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComHarnessHceSaasGraphqlServerGraphModelInfraFilterInput) validateInfraScope(formats strfmt.Registry) error {
	if swag.IsZero(m.InfraScope) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this github com harness hce saas graphql server graph model infra filter input based on the context it is used
func (m *GithubComHarnessHceSaasGraphqlServerGraphModelInfraFilterInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInfraScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GithubComHarnessHceSaasGraphqlServerGraphModelInfraFilterInput) contextValidateInfraScope(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *GithubComHarnessHceSaasGraphqlServerGraphModelInfraFilterInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GithubComHarnessHceSaasGraphqlServerGraphModelInfraFilterInput) UnmarshalBinary(b []byte) error {
	var res GithubComHarnessHceSaasGraphqlServerGraphModelInfraFilterInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
