// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InfraV2InfraScope infra v2 infra scope
//
// swagger:model infra_v2.InfraScope
type InfraV2InfraScope string

func NewInfraV2InfraScope(value InfraV2InfraScope) *InfraV2InfraScope {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InfraV2InfraScope.
func (m InfraV2InfraScope) Pointer() *InfraV2InfraScope {
	return &m
}

const (

	// InfraV2InfraScopeNAMESPACE captures enum value "NAMESPACE"
	InfraV2InfraScopeNAMESPACE InfraV2InfraScope = "NAMESPACE"

	// InfraV2InfraScopeCLUSTER captures enum value "CLUSTER"
	InfraV2InfraScopeCLUSTER InfraV2InfraScope = "CLUSTER"
)

// for schema
var infraV2InfraScopeEnum []interface{}

func init() {
	var res []InfraV2InfraScope
	if err := json.Unmarshal([]byte(`["NAMESPACE","CLUSTER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		infraV2InfraScopeEnum = append(infraV2InfraScopeEnum, v)
	}
}

func (m InfraV2InfraScope) validateInfraV2InfraScopeEnum(path, location string, value InfraV2InfraScope) error {
	if err := validate.EnumCase(path, location, value, infraV2InfraScopeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this infra v2 infra scope
func (m InfraV2InfraScope) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInfraV2InfraScopeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this infra v2 infra scope based on context it is used
func (m InfraV2InfraScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
