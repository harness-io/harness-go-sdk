// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InfraV2InfraStatus infra v2 infra status
//
// swagger:model infra_v2.InfraStatus
type InfraV2InfraStatus string

func NewInfraV2InfraStatus(value InfraV2InfraStatus) *InfraV2InfraStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InfraV2InfraStatus.
func (m InfraV2InfraStatus) Pointer() *InfraV2InfraStatus {
	return &m
}

const (

	// InfraV2InfraStatusACTIVE captures enum value "ACTIVE"
	InfraV2InfraStatusACTIVE InfraV2InfraStatus = "ACTIVE"

	// InfraV2InfraStatusINACTIVE captures enum value "INACTIVE"
	InfraV2InfraStatusINACTIVE InfraV2InfraStatus = "INACTIVE"

	// InfraV2InfraStatusPENDING captures enum value "PENDING"
	InfraV2InfraStatusPENDING InfraV2InfraStatus = "PENDING"

	// InfraV2InfraStatusUPGRADING captures enum value "UPGRADING"
	InfraV2InfraStatusUPGRADING InfraV2InfraStatus = "UPGRADING"

	// InfraV2InfraStatusUPGRADEREQUIRED captures enum value "UPGRADE_REQUIRED"
	InfraV2InfraStatusUPGRADEREQUIRED InfraV2InfraStatus = "UPGRADE_REQUIRED"
)

// for schema
var infraV2InfraStatusEnum []interface{}

func init() {
	var res []InfraV2InfraStatus
	if err := json.Unmarshal([]byte(`["ACTIVE","INACTIVE","PENDING","UPGRADING","UPGRADE_REQUIRED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		infraV2InfraStatusEnum = append(infraV2InfraStatusEnum, v)
	}
}

func (m InfraV2InfraStatus) validateInfraV2InfraStatusEnum(path, location string, value InfraV2InfraStatus) error {
	if err := validate.EnumCase(path, location, value, infraV2InfraStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this infra v2 infra status
func (m InfraV2InfraStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInfraV2InfraStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this infra v2 infra status based on context it is used
func (m InfraV2InfraStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
