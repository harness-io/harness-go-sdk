// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InfraV2InfraType infra v2 infra type
//
// swagger:model infra_v2.InfraType
type InfraV2InfraType string

func NewInfraV2InfraType(value InfraV2InfraType) *InfraV2InfraType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InfraV2InfraType.
func (m InfraV2InfraType) Pointer() *InfraV2InfraType {
	return &m
}

const (

	// InfraV2InfraTypeKUBERNETES captures enum value "KUBERNETES"
	InfraV2InfraTypeKUBERNETES InfraV2InfraType = "KUBERNETES"

	// InfraV2InfraTypeKUBERNETESV2 captures enum value "KUBERNETESV2"
	InfraV2InfraTypeKUBERNETESV2 InfraV2InfraType = "KUBERNETESV2"
)

// for schema
var infraV2InfraTypeEnum []interface{}

func init() {
	var res []InfraV2InfraType
	if err := json.Unmarshal([]byte(`["KUBERNETES","KUBERNETESV2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		infraV2InfraTypeEnum = append(infraV2InfraTypeEnum, v)
	}
}

func (m InfraV2InfraType) validateInfraV2InfraTypeEnum(path, location string, value InfraV2InfraType) error {
	if err := validate.EnumCase(path, location, value, infraV2InfraTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this infra v2 infra type
func (m InfraV2InfraType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInfraV2InfraTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this infra v2 infra type based on context it is used
func (m InfraV2InfraType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
