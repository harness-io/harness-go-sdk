// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InfraV2InfraTypeFilter infra v2 infra type filter
//
// swagger:model infra_v2.InfraTypeFilter
type InfraV2InfraTypeFilter string

func NewInfraV2InfraTypeFilter(value InfraV2InfraTypeFilter) *InfraV2InfraTypeFilter {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InfraV2InfraTypeFilter.
func (m InfraV2InfraTypeFilter) Pointer() *InfraV2InfraTypeFilter {
	return &m
}

const (

	// InfraV2InfraTypeFilterKUBERNETES captures enum value "KUBERNETES"
	InfraV2InfraTypeFilterKUBERNETES InfraV2InfraTypeFilter = "KUBERNETES"

	// InfraV2InfraTypeFilterKUBERNETESV2 captures enum value "KUBERNETESV2"
	InfraV2InfraTypeFilterKUBERNETESV2 InfraV2InfraTypeFilter = "KUBERNETESV2"

	// InfraV2InfraTypeFilterALL captures enum value "ALL"
	InfraV2InfraTypeFilterALL InfraV2InfraTypeFilter = "ALL"
)

// for schema
var infraV2InfraTypeFilterEnum []interface{}

func init() {
	var res []InfraV2InfraTypeFilter
	if err := json.Unmarshal([]byte(`["KUBERNETES","KUBERNETESV2","ALL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		infraV2InfraTypeFilterEnum = append(infraV2InfraTypeFilterEnum, v)
	}
}

func (m InfraV2InfraTypeFilter) validateInfraV2InfraTypeFilterEnum(path, location string, value InfraV2InfraTypeFilter) error {
	if err := validate.EnumCase(path, location, value, infraV2InfraTypeFilterEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this infra v2 infra type filter
func (m InfraV2InfraTypeFilter) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInfraV2InfraTypeFilterEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this infra v2 infra type filter based on context it is used
func (m InfraV2InfraTypeFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
