// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InfraV2InstallationType infra v2 installation type
//
// swagger:model infra_v2.InstallationType
type InfraV2InstallationType string

func NewInfraV2InstallationType(value InfraV2InstallationType) *InfraV2InstallationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InfraV2InstallationType.
func (m InfraV2InstallationType) Pointer() *InfraV2InstallationType {
	return &m
}

const (

	// InfraV2InstallationTypeCONNECTOR captures enum value "CONNECTOR"
	InfraV2InstallationTypeCONNECTOR InfraV2InstallationType = "CONNECTOR"

	// InfraV2InstallationTypeMANIFEST captures enum value "MANIFEST"
	InfraV2InstallationTypeMANIFEST InfraV2InstallationType = "MANIFEST"

	// InfraV2InstallationTypeCONNECTORV2 captures enum value "CONNECTOR_V2"
	InfraV2InstallationTypeCONNECTORV2 InfraV2InstallationType = "CONNECTOR_V2"
)

// for schema
var infraV2InstallationTypeEnum []interface{}

func init() {
	var res []InfraV2InstallationType
	if err := json.Unmarshal([]byte(`["CONNECTOR","MANIFEST","CONNECTOR_V2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		infraV2InstallationTypeEnum = append(infraV2InstallationTypeEnum, v)
	}
}

func (m InfraV2InstallationType) validateInfraV2InstallationTypeEnum(path, location string, value InfraV2InstallationType) error {
	if err := validate.EnumCase(path, location, value, infraV2InstallationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this infra v2 installation type
func (m InfraV2InstallationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInfraV2InstallationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this infra v2 installation type based on context it is used
func (m InfraV2InstallationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
