// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InfraV2KubernetesInfraV2FilterInput infra v2 kubernetes infra v2 filter input
//
// swagger:model infra_v2.KubernetesInfraV2FilterInput
type InfraV2KubernetesInfraV2FilterInput struct {

	// infra scope
	InfraScope InfraV2InfraScope `json:"infraScope,omitempty"`

	// infra type filter
	InfraTypeFilter InfraV2InfraTypeFilter `json:"infraTypeFilter,omitempty"`

	// tags
	Tags []string `json:"tags"`
}

// Validate validates this infra v2 kubernetes infra v2 filter input
func (m *InfraV2KubernetesInfraV2FilterInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInfraScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfraTypeFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraV2KubernetesInfraV2FilterInput) validateInfraScope(formats strfmt.Registry) error {
	if swag.IsZero(m.InfraScope) { // not required
		return nil
	}

	if err := m.InfraScope.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraScope")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraScope")
		}
		return err
	}

	return nil
}

func (m *InfraV2KubernetesInfraV2FilterInput) validateInfraTypeFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.InfraTypeFilter) { // not required
		return nil
	}

	if err := m.InfraTypeFilter.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraTypeFilter")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraTypeFilter")
		}
		return err
	}

	return nil
}

// ContextValidate validate this infra v2 kubernetes infra v2 filter input based on the context it is used
func (m *InfraV2KubernetesInfraV2FilterInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInfraScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInfraTypeFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraV2KubernetesInfraV2FilterInput) contextValidateInfraScope(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.InfraScope) { // not required
		return nil
	}

	if err := m.InfraScope.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraScope")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraScope")
		}
		return err
	}

	return nil
}

func (m *InfraV2KubernetesInfraV2FilterInput) contextValidateInfraTypeFilter(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.InfraTypeFilter) { // not required
		return nil
	}

	if err := m.InfraTypeFilter.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraTypeFilter")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraTypeFilter")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfraV2KubernetesInfraV2FilterInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfraV2KubernetesInfraV2FilterInput) UnmarshalBinary(b []byte) error {
	var res InfraV2KubernetesInfraV2FilterInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
