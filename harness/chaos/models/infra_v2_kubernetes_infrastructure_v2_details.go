// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InfraV2KubernetesInfrastructureV2Details infra v2 kubernetes infrastructure v2 details
//
// swagger:model infra_v2.KubernetesInfrastructureV2Details
type InfraV2KubernetesInfrastructureV2Details struct {

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// created by
	CreatedBy *InfraV2UserDetails `json:"createdBy,omitempty"`

	// deployment type
	DeploymentType string `json:"deploymentType,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// discovery agent ID
	DiscoveryAgentID string `json:"discoveryAgentID,omitempty"`

	// environment ID
	EnvironmentID string `json:"environmentID,omitempty"`

	// harness infra type
	HarnessInfraType string `json:"harnessInfraType,omitempty"`

	// identifier
	Identifier *InfraV2Identifiers `json:"identifier,omitempty"`

	// identity
	Identity string `json:"identity,omitempty"`

	// infra ID
	InfraID string `json:"infraID,omitempty"`

	// infra namespace
	InfraNamespace string `json:"infraNamespace,omitempty"`

	// infra scope
	InfraScope InfraV2InfraScope `json:"infraScope,omitempty"`

	// infra type
	InfraType InfraV2InfraType `json:"infraType,omitempty"`

	// insecure skip verify
	InsecureSkipVerify bool `json:"insecureSkipVerify,omitempty"`

	// installation type
	InstallationType InfraV2InstallationType `json:"installationType,omitempty"`

	// is chaos enabled
	IsChaosEnabled bool `json:"isChaosEnabled,omitempty"`

	// k8s connector ID
	K8sConnectorID string `json:"k8sConnectorID,omitempty"`

	// last heartbeat
	LastHeartbeat int64 `json:"lastHeartbeat,omitempty"`

	// last workflow timestamp
	LastWorkflowTimestamp string `json:"lastWorkflowTimestamp,omitempty"`

	// mtls
	Mtls *InfraV2MTLSConfiguration `json:"mtls,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// no of schedules
	NoOfSchedules int64 `json:"noOfSchedules,omitempty"`

	// no of workflows
	NoOfWorkflows int64 `json:"noOfWorkflows,omitempty"`

	// node selector
	NodeSelector map[string]string `json:"nodeSelector,omitempty"`

	// platform name
	PlatformName string `json:"platformName,omitempty"`

	// proxy
	Proxy *InfraV2ProxyConfiguration `json:"proxy,omitempty"`

	// run as group
	RunAsGroup int64 `json:"runAsGroup,omitempty"`

	// run as user
	RunAsUser int64 `json:"runAsUser,omitempty"`

	// service account
	ServiceAccount string `json:"serviceAccount,omitempty"`

	// status
	Status InfraV2InfraStatus `json:"status,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// tolerations
	Tolerations []*V1Toleration `json:"tolerations"`

	// update status
	UpdateStatus InfraV2UpdateStatus `json:"updateStatus,omitempty"`

	// updated at
	UpdatedAt string `json:"updatedAt,omitempty"`

	// updated by
	UpdatedBy *InfraV2UserDetails `json:"updatedBy,omitempty"`

	// upgrade
	Upgrade *InfraV2Upgrade `json:"upgrade,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this infra v2 kubernetes infrastructure v2 details
func (m *InfraV2KubernetesInfrastructureV2Details) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfraScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfraType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstallationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTolerations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) validateIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.Identifier) { // not required
		return nil
	}

	if m.Identifier != nil {
		if err := m.Identifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identifier")
			}
			return err
		}
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) validateInfraScope(formats strfmt.Registry) error {
	if swag.IsZero(m.InfraScope) { // not required
		return nil
	}

	if err := m.InfraScope.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraScope")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraScope")
		}
		return err
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) validateInfraType(formats strfmt.Registry) error {
	if swag.IsZero(m.InfraType) { // not required
		return nil
	}

	if err := m.InfraType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraType")
		}
		return err
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) validateInstallationType(formats strfmt.Registry) error {
	if swag.IsZero(m.InstallationType) { // not required
		return nil
	}

	if err := m.InstallationType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("installationType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("installationType")
		}
		return err
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) validateMtls(formats strfmt.Registry) error {
	if swag.IsZero(m.Mtls) { // not required
		return nil
	}

	if m.Mtls != nil {
		if err := m.Mtls.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mtls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mtls")
			}
			return err
		}
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) validateProxy(formats strfmt.Registry) error {
	if swag.IsZero(m.Proxy) { // not required
		return nil
	}

	if m.Proxy != nil {
		if err := m.Proxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxy")
			}
			return err
		}
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) validateTolerations(formats strfmt.Registry) error {
	if swag.IsZero(m.Tolerations) { // not required
		return nil
	}

	for i := 0; i < len(m.Tolerations); i++ {
		if swag.IsZero(m.Tolerations[i]) { // not required
			continue
		}

		if m.Tolerations[i] != nil {
			if err := m.Tolerations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tolerations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tolerations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) validateUpdateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdateStatus) { // not required
		return nil
	}

	if err := m.UpdateStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updateStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("updateStatus")
		}
		return err
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) validateUpdatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedBy) { // not required
		return nil
	}

	if m.UpdatedBy != nil {
		if err := m.UpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatedBy")
			}
			return err
		}
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) validateUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(m.Upgrade) { // not required
		return nil
	}

	if m.Upgrade != nil {
		if err := m.Upgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this infra v2 kubernetes infrastructure v2 details based on the context it is used
func (m *InfraV2KubernetesInfrastructureV2Details) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInfraScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInfraType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstallationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMtls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTolerations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {

		if swag.IsZero(m.CreatedBy) { // not required
			return nil
		}

		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) contextValidateIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if m.Identifier != nil {

		if swag.IsZero(m.Identifier) { // not required
			return nil
		}

		if err := m.Identifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("identifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("identifier")
			}
			return err
		}
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) contextValidateInfraScope(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.InfraScope) { // not required
		return nil
	}

	if err := m.InfraScope.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraScope")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraScope")
		}
		return err
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) contextValidateInfraType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.InfraType) { // not required
		return nil
	}

	if err := m.InfraType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraType")
		}
		return err
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) contextValidateInstallationType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.InstallationType) { // not required
		return nil
	}

	if err := m.InstallationType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("installationType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("installationType")
		}
		return err
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) contextValidateMtls(ctx context.Context, formats strfmt.Registry) error {

	if m.Mtls != nil {

		if swag.IsZero(m.Mtls) { // not required
			return nil
		}

		if err := m.Mtls.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mtls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mtls")
			}
			return err
		}
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) contextValidateProxy(ctx context.Context, formats strfmt.Registry) error {

	if m.Proxy != nil {

		if swag.IsZero(m.Proxy) { // not required
			return nil
		}

		if err := m.Proxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxy")
			}
			return err
		}
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) contextValidateTolerations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tolerations); i++ {

		if m.Tolerations[i] != nil {

			if swag.IsZero(m.Tolerations[i]) { // not required
				return nil
			}

			if err := m.Tolerations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tolerations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tolerations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) contextValidateUpdateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.UpdateStatus) { // not required
		return nil
	}

	if err := m.UpdateStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updateStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("updateStatus")
		}
		return err
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) contextValidateUpdatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.UpdatedBy != nil {

		if swag.IsZero(m.UpdatedBy) { // not required
			return nil
		}

		if err := m.UpdatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updatedBy")
			}
			return err
		}
	}

	return nil
}

func (m *InfraV2KubernetesInfrastructureV2Details) contextValidateUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if m.Upgrade != nil {

		if swag.IsZero(m.Upgrade) { // not required
			return nil
		}

		if err := m.Upgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfraV2KubernetesInfrastructureV2Details) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfraV2KubernetesInfrastructureV2Details) UnmarshalBinary(b []byte) error {
	var res InfraV2KubernetesInfrastructureV2Details
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
