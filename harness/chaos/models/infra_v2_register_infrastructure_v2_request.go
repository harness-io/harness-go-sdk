// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InfraV2RegisterInfrastructureV2Request infra v2 register infrastructure v2 request
//
// swagger:model infra_v2.RegisterInfrastructureV2Request
type InfraV2RegisterInfrastructureV2Request struct {

	// annotation
	Annotation map[string]string `json:"annotation,omitempty"`

	// correlation Id
	CorrelationID string `json:"correlationId,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// discovery agent ID
	DiscoveryAgentID string `json:"discoveryAgentID,omitempty"`

	// env
	Env []*V1EnvVar `json:"env"`

	// env from
	EnvFrom []*V1EnvFromSource `json:"envFrom"`

	// environment ID
	EnvironmentID string `json:"environmentID,omitempty"`

	// identity
	Identity string `json:"identity,omitempty"`

	// infra ID
	InfraID string `json:"infraID,omitempty"`

	// infra namespace
	InfraNamespace string `json:"infraNamespace,omitempty"`

	// infra scope
	InfraScope InfraV2InfraScope `json:"infraScope,omitempty"`

	// infra type
	InfraType InfraV2InfraType `json:"infraType,omitempty"`

	// init containers
	InitContainers string `json:"initContainers,omitempty"`

	// insecure skip verify
	InsecureSkipVerify bool `json:"insecureSkipVerify,omitempty"`

	// k8s connector ID
	K8sConnectorID string `json:"k8sConnectorID,omitempty"`

	// label
	Label map[string]string `json:"label,omitempty"`

	// mtls
	Mtls *InfraV2MTLSConfiguration `json:"mtls,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// node selector
	NodeSelector map[string]string `json:"nodeSelector,omitempty"`

	// proxy
	Proxy *InfraV2ProxyConfiguration `json:"proxy,omitempty"`

	// run as group
	RunAsGroup int64 `json:"runAsGroup,omitempty"`

	// run as user
	RunAsUser int64 `json:"runAsUser,omitempty"`

	// service account
	ServiceAccount string `json:"serviceAccount,omitempty"`

	// sidecar containers
	SidecarContainers string `json:"sidecarContainers,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// tolerations
	Tolerations []*V1Toleration `json:"tolerations"`

	// volume mounts
	VolumeMounts []*V1VolumeMount `json:"volumeMounts"`

	// volumes
	Volumes []*V1Volume `json:"volumes"`
}

// Validate validates this infra v2 register infrastructure v2 request
func (m *InfraV2RegisterInfrastructureV2Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnv(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfraScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfraType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTolerations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeMounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) validateEnv(formats strfmt.Registry) error {
	if swag.IsZero(m.Env) { // not required
		return nil
	}

	for i := 0; i < len(m.Env); i++ {
		if swag.IsZero(m.Env[i]) { // not required
			continue
		}

		if m.Env[i] != nil {
			if err := m.Env[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("env" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("env" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) validateEnvFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvFrom) { // not required
		return nil
	}

	for i := 0; i < len(m.EnvFrom); i++ {
		if swag.IsZero(m.EnvFrom[i]) { // not required
			continue
		}

		if m.EnvFrom[i] != nil {
			if err := m.EnvFrom[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("envFrom" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("envFrom" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) validateInfraScope(formats strfmt.Registry) error {
	if swag.IsZero(m.InfraScope) { // not required
		return nil
	}

	if err := m.InfraScope.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraScope")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraScope")
		}
		return err
	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) validateInfraType(formats strfmt.Registry) error {
	if swag.IsZero(m.InfraType) { // not required
		return nil
	}

	if err := m.InfraType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraType")
		}
		return err
	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) validateMtls(formats strfmt.Registry) error {
	if swag.IsZero(m.Mtls) { // not required
		return nil
	}

	if m.Mtls != nil {
		if err := m.Mtls.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mtls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mtls")
			}
			return err
		}
	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) validateProxy(formats strfmt.Registry) error {
	if swag.IsZero(m.Proxy) { // not required
		return nil
	}

	if m.Proxy != nil {
		if err := m.Proxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxy")
			}
			return err
		}
	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) validateTolerations(formats strfmt.Registry) error {
	if swag.IsZero(m.Tolerations) { // not required
		return nil
	}

	for i := 0; i < len(m.Tolerations); i++ {
		if swag.IsZero(m.Tolerations[i]) { // not required
			continue
		}

		if m.Tolerations[i] != nil {
			if err := m.Tolerations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tolerations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tolerations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) validateVolumeMounts(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeMounts) { // not required
		return nil
	}

	for i := 0; i < len(m.VolumeMounts); i++ {
		if swag.IsZero(m.VolumeMounts[i]) { // not required
			continue
		}

		if m.VolumeMounts[i] != nil {
			if err := m.VolumeMounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeMounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeMounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) validateVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.Volumes) { // not required
		return nil
	}

	for i := 0; i < len(m.Volumes); i++ {
		if swag.IsZero(m.Volumes[i]) { // not required
			continue
		}

		if m.Volumes[i] != nil {
			if err := m.Volumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this infra v2 register infrastructure v2 request based on the context it is used
func (m *InfraV2RegisterInfrastructureV2Request) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnv(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEnvFrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInfraScope(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInfraType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMtls(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProxy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTolerations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumeMounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) contextValidateEnv(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Env); i++ {

		if m.Env[i] != nil {

			if swag.IsZero(m.Env[i]) { // not required
				return nil
			}

			if err := m.Env[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("env" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("env" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) contextValidateEnvFrom(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EnvFrom); i++ {

		if m.EnvFrom[i] != nil {

			if swag.IsZero(m.EnvFrom[i]) { // not required
				return nil
			}

			if err := m.EnvFrom[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("envFrom" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("envFrom" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) contextValidateInfraScope(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.InfraScope) { // not required
		return nil
	}

	if err := m.InfraScope.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraScope")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraScope")
		}
		return err
	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) contextValidateInfraType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.InfraType) { // not required
		return nil
	}

	if err := m.InfraType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraType")
		}
		return err
	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) contextValidateMtls(ctx context.Context, formats strfmt.Registry) error {

	if m.Mtls != nil {

		if swag.IsZero(m.Mtls) { // not required
			return nil
		}

		if err := m.Mtls.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mtls")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mtls")
			}
			return err
		}
	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) contextValidateProxy(ctx context.Context, formats strfmt.Registry) error {

	if m.Proxy != nil {

		if swag.IsZero(m.Proxy) { // not required
			return nil
		}

		if err := m.Proxy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proxy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proxy")
			}
			return err
		}
	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) contextValidateTolerations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tolerations); i++ {

		if m.Tolerations[i] != nil {

			if swag.IsZero(m.Tolerations[i]) { // not required
				return nil
			}

			if err := m.Tolerations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tolerations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tolerations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) contextValidateVolumeMounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.VolumeMounts); i++ {

		if m.VolumeMounts[i] != nil {

			if swag.IsZero(m.VolumeMounts[i]) { // not required
				return nil
			}

			if err := m.VolumeMounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumeMounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumeMounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraV2RegisterInfrastructureV2Request) contextValidateVolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Volumes); i++ {

		if m.Volumes[i] != nil {

			if swag.IsZero(m.Volumes[i]) { // not required
				return nil
			}

			if err := m.Volumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfraV2RegisterInfrastructureV2Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfraV2RegisterInfrastructureV2Request) UnmarshalBinary(b []byte) error {
	var res InfraV2RegisterInfrastructureV2Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
