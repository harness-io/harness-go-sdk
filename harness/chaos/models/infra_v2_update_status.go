// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InfraV2UpdateStatus infra v2 update status
//
// swagger:model infra_v2.UpdateStatus
type InfraV2UpdateStatus string

func NewInfraV2UpdateStatus(value InfraV2UpdateStatus) *InfraV2UpdateStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InfraV2UpdateStatus.
func (m InfraV2UpdateStatus) Pointer() *InfraV2UpdateStatus {
	return &m
}

const (

	// InfraV2UpdateStatusAVAILABLE captures enum value "AVAILABLE"
	InfraV2UpdateStatusAVAILABLE InfraV2UpdateStatus = "AVAILABLE"

	// InfraV2UpdateStatusMANDATORY captures enum value "MANDATORY"
	InfraV2UpdateStatusMANDATORY InfraV2UpdateStatus = "MANDATORY"

	// InfraV2UpdateStatusNOTREQUIRED captures enum value "NOT_REQUIRED"
	InfraV2UpdateStatusNOTREQUIRED InfraV2UpdateStatus = "NOT_REQUIRED"
)

// for schema
var infraV2UpdateStatusEnum []interface{}

func init() {
	var res []InfraV2UpdateStatus
	if err := json.Unmarshal([]byte(`["AVAILABLE","MANDATORY","NOT_REQUIRED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		infraV2UpdateStatusEnum = append(infraV2UpdateStatusEnum, v)
	}
}

func (m InfraV2UpdateStatus) validateInfraV2UpdateStatusEnum(path, location string, value InfraV2UpdateStatus) error {
	if err := validate.EnumCase(path, location, value, infraV2UpdateStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this infra v2 update status
func (m InfraV2UpdateStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInfraV2UpdateStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this infra v2 update status based on context it is used
func (m InfraV2UpdateStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
