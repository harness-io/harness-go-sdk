// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InfraV2UpgradeStatus infra v2 upgrade status
//
// swagger:model infra_v2.UpgradeStatus
type InfraV2UpgradeStatus string

func NewInfraV2UpgradeStatus(value InfraV2UpgradeStatus) *InfraV2UpgradeStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InfraV2UpgradeStatus.
func (m InfraV2UpgradeStatus) Pointer() *InfraV2UpgradeStatus {
	return &m
}

const (

	// InfraV2UpgradeStatusUPGRADINGINFRA captures enum value "UPGRADING_INFRA"
	InfraV2UpgradeStatusUPGRADINGINFRA InfraV2UpgradeStatus = "UPGRADING_INFRA"

	// InfraV2UpgradeStatusUPGRADESKIPPED captures enum value "UPGRADE_SKIPPED"
	InfraV2UpgradeStatusUPGRADESKIPPED InfraV2UpgradeStatus = "UPGRADE_SKIPPED"

	// InfraV2UpgradeStatusUPGRADESUCCESSFUL captures enum value "UPGRADE_SUCCESSFUL"
	InfraV2UpgradeStatusUPGRADESUCCESSFUL InfraV2UpgradeStatus = "UPGRADE_SUCCESSFUL"

	// InfraV2UpgradeStatusUPGRADEFAILED captures enum value "UPGRADE_FAILED"
	InfraV2UpgradeStatusUPGRADEFAILED InfraV2UpgradeStatus = "UPGRADE_FAILED"

	// InfraV2UpgradeStatusDETECTINGUPGRADER captures enum value "DETECTING_UPGRADER"
	InfraV2UpgradeStatusDETECTINGUPGRADER InfraV2UpgradeStatus = "DETECTING_UPGRADER"

	// InfraV2UpgradeStatusUPGRADERDISABLED captures enum value "UPGRADER_DISABLED"
	InfraV2UpgradeStatusUPGRADERDISABLED InfraV2UpgradeStatus = "UPGRADER_DISABLED"
)

// for schema
var infraV2UpgradeStatusEnum []interface{}

func init() {
	var res []InfraV2UpgradeStatus
	if err := json.Unmarshal([]byte(`["UPGRADING_INFRA","UPGRADE_SKIPPED","UPGRADE_SUCCESSFUL","UPGRADE_FAILED","DETECTING_UPGRADER","UPGRADER_DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		infraV2UpgradeStatusEnum = append(infraV2UpgradeStatusEnum, v)
	}
}

func (m InfraV2UpgradeStatus) validateInfraV2UpgradeStatusEnum(path, location string, value InfraV2UpgradeStatus) error {
	if err := validate.EnumCase(path, location, value, infraV2UpgradeStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this infra v2 upgrade status
func (m InfraV2UpgradeStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInfraV2UpgradeStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this infra v2 upgrade status based on context it is used
func (m InfraV2UpgradeStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
