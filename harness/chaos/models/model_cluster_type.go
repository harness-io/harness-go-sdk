// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelClusterType model cluster type
//
// swagger:model model.ClusterType
type ModelClusterType string

func NewModelClusterType(value ModelClusterType) *ModelClusterType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelClusterType.
func (m ModelClusterType) Pointer() *ModelClusterType {
	return &m
}

const (

	// ModelClusterTypeKUBERNETES captures enum value "KUBERNETES"
	ModelClusterTypeKUBERNETES ModelClusterType = "KUBERNETES"

	// ModelClusterTypeOPENSHIFT captures enum value "OPENSHIFT"
	ModelClusterTypeOPENSHIFT ModelClusterType = "OPENSHIFT"

	// ModelClusterTypeHELM captures enum value "HELM"
	ModelClusterTypeHELM ModelClusterType = "HELM"
)

// for schema
var modelClusterTypeEnum []interface{}

func init() {
	var res []ModelClusterType
	if err := json.Unmarshal([]byte(`["KUBERNETES","OPENSHIFT","HELM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelClusterTypeEnum = append(modelClusterTypeEnum, v)
	}
}

func (m ModelClusterType) validateModelClusterTypeEnum(path, location string, value ModelClusterType) error {
	if err := validate.EnumCase(path, location, value, modelClusterTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model cluster type
func (m ModelClusterType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelClusterTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model cluster type based on context it is used
func (m ModelClusterType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
