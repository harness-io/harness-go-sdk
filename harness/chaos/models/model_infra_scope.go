// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelInfraScope model infra scope
//
// swagger:model model.InfraScope
type ModelInfraScope string

func NewModelInfraScope(value ModelInfraScope) *ModelInfraScope {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelInfraScope.
func (m ModelInfraScope) Pointer() *ModelInfraScope {
	return &m
}

const (

	// ModelInfraScopeNamespace captures enum value "namespace"
	ModelInfraScopeNamespace ModelInfraScope = "namespace"

	// ModelInfraScopeCluster captures enum value "cluster"
	ModelInfraScopeCluster ModelInfraScope = "cluster"
)

// for schema
var modelInfraScopeEnum []interface{}

func init() {
	var res []ModelInfraScope
	if err := json.Unmarshal([]byte(`["namespace","cluster"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelInfraScopeEnum = append(modelInfraScopeEnum, v)
	}
}

func (m ModelInfraScope) validateModelInfraScopeEnum(path, location string, value ModelInfraScope) error {
	if err := validate.EnumCase(path, location, value, modelInfraScopeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model infra scope
func (m ModelInfraScope) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelInfraScopeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model infra scope based on context it is used
func (m ModelInfraScope) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
