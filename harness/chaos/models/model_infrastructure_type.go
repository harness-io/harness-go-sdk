// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelInfrastructureType model infrastructure type
//
// swagger:model model.InfrastructureType
type ModelInfrastructureType string

func NewModelInfrastructureType(value ModelInfrastructureType) *ModelInfrastructureType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelInfrastructureType.
func (m ModelInfrastructureType) Pointer() *ModelInfrastructureType {
	return &m
}

const (

	// ModelInfrastructureTypeKubernetes captures enum value "Kubernetes"
	ModelInfrastructureTypeKubernetes ModelInfrastructureType = "Kubernetes"

	// ModelInfrastructureTypeKubernetesV2 captures enum value "KubernetesV2"
	ModelInfrastructureTypeKubernetesV2 ModelInfrastructureType = "KubernetesV2"

	// ModelInfrastructureTypeWindows captures enum value "Windows"
	ModelInfrastructureTypeWindows ModelInfrastructureType = "Windows"

	// ModelInfrastructureTypeLinux captures enum value "Linux"
	ModelInfrastructureTypeLinux ModelInfrastructureType = "Linux"

	// ModelInfrastructureTypeCloudFoundry captures enum value "CloudFoundry"
	ModelInfrastructureTypeCloudFoundry ModelInfrastructureType = "CloudFoundry"
)

// for schema
var modelInfrastructureTypeEnum []interface{}

func init() {
	var res []ModelInfrastructureType
	if err := json.Unmarshal([]byte(`["Kubernetes","KubernetesV2","Windows","Linux","CloudFoundry"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelInfrastructureTypeEnum = append(modelInfrastructureTypeEnum, v)
	}
}

func (m ModelInfrastructureType) validateModelInfrastructureTypeEnum(path, location string, value ModelInfrastructureType) error {
	if err := validate.EnumCase(path, location, value, modelInfrastructureTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model infrastructure type
func (m ModelInfrastructureType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelInfrastructureTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model infrastructure type based on context it is used
func (m ModelInfrastructureType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
