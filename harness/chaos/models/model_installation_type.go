// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelInstallationType model installation type
//
// swagger:model model.InstallationType
type ModelInstallationType string

func NewModelInstallationType(value ModelInstallationType) *ModelInstallationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelInstallationType.
func (m ModelInstallationType) Pointer() *ModelInstallationType {
	return &m
}

const (

	// ModelInstallationTypeCONNECTOR captures enum value "CONNECTOR"
	ModelInstallationTypeCONNECTOR ModelInstallationType = "CONNECTOR"

	// ModelInstallationTypeMANIFEST captures enum value "MANIFEST"
	ModelInstallationTypeMANIFEST ModelInstallationType = "MANIFEST"

	// ModelInstallationTypeCONNECTORV2 captures enum value "CONNECTORV2"
	ModelInstallationTypeCONNECTORV2 ModelInstallationType = "CONNECTORV2"
)

// for schema
var modelInstallationTypeEnum []interface{}

func init() {
	var res []ModelInstallationType
	if err := json.Unmarshal([]byte(`["CONNECTOR","MANIFEST","CONNECTORV2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelInstallationTypeEnum = append(modelInstallationTypeEnum, v)
	}
}

func (m ModelInstallationType) validateModelInstallationTypeEnum(path, location string, value ModelInstallationType) error {
	if err := validate.EnumCase(path, location, value, modelInstallationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model installation type
func (m ModelInstallationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelInstallationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model installation type based on context it is used
func (m ModelInstallationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
