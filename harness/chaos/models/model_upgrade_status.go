// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelUpgradeStatus model upgrade status
//
// swagger:model model.UpgradeStatus
type ModelUpgradeStatus string

func NewModelUpgradeStatus(value ModelUpgradeStatus) *ModelUpgradeStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelUpgradeStatus.
func (m ModelUpgradeStatus) Pointer() *ModelUpgradeStatus {
	return &m
}

const (

	// ModelUpgradeStatusUPGRADINGINFRA captures enum value "UPGRADING_INFRA"
	ModelUpgradeStatusUPGRADINGINFRA ModelUpgradeStatus = "UPGRADING_INFRA"

	// ModelUpgradeStatusUPGRADESKIPPED captures enum value "UPGRADE_SKIPPED"
	ModelUpgradeStatusUPGRADESKIPPED ModelUpgradeStatus = "UPGRADE_SKIPPED"

	// ModelUpgradeStatusUPGRADESUCCESSFUL captures enum value "UPGRADE_SUCCESSFUL"
	ModelUpgradeStatusUPGRADESUCCESSFUL ModelUpgradeStatus = "UPGRADE_SUCCESSFUL"

	// ModelUpgradeStatusUPGRADEFAILED captures enum value "UPGRADE_FAILED"
	ModelUpgradeStatusUPGRADEFAILED ModelUpgradeStatus = "UPGRADE_FAILED"

	// ModelUpgradeStatusDETECTINGUPGRADER captures enum value "DETECTING_UPGRADER"
	ModelUpgradeStatusDETECTINGUPGRADER ModelUpgradeStatus = "DETECTING_UPGRADER"

	// ModelUpgradeStatusUPGRADERDISABLED captures enum value "UPGRADER_DISABLED"
	ModelUpgradeStatusUPGRADERDISABLED ModelUpgradeStatus = "UPGRADER_DISABLED"
)

// for schema
var modelUpgradeStatusEnum []interface{}

func init() {
	var res []ModelUpgradeStatus
	if err := json.Unmarshal([]byte(`["UPGRADING_INFRA","UPGRADE_SKIPPED","UPGRADE_SUCCESSFUL","UPGRADE_FAILED","DETECTING_UPGRADER","UPGRADER_DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelUpgradeStatusEnum = append(modelUpgradeStatusEnum, v)
	}
}

func (m ModelUpgradeStatus) validateModelUpgradeStatusEnum(path, location string, value ModelUpgradeStatus) error {
	if err := validate.EnumCase(path, location, value, modelUpgradeStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model upgrade status
func (m ModelUpgradeStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelUpgradeStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model upgrade status based on context it is used
func (m ModelUpgradeStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
