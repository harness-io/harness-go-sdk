// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelWorkflowRunStatus model workflow run status
//
// swagger:model model.WorkflowRunStatus
type ModelWorkflowRunStatus string

func NewModelWorkflowRunStatus(value ModelWorkflowRunStatus) *ModelWorkflowRunStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelWorkflowRunStatus.
func (m ModelWorkflowRunStatus) Pointer() *ModelWorkflowRunStatus {
	return &m
}

const (

	// ModelWorkflowRunStatusAll captures enum value "All"
	ModelWorkflowRunStatusAll ModelWorkflowRunStatus = "All"

	// ModelWorkflowRunStatusRunning captures enum value "Running"
	ModelWorkflowRunStatusRunning ModelWorkflowRunStatus = "Running"

	// ModelWorkflowRunStatusCompleted captures enum value "Completed"
	ModelWorkflowRunStatusCompleted ModelWorkflowRunStatus = "Completed"

	// ModelWorkflowRunStatusCompletedWithError captures enum value "Completed_With_Error"
	ModelWorkflowRunStatusCompletedWithError ModelWorkflowRunStatus = "Completed_With_Error"

	// ModelWorkflowRunStatusCompletedWithProbeFailure captures enum value "Completed_With_Probe_Failure"
	ModelWorkflowRunStatusCompletedWithProbeFailure ModelWorkflowRunStatus = "Completed_With_Probe_Failure"

	// ModelWorkflowRunStatusStopped captures enum value "Stopped"
	ModelWorkflowRunStatusStopped ModelWorkflowRunStatus = "Stopped"

	// ModelWorkflowRunStatusSkipped captures enum value "Skipped"
	ModelWorkflowRunStatusSkipped ModelWorkflowRunStatus = "Skipped"

	// ModelWorkflowRunStatusError captures enum value "Error"
	ModelWorkflowRunStatusError ModelWorkflowRunStatus = "Error"

	// ModelWorkflowRunStatusTimeout captures enum value "Timeout"
	ModelWorkflowRunStatusTimeout ModelWorkflowRunStatus = "Timeout"

	// ModelWorkflowRunStatusNA captures enum value "NA"
	ModelWorkflowRunStatusNA ModelWorkflowRunStatus = "NA"

	// ModelWorkflowRunStatusQueued captures enum value "Queued"
	ModelWorkflowRunStatusQueued ModelWorkflowRunStatus = "Queued"

	// ModelWorkflowRunStatusBlocked captures enum value "Blocked"
	ModelWorkflowRunStatusBlocked ModelWorkflowRunStatus = "Blocked"
)

// for schema
var modelWorkflowRunStatusEnum []interface{}

func init() {
	var res []ModelWorkflowRunStatus
	if err := json.Unmarshal([]byte(`["All","Running","Completed","Completed_With_Error","Completed_With_Probe_Failure","Stopped","Skipped","Error","Timeout","NA","Queued","Blocked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelWorkflowRunStatusEnum = append(modelWorkflowRunStatusEnum, v)
	}
}

func (m ModelWorkflowRunStatus) validateModelWorkflowRunStatusEnum(path, location string, value ModelWorkflowRunStatus) error {
	if err := validate.EnumCase(path, location, value, modelWorkflowRunStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model workflow run status
func (m ModelWorkflowRunStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelWorkflowRunStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model workflow run status based on context it is used
func (m ModelWorkflowRunStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
