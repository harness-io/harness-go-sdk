// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ModelWorkflowType model workflow type
//
// swagger:model model.WorkflowType
type ModelWorkflowType string

func NewModelWorkflowType(value ModelWorkflowType) *ModelWorkflowType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ModelWorkflowType.
func (m ModelWorkflowType) Pointer() *ModelWorkflowType {
	return &m
}

const (

	// ModelWorkflowTypeAll captures enum value "All"
	ModelWorkflowTypeAll ModelWorkflowType = "All"

	// ModelWorkflowTypeGamedayWorkflow captures enum value "GamedayWorkflow"
	ModelWorkflowTypeGamedayWorkflow ModelWorkflowType = "GamedayWorkflow"

	// ModelWorkflowTypeWorkflow captures enum value "Workflow"
	ModelWorkflowTypeWorkflow ModelWorkflowType = "Workflow"

	// ModelWorkflowTypeCronWorkflow captures enum value "CronWorkflow"
	ModelWorkflowTypeCronWorkflow ModelWorkflowType = "CronWorkflow"

	// ModelWorkflowTypeChaosEngine captures enum value "ChaosEngine"
	ModelWorkflowTypeChaosEngine ModelWorkflowType = "ChaosEngine"

	// ModelWorkflowTypeChaosSchedule captures enum value "ChaosSchedule"
	ModelWorkflowTypeChaosSchedule ModelWorkflowType = "ChaosSchedule"
)

// for schema
var modelWorkflowTypeEnum []interface{}

func init() {
	var res []ModelWorkflowType
	if err := json.Unmarshal([]byte(`["All","GamedayWorkflow","Workflow","CronWorkflow","ChaosEngine","ChaosSchedule"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelWorkflowTypeEnum = append(modelWorkflowTypeEnum, v)
	}
}

func (m ModelWorkflowType) validateModelWorkflowTypeEnum(path, location string, value ModelWorkflowType) error {
	if err := validate.EnumCase(path, location, value, modelWorkflowTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this model workflow type
func (m ModelWorkflowType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelWorkflowTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this model workflow type based on context it is used
func (m ModelWorkflowType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
