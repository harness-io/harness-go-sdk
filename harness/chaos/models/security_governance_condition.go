// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SecurityGovernanceCondition security governance condition
//
// swagger:model security_governance.Condition
type SecurityGovernanceCondition struct {

	// condition Id
	ConditionID string `json:"conditionId,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// fault spec
	FaultSpec *SecurityGovernanceFaultSpec `json:"faultSpec,omitempty"`

	// infra type
	InfraType SecurityGovernanceInfraType `json:"infraType,omitempty"`

	// k8s spec
	K8sSpec *SecurityGovernanceK8sSpec `json:"k8sSpec,omitempty"`

	// machine spec
	MachineSpec *SecurityGovernanceMachineSpec `json:"machineSpec,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// tags
	Tags []string `json:"tags"`
}

// Validate validates this security governance condition
func (m *SecurityGovernanceCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFaultSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfraType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateK8sSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGovernanceCondition) validateFaultSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.FaultSpec) { // not required
		return nil
	}

	if m.FaultSpec != nil {
		if err := m.FaultSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("faultSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("faultSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGovernanceCondition) validateInfraType(formats strfmt.Registry) error {
	if swag.IsZero(m.InfraType) { // not required
		return nil
	}

	if err := m.InfraType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraType")
		}
		return err
	}

	return nil
}

func (m *SecurityGovernanceCondition) validateK8sSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.K8sSpec) { // not required
		return nil
	}

	if m.K8sSpec != nil {
		if err := m.K8sSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("k8sSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("k8sSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGovernanceCondition) validateMachineSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.MachineSpec) { // not required
		return nil
	}

	if m.MachineSpec != nil {
		if err := m.MachineSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("machineSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("machineSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security governance condition based on the context it is used
func (m *SecurityGovernanceCondition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFaultSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInfraType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateK8sSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMachineSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGovernanceCondition) contextValidateFaultSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.FaultSpec != nil {

		if swag.IsZero(m.FaultSpec) { // not required
			return nil
		}

		if err := m.FaultSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("faultSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("faultSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGovernanceCondition) contextValidateInfraType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.InfraType) { // not required
		return nil
	}

	if err := m.InfraType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraType")
		}
		return err
	}

	return nil
}

func (m *SecurityGovernanceCondition) contextValidateK8sSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.K8sSpec != nil {

		if swag.IsZero(m.K8sSpec) { // not required
			return nil
		}

		if err := m.K8sSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("k8sSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("k8sSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGovernanceCondition) contextValidateMachineSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.MachineSpec != nil {

		if swag.IsZero(m.MachineSpec) { // not required
			return nil
		}

		if err := m.MachineSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("machineSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("machineSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityGovernanceCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityGovernanceCondition) UnmarshalBinary(b []byte) error {
	var res SecurityGovernanceCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
