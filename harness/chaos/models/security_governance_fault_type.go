// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SecurityGovernanceFaultType security governance fault type
//
// swagger:model security_governance.FaultType
type SecurityGovernanceFaultType string

func NewSecurityGovernanceFaultType(value SecurityGovernanceFaultType) *SecurityGovernanceFaultType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SecurityGovernanceFaultType.
func (m SecurityGovernanceFaultType) Pointer() *SecurityGovernanceFaultType {
	return &m
}

const (

	// SecurityGovernanceFaultTypeFAULTGROUP captures enum value "FAULT_GROUP"
	SecurityGovernanceFaultTypeFAULTGROUP SecurityGovernanceFaultType = "FAULT_GROUP"

	// SecurityGovernanceFaultTypeFAULTNAME captures enum value "FAULT_NAME"
	SecurityGovernanceFaultTypeFAULTNAME SecurityGovernanceFaultType = "FAULT_NAME"
)

// for schema
var securityGovernanceFaultTypeEnum []interface{}

func init() {
	var res []SecurityGovernanceFaultType
	if err := json.Unmarshal([]byte(`["FAULT_GROUP","FAULT_NAME"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityGovernanceFaultTypeEnum = append(securityGovernanceFaultTypeEnum, v)
	}
}

func (m SecurityGovernanceFaultType) validateSecurityGovernanceFaultTypeEnum(path, location string, value SecurityGovernanceFaultType) error {
	if err := validate.EnumCase(path, location, value, securityGovernanceFaultTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this security governance fault type
func (m SecurityGovernanceFaultType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecurityGovernanceFaultTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this security governance fault type based on context it is used
func (m SecurityGovernanceFaultType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
