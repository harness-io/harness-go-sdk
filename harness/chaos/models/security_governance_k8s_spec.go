// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SecurityGovernanceK8sSpec security governance k8s spec
//
// swagger:model security_governance.K8sSpec
type SecurityGovernanceK8sSpec struct {

	// application spec
	ApplicationSpec *SecurityGovernanceApplicationSpec `json:"applicationSpec,omitempty"`

	// chaos service account spec
	ChaosServiceAccountSpec *SecurityGovernanceChaosServiceAccountSpec `json:"chaosServiceAccountSpec,omitempty"`

	// infra spec
	InfraSpec *SecurityGovernanceInfraSpec `json:"infraSpec,omitempty"`
}

// Validate validates this security governance k8s spec
func (m *SecurityGovernanceK8sSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplicationSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChaosServiceAccountSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfraSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGovernanceK8sSpec) validateApplicationSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.ApplicationSpec) { // not required
		return nil
	}

	if m.ApplicationSpec != nil {
		if err := m.ApplicationSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGovernanceK8sSpec) validateChaosServiceAccountSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.ChaosServiceAccountSpec) { // not required
		return nil
	}

	if m.ChaosServiceAccountSpec != nil {
		if err := m.ChaosServiceAccountSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chaosServiceAccountSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chaosServiceAccountSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGovernanceK8sSpec) validateInfraSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.InfraSpec) { // not required
		return nil
	}

	if m.InfraSpec != nil {
		if err := m.InfraSpec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("infraSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("infraSpec")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this security governance k8s spec based on the context it is used
func (m *SecurityGovernanceK8sSpec) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApplicationSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChaosServiceAccountSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInfraSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGovernanceK8sSpec) contextValidateApplicationSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.ApplicationSpec != nil {

		if swag.IsZero(m.ApplicationSpec) { // not required
			return nil
		}

		if err := m.ApplicationSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("applicationSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("applicationSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGovernanceK8sSpec) contextValidateChaosServiceAccountSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.ChaosServiceAccountSpec != nil {

		if swag.IsZero(m.ChaosServiceAccountSpec) { // not required
			return nil
		}

		if err := m.ChaosServiceAccountSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chaosServiceAccountSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chaosServiceAccountSpec")
			}
			return err
		}
	}

	return nil
}

func (m *SecurityGovernanceK8sSpec) contextValidateInfraSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.InfraSpec != nil {

		if swag.IsZero(m.InfraSpec) { // not required
			return nil
		}

		if err := m.InfraSpec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("infraSpec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("infraSpec")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityGovernanceK8sSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityGovernanceK8sSpec) UnmarshalBinary(b []byte) error {
	var res SecurityGovernanceK8sSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
