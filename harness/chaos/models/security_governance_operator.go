// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SecurityGovernanceOperator security governance operator
//
// swagger:model security_governance.Operator
type SecurityGovernanceOperator string

func NewSecurityGovernanceOperator(value SecurityGovernanceOperator) *SecurityGovernanceOperator {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SecurityGovernanceOperator.
func (m SecurityGovernanceOperator) Pointer() *SecurityGovernanceOperator {
	return &m
}

const (

	// SecurityGovernanceOperatorEQUALTO captures enum value "EQUAL_TO"
	SecurityGovernanceOperatorEQUALTO SecurityGovernanceOperator = "EQUAL_TO"

	// SecurityGovernanceOperatorNOTEQUALTO captures enum value "NOT_EQUAL_TO"
	SecurityGovernanceOperatorNOTEQUALTO SecurityGovernanceOperator = "NOT_EQUAL_TO"
)

// for schema
var securityGovernanceOperatorEnum []interface{}

func init() {
	var res []SecurityGovernanceOperator
	if err := json.Unmarshal([]byte(`["EQUAL_TO","NOT_EQUAL_TO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityGovernanceOperatorEnum = append(securityGovernanceOperatorEnum, v)
	}
}

func (m SecurityGovernanceOperator) validateSecurityGovernanceOperatorEnum(path, location string, value SecurityGovernanceOperator) error {
	if err := validate.EnumCase(path, location, value, securityGovernanceOperatorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this security governance operator
func (m SecurityGovernanceOperator) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecurityGovernanceOperatorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this security governance operator based on context it is used
func (m SecurityGovernanceOperator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
