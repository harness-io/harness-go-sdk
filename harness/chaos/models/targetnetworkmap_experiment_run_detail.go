// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TargetnetworkmapExperimentRunDetail targetnetworkmap experiment run detail
//
// swagger:model targetnetworkmap.ExperimentRunDetail
type TargetnetworkmapExperimentRunDetail struct {

	// completed
	Completed bool `json:"completed,omitempty"`

	// created at
	CreatedAt int64 `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// experiment run ID
	ExperimentRunID string `json:"experimentRunID,omitempty"`

	// is removed
	IsRemoved bool `json:"isRemoved,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// notify ID
	NotifyID string `json:"notifyID,omitempty"`

	// phase
	Phase string `json:"phase,omitempty"`

	// resiliency score
	ResiliencyScore float64 `json:"resiliencyScore,omitempty"`

	// target service
	TargetService []*TargetserviceServiceMetadata `json:"targetService"`

	// updated at
	UpdatedAt int64 `json:"updatedAt,omitempty"`

	// updated by
	UpdatedBy string `json:"updatedBy,omitempty"`
}

// Validate validates this targetnetworkmap experiment run detail
func (m *TargetnetworkmapExperimentRunDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetnetworkmapExperimentRunDetail) validateTargetService(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetService) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetService); i++ {
		if swag.IsZero(m.TargetService[i]) { // not required
			continue
		}

		if m.TargetService[i] != nil {
			if err := m.TargetService[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targetService" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("targetService" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this targetnetworkmap experiment run detail based on the context it is used
func (m *TargetnetworkmapExperimentRunDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargetService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetnetworkmapExperimentRunDetail) contextValidateTargetService(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TargetService); i++ {

		if m.TargetService[i] != nil {

			if swag.IsZero(m.TargetService[i]) { // not required
				return nil
			}

			if err := m.TargetService[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targetService" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("targetService" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TargetnetworkmapExperimentRunDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TargetnetworkmapExperimentRunDetail) UnmarshalBinary(b []byte) error {
	var res TargetnetworkmapExperimentRunDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
