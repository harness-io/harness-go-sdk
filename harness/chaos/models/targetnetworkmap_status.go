// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TargetnetworkmapStatus targetnetworkmap status
//
// swagger:model targetnetworkmap.Status
type TargetnetworkmapStatus string

func NewTargetnetworkmapStatus(value TargetnetworkmapStatus) *TargetnetworkmapStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TargetnetworkmapStatus.
func (m TargetnetworkmapStatus) Pointer() *TargetnetworkmapStatus {
	return &m
}

const (

	// TargetnetworkmapStatusCOMPLETED captures enum value "COMPLETED"
	TargetnetworkmapStatusCOMPLETED TargetnetworkmapStatus = "COMPLETED"

	// TargetnetworkmapStatusRUNNING captures enum value "RUNNING"
	TargetnetworkmapStatusRUNNING TargetnetworkmapStatus = "RUNNING"

	// TargetnetworkmapStatusPENDING captures enum value "PENDING"
	TargetnetworkmapStatusPENDING TargetnetworkmapStatus = "PENDING"

	// TargetnetworkmapStatusERRORED captures enum value "ERRORED"
	TargetnetworkmapStatusERRORED TargetnetworkmapStatus = "ERRORED"
)

// for schema
var targetnetworkmapStatusEnum []interface{}

func init() {
	var res []TargetnetworkmapStatus
	if err := json.Unmarshal([]byte(`["COMPLETED","RUNNING","PENDING","ERRORED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		targetnetworkmapStatusEnum = append(targetnetworkmapStatusEnum, v)
	}
}

func (m TargetnetworkmapStatus) validateTargetnetworkmapStatusEnum(path, location string, value TargetnetworkmapStatus) error {
	if err := validate.EnumCase(path, location, value, targetnetworkmapStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this targetnetworkmap status
func (m TargetnetworkmapStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTargetnetworkmapStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this targetnetworkmap status based on context it is used
func (m TargetnetworkmapStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
