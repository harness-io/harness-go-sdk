// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TargetnetworkmapTargetNetworkMap targetnetworkmap target network map
//
// swagger:model targetnetworkmap.TargetNetworkMap
type TargetnetworkmapTargetNetworkMap struct {

	// account ID
	AccountID string `json:"accountID,omitempty"`

	// agent identity
	AgentIdentity string `json:"agentIdentity,omitempty"`

	// average resiliency score
	AverageResiliencyScore float64 `json:"averageResiliencyScore,omitempty"`

	// created at
	CreatedAt int64 `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// environment ref
	EnvironmentRef string `json:"environmentRef,omitempty"`

	// error message
	ErrorMessage string `json:"errorMessage,omitempty"`

	// experiment creation mode
	ExperimentCreationMode TargetnetworkmapExperimentCreationMode `json:"experimentCreationMode,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// identity
	Identity string `json:"identity,omitempty"`

	// infrastructure Id
	InfrastructureID string `json:"infrastructureId,omitempty"`

	// is removed
	IsRemoved bool `json:"isRemoved,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// onboarding ID
	OnboardingID string `json:"onboardingID,omitempty"`

	// org ID
	OrgID string `json:"orgID,omitempty"`

	// project ID
	ProjectID string `json:"projectID,omitempty"`

	// recent experiment runs details
	RecentExperimentRunsDetails []*TargetnetworkmapExperimentRunDetail `json:"recentExperimentRunsDetails"`

	// resiliency coverage
	ResiliencyCoverage float64 `json:"resiliencyCoverage,omitempty"`

	// service i ds
	ServiceIDs []string `json:"serviceIDs"`

	// status
	Status TargetnetworkmapStatus `json:"status,omitempty"`

	// target network map ID
	TargetNetworkMapID string `json:"targetNetworkMapID,omitempty"`

	// total experiment count
	TotalExperimentCount int64 `json:"totalExperimentCount,omitempty"`

	// total experiment run count
	TotalExperimentRunCount int64 `json:"totalExperimentRunCount,omitempty"`

	// updated at
	UpdatedAt int64 `json:"updatedAt,omitempty"`

	// updated by
	UpdatedBy string `json:"updatedBy,omitempty"`
}

// Validate validates this targetnetworkmap target network map
func (m *TargetnetworkmapTargetNetworkMap) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExperimentCreationMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecentExperimentRunsDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetnetworkmapTargetNetworkMap) validateExperimentCreationMode(formats strfmt.Registry) error {
	if swag.IsZero(m.ExperimentCreationMode) { // not required
		return nil
	}

	if err := m.ExperimentCreationMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("experimentCreationMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("experimentCreationMode")
		}
		return err
	}

	return nil
}

func (m *TargetnetworkmapTargetNetworkMap) validateRecentExperimentRunsDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.RecentExperimentRunsDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.RecentExperimentRunsDetails); i++ {
		if swag.IsZero(m.RecentExperimentRunsDetails[i]) { // not required
			continue
		}

		if m.RecentExperimentRunsDetails[i] != nil {
			if err := m.RecentExperimentRunsDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recentExperimentRunsDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recentExperimentRunsDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TargetnetworkmapTargetNetworkMap) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this targetnetworkmap target network map based on the context it is used
func (m *TargetnetworkmapTargetNetworkMap) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExperimentCreationMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecentExperimentRunsDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetnetworkmapTargetNetworkMap) contextValidateExperimentCreationMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ExperimentCreationMode) { // not required
		return nil
	}

	if err := m.ExperimentCreationMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("experimentCreationMode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("experimentCreationMode")
		}
		return err
	}

	return nil
}

func (m *TargetnetworkmapTargetNetworkMap) contextValidateRecentExperimentRunsDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RecentExperimentRunsDetails); i++ {

		if m.RecentExperimentRunsDetails[i] != nil {

			if swag.IsZero(m.RecentExperimentRunsDetails[i]) { // not required
				return nil
			}

			if err := m.RecentExperimentRunsDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("recentExperimentRunsDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("recentExperimentRunsDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TargetnetworkmapTargetNetworkMap) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TargetnetworkmapTargetNetworkMap) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TargetnetworkmapTargetNetworkMap) UnmarshalBinary(b []byte) error {
	var res TargetnetworkmapTargetNetworkMap
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
