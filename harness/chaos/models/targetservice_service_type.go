// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TargetserviceServiceType targetservice service type
//
// swagger:model targetservice.ServiceType
type TargetserviceServiceType string

func NewTargetserviceServiceType(value TargetserviceServiceType) *TargetserviceServiceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TargetserviceServiceType.
func (m TargetserviceServiceType) Pointer() *TargetserviceServiceType {
	return &m
}

const (

	// TargetserviceServiceTypeDiscoveredService captures enum value "DiscoveredService"
	TargetserviceServiceTypeDiscoveredService TargetserviceServiceType = "DiscoveredService"

	// TargetserviceServiceTypeUnAccounted captures enum value "UnAccounted"
	TargetserviceServiceTypeUnAccounted TargetserviceServiceType = "UnAccounted"
)

// for schema
var targetserviceServiceTypeEnum []interface{}

func init() {
	var res []TargetserviceServiceType
	if err := json.Unmarshal([]byte(`["DiscoveredService","UnAccounted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		targetserviceServiceTypeEnum = append(targetserviceServiceTypeEnum, v)
	}
}

func (m TargetserviceServiceType) validateTargetserviceServiceTypeEnum(path, location string, value TargetserviceServiceType) error {
	if err := validate.EnumCase(path, location, value, targetserviceServiceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this targetservice service type
func (m TargetserviceServiceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTargetserviceServiceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this targetservice service type based on context it is used
func (m TargetserviceServiceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
