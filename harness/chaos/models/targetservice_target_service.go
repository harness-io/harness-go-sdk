// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TargetserviceTargetService targetservice target service
//
// swagger:model targetservice.TargetService
type TargetserviceTargetService struct {

	// account ID
	AccountID string `json:"accountID,omitempty"`

	// average resiliency score
	AverageResiliencyScore float64 `json:"averageResiliencyScore,omitempty"`

	// created at
	CreatedAt int64 `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// environment ref
	EnvironmentRef string `json:"environmentRef,omitempty"`

	// external Id
	ExternalID string `json:"externalId,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// infrastructure Id
	InfrastructureID string `json:"infrastructureId,omitempty"`

	// is removed
	IsRemoved bool `json:"isRemoved,omitempty"`

	// license Id
	LicenseID string `json:"licenseId,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// org ID
	OrgID string `json:"orgID,omitempty"`

	// project ID
	ProjectID string `json:"projectID,omitempty"`

	// resiliency coverage
	ResiliencyCoverage float64 `json:"resiliencyCoverage,omitempty"`

	// spec
	Spec *TargetserviceServiceSpec `json:"spec,omitempty"`

	// total experiment count
	TotalExperimentCount int64 `json:"totalExperimentCount,omitempty"`

	// type
	Type TargetserviceServiceType `json:"type,omitempty"`

	// updated at
	UpdatedAt int64 `json:"updatedAt,omitempty"`

	// updated by
	UpdatedBy string `json:"updatedBy,omitempty"`
}

// Validate validates this targetservice target service
func (m *TargetserviceTargetService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetserviceTargetService) validateSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	if m.Spec != nil {
		if err := m.Spec.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

func (m *TargetserviceTargetService) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this targetservice target service based on the context it is used
func (m *TargetserviceTargetService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetserviceTargetService) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	if m.Spec != nil {

		if swag.IsZero(m.Spec) { // not required
			return nil
		}

		if err := m.Spec.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spec")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("spec")
			}
			return err
		}
	}

	return nil
}

func (m *TargetserviceTargetService) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TargetserviceTargetService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TargetserviceTargetService) UnmarshalBinary(b []byte) error {
	var res TargetserviceTargetService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
