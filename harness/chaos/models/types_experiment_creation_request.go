// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TypesExperimentCreationRequest types experiment creation request
//
// swagger:model types.ExperimentCreationRequest
type TypesExperimentCreationRequest struct {

	// cron syntax
	CronSyntax string `json:"cronSyntax,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// events metadata
	EventsMetadata []*ModelEventMetadata `json:"eventsMetadata"`

	// experiment type
	ExperimentType ModelWorkflowType `json:"experimentType,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// infra Id
	InfraID string `json:"infraId,omitempty"`

	// infra type
	InfraType ModelInfrastructureType `json:"infraType,omitempty"`

	// manifest
	Manifest string `json:"manifest,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// recommendation
	Recommendation *ChaosExperimentRecommendation `json:"recommendation,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// validate manifest
	ValidateManifest bool `json:"validateManifest,omitempty"`
}

// Validate validates this types experiment creation request
func (m *TypesExperimentCreationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventsMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExperimentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfraType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesExperimentCreationRequest) validateEventsMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.EventsMetadata) { // not required
		return nil
	}

	for i := 0; i < len(m.EventsMetadata); i++ {
		if swag.IsZero(m.EventsMetadata[i]) { // not required
			continue
		}

		if m.EventsMetadata[i] != nil {
			if err := m.EventsMetadata[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventsMetadata" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eventsMetadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TypesExperimentCreationRequest) validateExperimentType(formats strfmt.Registry) error {
	if swag.IsZero(m.ExperimentType) { // not required
		return nil
	}

	if err := m.ExperimentType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("experimentType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("experimentType")
		}
		return err
	}

	return nil
}

func (m *TypesExperimentCreationRequest) validateInfraType(formats strfmt.Registry) error {
	if swag.IsZero(m.InfraType) { // not required
		return nil
	}

	if err := m.InfraType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraType")
		}
		return err
	}

	return nil
}

func (m *TypesExperimentCreationRequest) validateRecommendation(formats strfmt.Registry) error {
	if swag.IsZero(m.Recommendation) { // not required
		return nil
	}

	if m.Recommendation != nil {
		if err := m.Recommendation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommendation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recommendation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this types experiment creation request based on the context it is used
func (m *TypesExperimentCreationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventsMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExperimentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInfraType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecommendation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesExperimentCreationRequest) contextValidateEventsMetadata(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EventsMetadata); i++ {

		if m.EventsMetadata[i] != nil {

			if swag.IsZero(m.EventsMetadata[i]) { // not required
				return nil
			}

			if err := m.EventsMetadata[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventsMetadata" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eventsMetadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TypesExperimentCreationRequest) contextValidateExperimentType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ExperimentType) { // not required
		return nil
	}

	if err := m.ExperimentType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("experimentType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("experimentType")
		}
		return err
	}

	return nil
}

func (m *TypesExperimentCreationRequest) contextValidateInfraType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.InfraType) { // not required
		return nil
	}

	if err := m.InfraType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("infraType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("infraType")
		}
		return err
	}

	return nil
}

func (m *TypesExperimentCreationRequest) contextValidateRecommendation(ctx context.Context, formats strfmt.Registry) error {

	if m.Recommendation != nil {

		if swag.IsZero(m.Recommendation) { // not required
			return nil
		}

		if err := m.Recommendation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recommendation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recommendation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesExperimentCreationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesExperimentCreationRequest) UnmarshalBinary(b []byte) error {
	var res TypesExperimentCreationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
