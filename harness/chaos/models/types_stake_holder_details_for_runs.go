// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TypesStakeHolderDetailsForRuns types stake holder details for runs
//
// swagger:model types.StakeHolderDetailsForRuns
type TypesStakeHolderDetailsForRuns struct {

	// approval required
	ApprovalRequired bool `json:"approvalRequired,omitempty"`

	// approval status
	ApprovalStatus Gamedayrunv2ApprovalStatus `json:"approvalStatus,omitempty"`

	// last updated at
	LastUpdatedAt int64 `json:"lastUpdatedAt,omitempty"`

	// last updated by
	LastUpdatedBy *GithubComHarnessHceSaasGraphqlServerGraphModelUserDetails `json:"lastUpdatedBy,omitempty"`

	// notes
	Notes string `json:"notes,omitempty"`

	// role
	Role Gamedayv2StakeHolderRole `json:"role,omitempty"`

	// user
	User *GithubComHarnessHceSaasGraphqlServerGraphModelUserDetails `json:"user,omitempty"`
}

// Validate validates this types stake holder details for runs
func (m *TypesStakeHolderDetailsForRuns) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApprovalStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesStakeHolderDetailsForRuns) validateApprovalStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ApprovalStatus) { // not required
		return nil
	}

	if err := m.ApprovalStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("approvalStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("approvalStatus")
		}
		return err
	}

	return nil
}

func (m *TypesStakeHolderDetailsForRuns) validateLastUpdatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdatedBy) { // not required
		return nil
	}

	if m.LastUpdatedBy != nil {
		if err := m.LastUpdatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastUpdatedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastUpdatedBy")
			}
			return err
		}
	}

	return nil
}

func (m *TypesStakeHolderDetailsForRuns) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if err := m.Role.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("role")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("role")
		}
		return err
	}

	return nil
}

func (m *TypesStakeHolderDetailsForRuns) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this types stake holder details for runs based on the context it is used
func (m *TypesStakeHolderDetailsForRuns) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApprovalStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesStakeHolderDetailsForRuns) contextValidateApprovalStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.ApprovalStatus) { // not required
		return nil
	}

	if err := m.ApprovalStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("approvalStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("approvalStatus")
		}
		return err
	}

	return nil
}

func (m *TypesStakeHolderDetailsForRuns) contextValidateLastUpdatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.LastUpdatedBy != nil {

		if swag.IsZero(m.LastUpdatedBy) { // not required
			return nil
		}

		if err := m.LastUpdatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastUpdatedBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastUpdatedBy")
			}
			return err
		}
	}

	return nil
}

func (m *TypesStakeHolderDetailsForRuns) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	if err := m.Role.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("role")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("role")
		}
		return err
	}

	return nil
}

func (m *TypesStakeHolderDetailsForRuns) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {

		if swag.IsZero(m.User) { // not required
			return nil
		}

		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesStakeHolderDetailsForRuns) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesStakeHolderDetailsForRuns) UnmarshalBinary(b []byte) error {
	var res TypesStakeHolderDetailsForRuns
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
