// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TypesStakeHolderRole types stake holder role
//
// swagger:model types.StakeHolderRole
type TypesStakeHolderRole string

func NewTypesStakeHolderRole(value TypesStakeHolderRole) *TypesStakeHolderRole {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TypesStakeHolderRole.
func (m TypesStakeHolderRole) Pointer() *TypesStakeHolderRole {
	return &m
}

const (

	// TypesStakeHolderRoleCoordinator captures enum value "coordinator"
	TypesStakeHolderRoleCoordinator TypesStakeHolderRole = "coordinator"

	// TypesStakeHolderRoleTriageEngineer captures enum value "triage_engineer"
	TypesStakeHolderRoleTriageEngineer TypesStakeHolderRole = "triage_engineer"

	// TypesStakeHolderRoleAttendee captures enum value "attendee"
	TypesStakeHolderRoleAttendee TypesStakeHolderRole = "attendee"

	// TypesStakeHolderRoleOthers captures enum value "others"
	TypesStakeHolderRoleOthers TypesStakeHolderRole = "others"
)

// for schema
var typesStakeHolderRoleEnum []interface{}

func init() {
	var res []TypesStakeHolderRole
	if err := json.Unmarshal([]byte(`["coordinator","triage_engineer","attendee","others"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		typesStakeHolderRoleEnum = append(typesStakeHolderRoleEnum, v)
	}
}

func (m TypesStakeHolderRole) validateTypesStakeHolderRoleEnum(path, location string, value TypesStakeHolderRole) error {
	if err := validate.EnumCase(path, location, value, typesStakeHolderRoleEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this types stake holder role
func (m TypesStakeHolderRole) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTypesStakeHolderRoleEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this types stake holder role based on context it is used
func (m TypesStakeHolderRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
