// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TypesUpdateCronExperimentAction types update cron experiment action
//
// swagger:model types.UpdateCronExperimentAction
type TypesUpdateCronExperimentAction string

func NewTypesUpdateCronExperimentAction(value TypesUpdateCronExperimentAction) *TypesUpdateCronExperimentAction {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TypesUpdateCronExperimentAction.
func (m TypesUpdateCronExperimentAction) Pointer() *TypesUpdateCronExperimentAction {
	return &m
}

const (

	// TypesUpdateCronExperimentActionEnable captures enum value "Enable"
	TypesUpdateCronExperimentActionEnable TypesUpdateCronExperimentAction = "Enable"

	// TypesUpdateCronExperimentActionDisable captures enum value "Disable"
	TypesUpdateCronExperimentActionDisable TypesUpdateCronExperimentAction = "Disable"

	// TypesUpdateCronExperimentActionUpdate captures enum value "Update"
	TypesUpdateCronExperimentActionUpdate TypesUpdateCronExperimentAction = "Update"
)

// for schema
var typesUpdateCronExperimentActionEnum []interface{}

func init() {
	var res []TypesUpdateCronExperimentAction
	if err := json.Unmarshal([]byte(`["Enable","Disable","Update"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		typesUpdateCronExperimentActionEnum = append(typesUpdateCronExperimentActionEnum, v)
	}
}

func (m TypesUpdateCronExperimentAction) validateTypesUpdateCronExperimentActionEnum(path, location string, value TypesUpdateCronExperimentAction) error {
	if err := validate.EnumCase(path, location, value, typesUpdateCronExperimentActionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this types update cron experiment action
func (m TypesUpdateCronExperimentAction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTypesUpdateCronExperimentActionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this types update cron experiment action based on context it is used
func (m TypesUpdateCronExperimentAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
