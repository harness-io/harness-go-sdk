// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TypesUpdateNoteRequest types update note request
//
// swagger:model types.UpdateNoteRequest
type TypesUpdateNoteRequest struct {

	// comment
	Comment string `json:"comment,omitempty"`

	// experiment ID
	ExperimentID string `json:"experimentID,omitempty"`

	// experiment run ID
	ExperimentRunID string `json:"experimentRunID,omitempty"`

	// gameday run ID
	GamedayRunID string `json:"gamedayRunID,omitempty"`

	// note Id
	NoteID string `json:"noteId,omitempty"`

	// operation
	Operation TypesUpdateOperation `json:"operation,omitempty"`

	// type
	Type ChaosresourcenotesNoteType `json:"type,omitempty"`
}

// Validate validates this types update note request
func (m *TypesUpdateNoteRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesUpdateNoteRequest) validateOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.Operation) { // not required
		return nil
	}

	if err := m.Operation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("operation")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("operation")
		}
		return err
	}

	return nil
}

func (m *TypesUpdateNoteRequest) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this types update note request based on the context it is used
func (m *TypesUpdateNoteRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOperation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TypesUpdateNoteRequest) contextValidateOperation(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Operation) { // not required
		return nil
	}

	if err := m.Operation.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("operation")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("operation")
		}
		return err
	}

	return nil
}

func (m *TypesUpdateNoteRequest) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TypesUpdateNoteRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TypesUpdateNoteRequest) UnmarshalBinary(b []byte) error {
	var res TypesUpdateNoteRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
