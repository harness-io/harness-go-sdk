// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TypesUpdateOperation types update operation
//
// swagger:model types.UpdateOperation
type TypesUpdateOperation string

func NewTypesUpdateOperation(value TypesUpdateOperation) *TypesUpdateOperation {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TypesUpdateOperation.
func (m TypesUpdateOperation) Pointer() *TypesUpdateOperation {
	return &m
}

const (

	// TypesUpdateOperationDelete captures enum value "delete"
	TypesUpdateOperationDelete TypesUpdateOperation = "delete"

	// TypesUpdateOperationUpdate captures enum value "update"
	TypesUpdateOperationUpdate TypesUpdateOperation = "update"
)

// for schema
var typesUpdateOperationEnum []interface{}

func init() {
	var res []TypesUpdateOperation
	if err := json.Unmarshal([]byte(`["delete","update"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		typesUpdateOperationEnum = append(typesUpdateOperationEnum, v)
	}
}

func (m TypesUpdateOperation) validateTypesUpdateOperationEnum(path, location string, value TypesUpdateOperation) error {
	if err := validate.EnumCase(path, location, value, typesUpdateOperationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this types update operation
func (m TypesUpdateOperation) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTypesUpdateOperationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this types update operation based on context it is used
func (m TypesUpdateOperation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
