// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1AzureDataDiskCachingMode v1 azure data disk caching mode
//
// swagger:model v1.AzureDataDiskCachingMode
type V1AzureDataDiskCachingMode string

func NewV1AzureDataDiskCachingMode(value V1AzureDataDiskCachingMode) *V1AzureDataDiskCachingMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1AzureDataDiskCachingMode.
func (m V1AzureDataDiskCachingMode) Pointer() *V1AzureDataDiskCachingMode {
	return &m
}

const (

	// V1AzureDataDiskCachingModeNone captures enum value "None"
	V1AzureDataDiskCachingModeNone V1AzureDataDiskCachingMode = "None"

	// V1AzureDataDiskCachingModeReadOnly captures enum value "ReadOnly"
	V1AzureDataDiskCachingModeReadOnly V1AzureDataDiskCachingMode = "ReadOnly"

	// V1AzureDataDiskCachingModeReadWrite captures enum value "ReadWrite"
	V1AzureDataDiskCachingModeReadWrite V1AzureDataDiskCachingMode = "ReadWrite"
)

// for schema
var v1AzureDataDiskCachingModeEnum []interface{}

func init() {
	var res []V1AzureDataDiskCachingMode
	if err := json.Unmarshal([]byte(`["None","ReadOnly","ReadWrite"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1AzureDataDiskCachingModeEnum = append(v1AzureDataDiskCachingModeEnum, v)
	}
}

func (m V1AzureDataDiskCachingMode) validateV1AzureDataDiskCachingModeEnum(path, location string, value V1AzureDataDiskCachingMode) error {
	if err := validate.EnumCase(path, location, value, v1AzureDataDiskCachingModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 azure data disk caching mode
func (m V1AzureDataDiskCachingMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1AzureDataDiskCachingModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 azure data disk caching mode based on context it is used
func (m V1AzureDataDiskCachingMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
