// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1AzureDiskVolumeSource v1 azure disk volume source
//
// swagger:model v1.AzureDiskVolumeSource
type V1AzureDiskVolumeSource struct {

	// Host Caching mode: None, Read Only, Read Write.
	// +optional
	CachingMode struct {
		V1AzureDataDiskCachingMode
	} `json:"cachingMode,omitempty"`

	// The Name of the data disk in the blob storage
	DiskName string `json:"diskName,omitempty"`

	// The URI the data disk in the blob storage
	DiskURI string `json:"diskURI,omitempty"`

	// Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// +optional
	FsType string `json:"fsType,omitempty"`

	// Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind struct {
		V1AzureDataDiskKind
	} `json:"kind,omitempty"`

	// Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	// +optional
	ReadOnly bool `json:"readOnly,omitempty"`
}

// Validate validates this v1 azure disk volume source
func (m *V1AzureDiskVolumeSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCachingMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKind(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AzureDiskVolumeSource) validateCachingMode(formats strfmt.Registry) error {
	if swag.IsZero(m.CachingMode) { // not required
		return nil
	}

	return nil
}

func (m *V1AzureDiskVolumeSource) validateKind(formats strfmt.Registry) error {
	if swag.IsZero(m.Kind) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this v1 azure disk volume source based on the context it is used
func (m *V1AzureDiskVolumeSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCachingMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKind(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1AzureDiskVolumeSource) contextValidateCachingMode(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *V1AzureDiskVolumeSource) contextValidateKind(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *V1AzureDiskVolumeSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1AzureDiskVolumeSource) UnmarshalBinary(b []byte) error {
	var res V1AzureDiskVolumeSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
