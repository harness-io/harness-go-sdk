// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1EnvVarSource v1 env var source
//
// swagger:model v1.EnvVarSource
type V1EnvVarSource struct {

	// Selects a key of a ConfigMap.
	// +optional
	ConfigMapKeyRef struct {
		V1ConfigMapKeySelector
	} `json:"configMapKeyRef,omitempty"`

	// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
	// spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
	// +optional
	FieldRef struct {
		V1ObjectFieldSelector
	} `json:"fieldRef,omitempty"`

	// Selects a resource of the container: only resources limits and requests
	// (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
	// +optional
	ResourceFieldRef struct {
		V1ResourceFieldSelector
	} `json:"resourceFieldRef,omitempty"`

	// Selects a key of a secret in the pod's namespace
	// +optional
	SecretKeyRef struct {
		V1SecretKeySelector
	} `json:"secretKeyRef,omitempty"`
}

// Validate validates this v1 env var source
func (m *V1EnvVarSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigMapKeyRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceFieldRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretKeyRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EnvVarSource) validateConfigMapKeyRef(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigMapKeyRef) { // not required
		return nil
	}

	return nil
}

func (m *V1EnvVarSource) validateFieldRef(formats strfmt.Registry) error {
	if swag.IsZero(m.FieldRef) { // not required
		return nil
	}

	return nil
}

func (m *V1EnvVarSource) validateResourceFieldRef(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceFieldRef) { // not required
		return nil
	}

	return nil
}

func (m *V1EnvVarSource) validateSecretKeyRef(formats strfmt.Registry) error {
	if swag.IsZero(m.SecretKeyRef) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this v1 env var source based on the context it is used
func (m *V1EnvVarSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfigMapKeyRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFieldRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceFieldRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecretKeyRef(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EnvVarSource) contextValidateConfigMapKeyRef(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *V1EnvVarSource) contextValidateFieldRef(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *V1EnvVarSource) contextValidateResourceFieldRef(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *V1EnvVarSource) contextValidateSecretKeyRef(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *V1EnvVarSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EnvVarSource) UnmarshalBinary(b []byte) error {
	var res V1EnvVarSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
