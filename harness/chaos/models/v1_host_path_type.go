// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1HostPathType v1 host path type
//
// swagger:model v1.HostPathType
type V1HostPathType string

func NewV1HostPathType(value V1HostPathType) *V1HostPathType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1HostPathType.
func (m V1HostPathType) Pointer() *V1HostPathType {
	return &m
}

const (

	// V1HostPathTypeEmpty captures enum value ""
	V1HostPathTypeEmpty V1HostPathType = ""

	// V1HostPathTypeDirectoryOrCreate captures enum value "DirectoryOrCreate"
	V1HostPathTypeDirectoryOrCreate V1HostPathType = "DirectoryOrCreate"

	// V1HostPathTypeDirectory captures enum value "Directory"
	V1HostPathTypeDirectory V1HostPathType = "Directory"

	// V1HostPathTypeFileOrCreate captures enum value "FileOrCreate"
	V1HostPathTypeFileOrCreate V1HostPathType = "FileOrCreate"

	// V1HostPathTypeFile captures enum value "File"
	V1HostPathTypeFile V1HostPathType = "File"

	// V1HostPathTypeSocket captures enum value "Socket"
	V1HostPathTypeSocket V1HostPathType = "Socket"

	// V1HostPathTypeCharDevice captures enum value "CharDevice"
	V1HostPathTypeCharDevice V1HostPathType = "CharDevice"

	// V1HostPathTypeBlockDevice captures enum value "BlockDevice"
	V1HostPathTypeBlockDevice V1HostPathType = "BlockDevice"
)

// for schema
var v1HostPathTypeEnum []interface{}

func init() {
	var res []V1HostPathType
	if err := json.Unmarshal([]byte(`["","DirectoryOrCreate","Directory","FileOrCreate","File","Socket","CharDevice","BlockDevice"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1HostPathTypeEnum = append(v1HostPathTypeEnum, v)
	}
}

func (m V1HostPathType) validateV1HostPathTypeEnum(path, location string, value V1HostPathType) error {
	if err := validate.EnumCase(path, location, value, v1HostPathTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 host path type
func (m V1HostPathType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1HostPathTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 host path type based on context it is used
func (m V1HostPathType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
