// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1IPFamilyPolicyType v1 IP family policy type
//
// swagger:model v1.IPFamilyPolicyType
type V1IPFamilyPolicyType string

func NewV1IPFamilyPolicyType(value V1IPFamilyPolicyType) *V1IPFamilyPolicyType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1IPFamilyPolicyType.
func (m V1IPFamilyPolicyType) Pointer() *V1IPFamilyPolicyType {
	return &m
}

const (

	// V1IPFamilyPolicyTypeSingleStack captures enum value "SingleStack"
	V1IPFamilyPolicyTypeSingleStack V1IPFamilyPolicyType = "SingleStack"

	// V1IPFamilyPolicyTypePreferDualStack captures enum value "PreferDualStack"
	V1IPFamilyPolicyTypePreferDualStack V1IPFamilyPolicyType = "PreferDualStack"

	// V1IPFamilyPolicyTypeRequireDualStack captures enum value "RequireDualStack"
	V1IPFamilyPolicyTypeRequireDualStack V1IPFamilyPolicyType = "RequireDualStack"
)

// for schema
var v1IpFamilyPolicyTypeEnum []interface{}

func init() {
	var res []V1IPFamilyPolicyType
	if err := json.Unmarshal([]byte(`["SingleStack","PreferDualStack","RequireDualStack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1IpFamilyPolicyTypeEnum = append(v1IpFamilyPolicyTypeEnum, v)
	}
}

func (m V1IPFamilyPolicyType) validateV1IPFamilyPolicyTypeEnum(path, location string, value V1IPFamilyPolicyType) error {
	if err := validate.EnumCase(path, location, value, v1IpFamilyPolicyTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 IP family policy type
func (m V1IPFamilyPolicyType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1IPFamilyPolicyTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 IP family policy type based on context it is used
func (m V1IPFamilyPolicyType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
