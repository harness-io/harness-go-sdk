// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1LabelSelectorOperator v1 label selector operator
//
// swagger:model v1.LabelSelectorOperator
type V1LabelSelectorOperator string

func NewV1LabelSelectorOperator(value V1LabelSelectorOperator) *V1LabelSelectorOperator {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1LabelSelectorOperator.
func (m V1LabelSelectorOperator) Pointer() *V1LabelSelectorOperator {
	return &m
}

const (

	// V1LabelSelectorOperatorIn captures enum value "In"
	V1LabelSelectorOperatorIn V1LabelSelectorOperator = "In"

	// V1LabelSelectorOperatorNotIn captures enum value "NotIn"
	V1LabelSelectorOperatorNotIn V1LabelSelectorOperator = "NotIn"

	// V1LabelSelectorOperatorExists captures enum value "Exists"
	V1LabelSelectorOperatorExists V1LabelSelectorOperator = "Exists"

	// V1LabelSelectorOperatorDoesNotExist captures enum value "DoesNotExist"
	V1LabelSelectorOperatorDoesNotExist V1LabelSelectorOperator = "DoesNotExist"
)

// for schema
var v1LabelSelectorOperatorEnum []interface{}

func init() {
	var res []V1LabelSelectorOperator
	if err := json.Unmarshal([]byte(`["In","NotIn","Exists","DoesNotExist"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1LabelSelectorOperatorEnum = append(v1LabelSelectorOperatorEnum, v)
	}
}

func (m V1LabelSelectorOperator) validateV1LabelSelectorOperatorEnum(path, location string, value V1LabelSelectorOperator) error {
	if err := validate.EnumCase(path, location, value, v1LabelSelectorOperatorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 label selector operator
func (m V1LabelSelectorOperator) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1LabelSelectorOperatorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 label selector operator based on context it is used
func (m V1LabelSelectorOperator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
