// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1ManagedFieldsOperationType v1 managed fields operation type
//
// swagger:model v1.ManagedFieldsOperationType
type V1ManagedFieldsOperationType string

func NewV1ManagedFieldsOperationType(value V1ManagedFieldsOperationType) *V1ManagedFieldsOperationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1ManagedFieldsOperationType.
func (m V1ManagedFieldsOperationType) Pointer() *V1ManagedFieldsOperationType {
	return &m
}

const (

	// V1ManagedFieldsOperationTypeApply captures enum value "Apply"
	V1ManagedFieldsOperationTypeApply V1ManagedFieldsOperationType = "Apply"

	// V1ManagedFieldsOperationTypeUpdate captures enum value "Update"
	V1ManagedFieldsOperationTypeUpdate V1ManagedFieldsOperationType = "Update"
)

// for schema
var v1ManagedFieldsOperationTypeEnum []interface{}

func init() {
	var res []V1ManagedFieldsOperationType
	if err := json.Unmarshal([]byte(`["Apply","Update"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ManagedFieldsOperationTypeEnum = append(v1ManagedFieldsOperationTypeEnum, v)
	}
}

func (m V1ManagedFieldsOperationType) validateV1ManagedFieldsOperationTypeEnum(path, location string, value V1ManagedFieldsOperationType) error {
	if err := validate.EnumCase(path, location, value, v1ManagedFieldsOperationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 managed fields operation type
func (m V1ManagedFieldsOperationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ManagedFieldsOperationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 managed fields operation type based on context it is used
func (m V1ManagedFieldsOperationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
