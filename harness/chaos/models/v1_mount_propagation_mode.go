// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1MountPropagationMode v1 mount propagation mode
//
// swagger:model v1.MountPropagationMode
type V1MountPropagationMode string

func NewV1MountPropagationMode(value V1MountPropagationMode) *V1MountPropagationMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1MountPropagationMode.
func (m V1MountPropagationMode) Pointer() *V1MountPropagationMode {
	return &m
}

const (

	// V1MountPropagationModeNone captures enum value "None"
	V1MountPropagationModeNone V1MountPropagationMode = "None"

	// V1MountPropagationModeHostToContainer captures enum value "HostToContainer"
	V1MountPropagationModeHostToContainer V1MountPropagationMode = "HostToContainer"

	// V1MountPropagationModeBidirectional captures enum value "Bidirectional"
	V1MountPropagationModeBidirectional V1MountPropagationMode = "Bidirectional"
)

// for schema
var v1MountPropagationModeEnum []interface{}

func init() {
	var res []V1MountPropagationMode
	if err := json.Unmarshal([]byte(`["None","HostToContainer","Bidirectional"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1MountPropagationModeEnum = append(v1MountPropagationModeEnum, v)
	}
}

func (m V1MountPropagationMode) validateV1MountPropagationModeEnum(path, location string, value V1MountPropagationMode) error {
	if err := validate.EnumCase(path, location, value, v1MountPropagationModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 mount propagation mode
func (m V1MountPropagationMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1MountPropagationModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 mount propagation mode based on context it is used
func (m V1MountPropagationMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
