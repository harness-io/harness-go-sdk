// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1PersistentVolumeAccessMode v1 persistent volume access mode
//
// swagger:model v1.PersistentVolumeAccessMode
type V1PersistentVolumeAccessMode string

func NewV1PersistentVolumeAccessMode(value V1PersistentVolumeAccessMode) *V1PersistentVolumeAccessMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1PersistentVolumeAccessMode.
func (m V1PersistentVolumeAccessMode) Pointer() *V1PersistentVolumeAccessMode {
	return &m
}

const (

	// V1PersistentVolumeAccessModeReadWriteOnce captures enum value "ReadWriteOnce"
	V1PersistentVolumeAccessModeReadWriteOnce V1PersistentVolumeAccessMode = "ReadWriteOnce"

	// V1PersistentVolumeAccessModeReadOnlyMany captures enum value "ReadOnlyMany"
	V1PersistentVolumeAccessModeReadOnlyMany V1PersistentVolumeAccessMode = "ReadOnlyMany"

	// V1PersistentVolumeAccessModeReadWriteMany captures enum value "ReadWriteMany"
	V1PersistentVolumeAccessModeReadWriteMany V1PersistentVolumeAccessMode = "ReadWriteMany"
)

// for schema
var v1PersistentVolumeAccessModeEnum []interface{}

func init() {
	var res []V1PersistentVolumeAccessMode
	if err := json.Unmarshal([]byte(`["ReadWriteOnce","ReadOnlyMany","ReadWriteMany"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1PersistentVolumeAccessModeEnum = append(v1PersistentVolumeAccessModeEnum, v)
	}
}

func (m V1PersistentVolumeAccessMode) validateV1PersistentVolumeAccessModeEnum(path, location string, value V1PersistentVolumeAccessMode) error {
	if err := validate.EnumCase(path, location, value, v1PersistentVolumeAccessModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 persistent volume access mode
func (m V1PersistentVolumeAccessMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1PersistentVolumeAccessModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 persistent volume access mode based on context it is used
func (m V1PersistentVolumeAccessMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
