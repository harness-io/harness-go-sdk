// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1PersistentVolumeClaimTemplate v1 persistent volume claim template
//
// swagger:model v1.PersistentVolumeClaimTemplate
type V1PersistentVolumeClaimTemplate struct {

	// May contain labels and annotations that will be copied into the PVC
	// when creating it. No other fields are allowed and will be rejected during
	// validation.
	//
	// +optional
	Metadata struct {
		V1ObjectMeta
	} `json:"metadata,omitempty"`

	// The specification for the PersistentVolumeClaim. The entire content is
	// copied unchanged into the PVC that gets created from this
	// template. The same fields as in a PersistentVolumeClaim
	// are also valid here.
	Spec struct {
		V1PersistentVolumeClaimSpec
	} `json:"spec,omitempty"`
}

// Validate validates this v1 persistent volume claim template
func (m *V1PersistentVolumeClaimTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PersistentVolumeClaimTemplate) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	return nil
}

func (m *V1PersistentVolumeClaimTemplate) validateSpec(formats strfmt.Registry) error {
	if swag.IsZero(m.Spec) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this v1 persistent volume claim template based on the context it is used
func (m *V1PersistentVolumeClaimTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1PersistentVolumeClaimTemplate) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *V1PersistentVolumeClaimTemplate) contextValidateSpec(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *V1PersistentVolumeClaimTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1PersistentVolumeClaimTemplate) UnmarshalBinary(b []byte) error {
	var res V1PersistentVolumeClaimTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
