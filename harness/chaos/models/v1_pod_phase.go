// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1PodPhase v1 pod phase
//
// swagger:model v1.PodPhase
type V1PodPhase string

func NewV1PodPhase(value V1PodPhase) *V1PodPhase {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1PodPhase.
func (m V1PodPhase) Pointer() *V1PodPhase {
	return &m
}

const (

	// V1PodPhasePending captures enum value "Pending"
	V1PodPhasePending V1PodPhase = "Pending"

	// V1PodPhaseRunning captures enum value "Running"
	V1PodPhaseRunning V1PodPhase = "Running"

	// V1PodPhaseSucceeded captures enum value "Succeeded"
	V1PodPhaseSucceeded V1PodPhase = "Succeeded"

	// V1PodPhaseFailed captures enum value "Failed"
	V1PodPhaseFailed V1PodPhase = "Failed"

	// V1PodPhaseUnknown captures enum value "Unknown"
	V1PodPhaseUnknown V1PodPhase = "Unknown"
)

// for schema
var v1PodPhaseEnum []interface{}

func init() {
	var res []V1PodPhase
	if err := json.Unmarshal([]byte(`["Pending","Running","Succeeded","Failed","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1PodPhaseEnum = append(v1PodPhaseEnum, v)
	}
}

func (m V1PodPhase) validateV1PodPhaseEnum(path, location string, value V1PodPhase) error {
	if err := validate.EnumCase(path, location, value, v1PodPhaseEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 pod phase
func (m V1PodPhase) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1PodPhaseEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 pod phase based on context it is used
func (m V1PodPhase) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
