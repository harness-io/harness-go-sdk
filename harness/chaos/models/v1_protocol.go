// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1Protocol v1 protocol
//
// swagger:model v1.Protocol
type V1Protocol string

func NewV1Protocol(value V1Protocol) *V1Protocol {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1Protocol.
func (m V1Protocol) Pointer() *V1Protocol {
	return &m
}

const (

	// V1ProtocolTCP captures enum value "TCP"
	V1ProtocolTCP V1Protocol = "TCP"

	// V1ProtocolUDP captures enum value "UDP"
	V1ProtocolUDP V1Protocol = "UDP"

	// V1ProtocolSCTP captures enum value "SCTP"
	V1ProtocolSCTP V1Protocol = "SCTP"
)

// for schema
var v1ProtocolEnum []interface{}

func init() {
	var res []V1Protocol
	if err := json.Unmarshal([]byte(`["TCP","UDP","SCTP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ProtocolEnum = append(v1ProtocolEnum, v)
	}
}

func (m V1Protocol) validateV1ProtocolEnum(path, location string, value V1Protocol) error {
	if err := validate.EnumCase(path, location, value, v1ProtocolEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 protocol
func (m V1Protocol) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ProtocolEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 protocol based on context it is used
func (m V1Protocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
