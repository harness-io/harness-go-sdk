// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1PullPolicy v1 pull policy
//
// swagger:model v1.PullPolicy
type V1PullPolicy string

func NewV1PullPolicy(value V1PullPolicy) *V1PullPolicy {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1PullPolicy.
func (m V1PullPolicy) Pointer() *V1PullPolicy {
	return &m
}

const (

	// V1PullPolicyAlways captures enum value "Always"
	V1PullPolicyAlways V1PullPolicy = "Always"

	// V1PullPolicyNever captures enum value "Never"
	V1PullPolicyNever V1PullPolicy = "Never"

	// V1PullPolicyIfNotPresent captures enum value "IfNotPresent"
	V1PullPolicyIfNotPresent V1PullPolicy = "IfNotPresent"
)

// for schema
var v1PullPolicyEnum []interface{}

func init() {
	var res []V1PullPolicy
	if err := json.Unmarshal([]byte(`["Always","Never","IfNotPresent"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1PullPolicyEnum = append(v1PullPolicyEnum, v)
	}
}

func (m V1PullPolicy) validateV1PullPolicyEnum(path, location string, value V1PullPolicy) error {
	if err := validate.EnumCase(path, location, value, v1PullPolicyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 pull policy
func (m V1PullPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1PullPolicyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 pull policy based on context it is used
func (m V1PullPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
