// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1ServiceType v1 service type
//
// swagger:model v1.ServiceType
type V1ServiceType string

func NewV1ServiceType(value V1ServiceType) *V1ServiceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1ServiceType.
func (m V1ServiceType) Pointer() *V1ServiceType {
	return &m
}

const (

	// V1ServiceTypeClusterIP captures enum value "ClusterIP"
	V1ServiceTypeClusterIP V1ServiceType = "ClusterIP"

	// V1ServiceTypeNodePort captures enum value "NodePort"
	V1ServiceTypeNodePort V1ServiceType = "NodePort"

	// V1ServiceTypeLoadBalancer captures enum value "LoadBalancer"
	V1ServiceTypeLoadBalancer V1ServiceType = "LoadBalancer"

	// V1ServiceTypeExternalName captures enum value "ExternalName"
	V1ServiceTypeExternalName V1ServiceType = "ExternalName"
)

// for schema
var v1ServiceTypeEnum []interface{}

func init() {
	var res []V1ServiceType
	if err := json.Unmarshal([]byte(`["ClusterIP","NodePort","LoadBalancer","ExternalName"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1ServiceTypeEnum = append(v1ServiceTypeEnum, v)
	}
}

func (m V1ServiceType) validateV1ServiceTypeEnum(path, location string, value V1ServiceType) error {
	if err := validate.EnumCase(path, location, value, v1ServiceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 service type
func (m V1ServiceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1ServiceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 service type based on context it is used
func (m V1ServiceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
