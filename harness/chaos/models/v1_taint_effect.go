// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1TaintEffect v1 taint effect
//
// swagger:model v1.TaintEffect
type V1TaintEffect string

func NewV1TaintEffect(value V1TaintEffect) *V1TaintEffect {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1TaintEffect.
func (m V1TaintEffect) Pointer() *V1TaintEffect {
	return &m
}

const (

	// V1TaintEffectNoSchedule captures enum value "NoSchedule"
	V1TaintEffectNoSchedule V1TaintEffect = "NoSchedule"

	// V1TaintEffectPreferNoSchedule captures enum value "PreferNoSchedule"
	V1TaintEffectPreferNoSchedule V1TaintEffect = "PreferNoSchedule"

	// V1TaintEffectNoExecute captures enum value "NoExecute"
	V1TaintEffectNoExecute V1TaintEffect = "NoExecute"
)

// for schema
var v1TaintEffectEnum []interface{}

func init() {
	var res []V1TaintEffect
	if err := json.Unmarshal([]byte(`["NoSchedule","PreferNoSchedule","NoExecute"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1TaintEffectEnum = append(v1TaintEffectEnum, v)
	}
}

func (m V1TaintEffect) validateV1TaintEffectEnum(path, location string, value V1TaintEffect) error {
	if err := validate.EnumCase(path, location, value, v1TaintEffectEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 taint effect
func (m V1TaintEffect) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1TaintEffectEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 taint effect based on context it is used
func (m V1TaintEffect) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
