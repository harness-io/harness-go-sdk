// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1TolerationOperator v1 toleration operator
//
// swagger:model v1.TolerationOperator
type V1TolerationOperator string

func NewV1TolerationOperator(value V1TolerationOperator) *V1TolerationOperator {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V1TolerationOperator.
func (m V1TolerationOperator) Pointer() *V1TolerationOperator {
	return &m
}

const (

	// V1TolerationOperatorExists captures enum value "Exists"
	V1TolerationOperatorExists V1TolerationOperator = "Exists"

	// V1TolerationOperatorEqual captures enum value "Equal"
	V1TolerationOperatorEqual V1TolerationOperator = "Equal"
)

// for schema
var v1TolerationOperatorEnum []interface{}

func init() {
	var res []V1TolerationOperator
	if err := json.Unmarshal([]byte(`["Exists","Equal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1TolerationOperatorEnum = append(v1TolerationOperatorEnum, v)
	}
}

func (m V1TolerationOperator) validateV1TolerationOperatorEnum(path, location string, value V1TolerationOperator) error {
	if err := validate.EnumCase(path, location, value, v1TolerationOperatorEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 toleration operator
func (m V1TolerationOperator) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1TolerationOperatorEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v1 toleration operator based on context it is used
func (m V1TolerationOperator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
