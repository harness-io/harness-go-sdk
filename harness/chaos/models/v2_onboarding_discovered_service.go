// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2OnboardingDiscoveredService v2 onboarding discovered service
//
// swagger:model v2_onboarding.DiscoveredService
type V2OnboardingDiscoveredService struct {

	// agent details
	AgentDetails *V2OnboardingAgentData `json:"agentDetails,omitempty"`

	// completed agent count
	CompletedAgentCount int64 `json:"completedAgentCount,omitempty"`

	// discovered service count
	DiscoveredServiceCount int64 `json:"discoveredServiceCount,omitempty"`

	// errored agent count
	ErroredAgentCount int64 `json:"erroredAgentCount,omitempty"`

	// is tracing enabled
	IsTracingEnabled bool `json:"isTracingEnabled,omitempty"`

	// pending agent count
	PendingAgentCount int64 `json:"pendingAgentCount,omitempty"`

	// s d agent ID
	SDAgentID string `json:"sDAgentID,omitempty"`

	// s d agent identity
	SDAgentIdentity string `json:"sDAgentIdentity,omitempty"`

	// status
	Status V2OnboardingV2OnboardingStatus `json:"status,omitempty"`

	// total agent count
	TotalAgentCount int64 `json:"totalAgentCount,omitempty"`
}

// Validate validates this v2 onboarding discovered service
func (m *V2OnboardingDiscoveredService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2OnboardingDiscoveredService) validateAgentDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentDetails) { // not required
		return nil
	}

	if m.AgentDetails != nil {
		if err := m.AgentDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentDetails")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingDiscoveredService) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this v2 onboarding discovered service based on the context it is used
func (m *V2OnboardingDiscoveredService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAgentDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2OnboardingDiscoveredService) contextValidateAgentDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.AgentDetails != nil {

		if swag.IsZero(m.AgentDetails) { // not required
			return nil
		}

		if err := m.AgentDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("agentDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("agentDetails")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingDiscoveredService) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2OnboardingDiscoveredService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2OnboardingDiscoveredService) UnmarshalBinary(b []byte) error {
	var res V2OnboardingDiscoveredService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
