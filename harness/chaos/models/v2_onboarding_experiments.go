// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2OnboardingExperiments v2 onboarding experiments
//
// swagger:model v2_onboarding.Experiments
type V2OnboardingExperiments struct {

	// category
	Category string `json:"category,omitempty"`

	// delegate task Id
	DelegateTaskID string `json:"delegateTaskId,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// experiment ID
	ExperimentID string `json:"experimentID,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// notify ID
	NotifyID string `json:"notifyID,omitempty"`

	// status
	Status ModelWorkflowRunStatus `json:"status,omitempty"`

	// target network map ID
	TargetNetworkMapID string `json:"targetNetworkMapID,omitempty"`

	// target network map name
	TargetNetworkMapName string `json:"targetNetworkMapName,omitempty"`

	// target services
	TargetServices []*V2OnboardingTargetServiceDetails `json:"targetServices"`
}

// Validate validates this v2 onboarding experiments
func (m *V2OnboardingExperiments) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2OnboardingExperiments) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *V2OnboardingExperiments) validateTargetServices(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetServices) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetServices); i++ {
		if swag.IsZero(m.TargetServices[i]) { // not required
			continue
		}

		if m.TargetServices[i] != nil {
			if err := m.TargetServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targetServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("targetServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v2 onboarding experiments based on the context it is used
func (m *V2OnboardingExperiments) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2OnboardingExperiments) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *V2OnboardingExperiments) contextValidateTargetServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TargetServices); i++ {

		if m.TargetServices[i] != nil {

			if swag.IsZero(m.TargetServices[i]) { // not required
				return nil
			}

			if err := m.TargetServices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targetServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("targetServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2OnboardingExperiments) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2OnboardingExperiments) UnmarshalBinary(b []byte) error {
	var res V2OnboardingExperiments
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
