// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V2OnboardingNetworkMapCreationMode v2 onboarding network map creation mode
//
// swagger:model v2_onboarding.NetworkMapCreationMode
type V2OnboardingNetworkMapCreationMode string

func NewV2OnboardingNetworkMapCreationMode(value V2OnboardingNetworkMapCreationMode) *V2OnboardingNetworkMapCreationMode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated V2OnboardingNetworkMapCreationMode.
func (m V2OnboardingNetworkMapCreationMode) Pointer() *V2OnboardingNetworkMapCreationMode {
	return &m
}

const (

	// V2OnboardingNetworkMapCreationModeManual captures enum value "Manual"
	V2OnboardingNetworkMapCreationModeManual V2OnboardingNetworkMapCreationMode = "Manual"

	// V2OnboardingNetworkMapCreationModeAutomatic captures enum value "Automatic"
	V2OnboardingNetworkMapCreationModeAutomatic V2OnboardingNetworkMapCreationMode = "Automatic"
)

// for schema
var v2OnboardingNetworkMapCreationModeEnum []interface{}

func init() {
	var res []V2OnboardingNetworkMapCreationMode
	if err := json.Unmarshal([]byte(`["Manual","Automatic"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v2OnboardingNetworkMapCreationModeEnum = append(v2OnboardingNetworkMapCreationModeEnum, v)
	}
}

func (m V2OnboardingNetworkMapCreationMode) validateV2OnboardingNetworkMapCreationModeEnum(path, location string, value V2OnboardingNetworkMapCreationMode) error {
	if err := validate.EnumCase(path, location, value, v2OnboardingNetworkMapCreationModeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v2 onboarding network map creation mode
func (m V2OnboardingNetworkMapCreationMode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV2OnboardingNetworkMapCreationModeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this v2 onboarding network map creation mode based on context it is used
func (m V2OnboardingNetworkMapCreationMode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
