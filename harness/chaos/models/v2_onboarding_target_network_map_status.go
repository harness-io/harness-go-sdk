// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2OnboardingTargetNetworkMapStatus v2 onboarding target network map status
//
// swagger:model v2_onboarding.TargetNetworkMapStatus
type V2OnboardingTargetNetworkMapStatus struct {

	// status
	Status V2OnboardingV2OnboardingStatus `json:"status,omitempty"`

	// target network map status
	TargetNetworkMapStatus map[string]TargetnetworkmapStatus `json:"targetNetworkMapStatus,omitempty"`

	// total target network maps
	TotalTargetNetworkMaps int64 `json:"totalTargetNetworkMaps,omitempty"`

	// total target network maps experiments
	TotalTargetNetworkMapsExperiments int64 `json:"totalTargetNetworkMapsExperiments,omitempty"`
}

// Validate validates this v2 onboarding target network map status
func (m *V2OnboardingTargetNetworkMapStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetNetworkMapStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2OnboardingTargetNetworkMapStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *V2OnboardingTargetNetworkMapStatus) validateTargetNetworkMapStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetNetworkMapStatus) { // not required
		return nil
	}

	for k := range m.TargetNetworkMapStatus {

		if val, ok := m.TargetNetworkMapStatus[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targetNetworkMapStatus" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("targetNetworkMapStatus" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this v2 onboarding target network map status based on the context it is used
func (m *V2OnboardingTargetNetworkMapStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetNetworkMapStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2OnboardingTargetNetworkMapStatus) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *V2OnboardingTargetNetworkMapStatus) contextValidateTargetNetworkMapStatus(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.TargetNetworkMapStatus {

		if val, ok := m.TargetNetworkMapStatus[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2OnboardingTargetNetworkMapStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2OnboardingTargetNetworkMapStatus) UnmarshalBinary(b []byte) error {
	var res V2OnboardingTargetNetworkMapStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
