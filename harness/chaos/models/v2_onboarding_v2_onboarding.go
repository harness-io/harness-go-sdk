// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V2OnboardingV2Onboarding v2 onboarding v2 onboarding
//
// swagger:model v2_onboarding.V2Onboarding
type V2OnboardingV2Onboarding struct {

	// account ID
	AccountID string `json:"accountID,omitempty"`

	// auto create network map status
	AutoCreateNetworkMapStatus *V2OnboardingAutoCreatedNetworkMapStatus `json:"autoCreateNetworkMapStatus,omitempty"`

	// chaos advance configuration
	ChaosAdvanceConfiguration *V2OnboardingChaosInfraAdvanceConfiguration `json:"chaosAdvanceConfiguration,omitempty"`

	// created at
	CreatedAt int64 `json:"createdAt,omitempty"`

	// created by
	CreatedBy string `json:"createdBy,omitempty"`

	// ddci ID
	DdciID string `json:"ddciID,omitempty"`

	// discovered service status
	DiscoveredServiceStatus *V2OnboardingDiscoveredService `json:"discoveredServiceStatus,omitempty"`

	// discovery advance configuration
	DiscoveryAdvanceConfiguration *DatabaseAgentConfiguration `json:"discoveryAdvanceConfiguration,omitempty"`

	// environment ref
	EnvironmentRef string `json:"environmentRef,omitempty"`

	// infrastructure ref
	InfrastructureRef string `json:"infrastructureRef,omitempty"`

	// is removed
	IsRemoved bool `json:"isRemoved,omitempty"`

	// mode
	Mode V2OnboardingOnboardingMode `json:"mode,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// onboarding ID
	OnboardingID string `json:"onboardingID,omitempty"`

	// org ID
	OrgID string `json:"orgID,omitempty"`

	// project ID
	ProjectID string `json:"projectID,omitempty"`

	// run safe experiment status
	RunSafeExperimentStatus *V2OnboardingRunSafeExperimentStatus `json:"runSafeExperimentStatus,omitempty"`

	// service account
	ServiceAccount string `json:"serviceAccount,omitempty"`

	// status
	Status V2OnboardingV2OnboardingStatus `json:"status,omitempty"`

	// target network map status
	TargetNetworkMapStatus *V2OnboardingTargetNetworkMapStatus `json:"targetNetworkMapStatus,omitempty"`

	// updated at
	UpdatedAt int64 `json:"updatedAt,omitempty"`

	// updated by
	UpdatedBy string `json:"updatedBy,omitempty"`
}

// Validate validates this v2 onboarding v2 onboarding
func (m *V2OnboardingV2Onboarding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoCreateNetworkMapStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChaosAdvanceConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscoveredServiceStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscoveryAdvanceConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunSafeExperimentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetNetworkMapStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2OnboardingV2Onboarding) validateAutoCreateNetworkMapStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoCreateNetworkMapStatus) { // not required
		return nil
	}

	if m.AutoCreateNetworkMapStatus != nil {
		if err := m.AutoCreateNetworkMapStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoCreateNetworkMapStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoCreateNetworkMapStatus")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingV2Onboarding) validateChaosAdvanceConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.ChaosAdvanceConfiguration) { // not required
		return nil
	}

	if m.ChaosAdvanceConfiguration != nil {
		if err := m.ChaosAdvanceConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chaosAdvanceConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chaosAdvanceConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingV2Onboarding) validateDiscoveredServiceStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.DiscoveredServiceStatus) { // not required
		return nil
	}

	if m.DiscoveredServiceStatus != nil {
		if err := m.DiscoveredServiceStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discoveredServiceStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discoveredServiceStatus")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingV2Onboarding) validateDiscoveryAdvanceConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.DiscoveryAdvanceConfiguration) { // not required
		return nil
	}

	if m.DiscoveryAdvanceConfiguration != nil {
		if err := m.DiscoveryAdvanceConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discoveryAdvanceConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discoveryAdvanceConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingV2Onboarding) validateMode(formats strfmt.Registry) error {
	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if err := m.Mode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mode")
		}
		return err
	}

	return nil
}

func (m *V2OnboardingV2Onboarding) validateRunSafeExperimentStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.RunSafeExperimentStatus) { // not required
		return nil
	}

	if m.RunSafeExperimentStatus != nil {
		if err := m.RunSafeExperimentStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runSafeExperimentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runSafeExperimentStatus")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingV2Onboarding) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *V2OnboardingV2Onboarding) validateTargetNetworkMapStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetNetworkMapStatus) { // not required
		return nil
	}

	if m.TargetNetworkMapStatus != nil {
		if err := m.TargetNetworkMapStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetNetworkMapStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetNetworkMapStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v2 onboarding v2 onboarding based on the context it is used
func (m *V2OnboardingV2Onboarding) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutoCreateNetworkMapStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChaosAdvanceConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiscoveredServiceStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiscoveryAdvanceConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunSafeExperimentStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetNetworkMapStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2OnboardingV2Onboarding) contextValidateAutoCreateNetworkMapStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.AutoCreateNetworkMapStatus != nil {

		if swag.IsZero(m.AutoCreateNetworkMapStatus) { // not required
			return nil
		}

		if err := m.AutoCreateNetworkMapStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoCreateNetworkMapStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoCreateNetworkMapStatus")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingV2Onboarding) contextValidateChaosAdvanceConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.ChaosAdvanceConfiguration != nil {

		if swag.IsZero(m.ChaosAdvanceConfiguration) { // not required
			return nil
		}

		if err := m.ChaosAdvanceConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chaosAdvanceConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chaosAdvanceConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingV2Onboarding) contextValidateDiscoveredServiceStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.DiscoveredServiceStatus != nil {

		if swag.IsZero(m.DiscoveredServiceStatus) { // not required
			return nil
		}

		if err := m.DiscoveredServiceStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discoveredServiceStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discoveredServiceStatus")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingV2Onboarding) contextValidateDiscoveryAdvanceConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.DiscoveryAdvanceConfiguration != nil {

		if swag.IsZero(m.DiscoveryAdvanceConfiguration) { // not required
			return nil
		}

		if err := m.DiscoveryAdvanceConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discoveryAdvanceConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discoveryAdvanceConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingV2Onboarding) contextValidateMode(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Mode) { // not required
		return nil
	}

	if err := m.Mode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mode")
		}
		return err
	}

	return nil
}

func (m *V2OnboardingV2Onboarding) contextValidateRunSafeExperimentStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.RunSafeExperimentStatus != nil {

		if swag.IsZero(m.RunSafeExperimentStatus) { // not required
			return nil
		}

		if err := m.RunSafeExperimentStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("runSafeExperimentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("runSafeExperimentStatus")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingV2Onboarding) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *V2OnboardingV2Onboarding) contextValidateTargetNetworkMapStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetNetworkMapStatus != nil {

		if swag.IsZero(m.TargetNetworkMapStatus) { // not required
			return nil
		}

		if err := m.TargetNetworkMapStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetNetworkMapStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetNetworkMapStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2OnboardingV2Onboarding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2OnboardingV2Onboarding) UnmarshalBinary(b []byte) error {
	var res V2OnboardingV2Onboarding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
