// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V2OnboardingV2OnboardingRequest v2 onboarding v2 onboarding request
//
// swagger:model v2_onboarding.V2OnboardingRequest
type V2OnboardingV2OnboardingRequest struct {

	// chaos advance configuration
	ChaosAdvanceConfiguration *V2OnboardingChaosInfraAdvanceConfiguration `json:"chaosAdvanceConfiguration,omitempty"`

	// discovery advance configuration
	DiscoveryAdvanceConfiguration *DatabaseAgentConfiguration `json:"discoveryAdvanceConfiguration,omitempty"`

	// environment ref
	// Required: true
	EnvironmentRef *string `json:"environmentRef"`

	// infrastructure ref
	// Required: true
	InfrastructureRef *string `json:"infrastructureRef"`

	// mode
	// Required: true
	Mode *V2OnboardingOnboardingMode `json:"mode"`

	// service account
	ServiceAccount string `json:"serviceAccount,omitempty"`
}

// Validate validates this v2 onboarding v2 onboarding request
func (m *V2OnboardingV2OnboardingRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChaosAdvanceConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscoveryAdvanceConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfrastructureRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2OnboardingV2OnboardingRequest) validateChaosAdvanceConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.ChaosAdvanceConfiguration) { // not required
		return nil
	}

	if m.ChaosAdvanceConfiguration != nil {
		if err := m.ChaosAdvanceConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chaosAdvanceConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chaosAdvanceConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingV2OnboardingRequest) validateDiscoveryAdvanceConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.DiscoveryAdvanceConfiguration) { // not required
		return nil
	}

	if m.DiscoveryAdvanceConfiguration != nil {
		if err := m.DiscoveryAdvanceConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discoveryAdvanceConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discoveryAdvanceConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingV2OnboardingRequest) validateEnvironmentRef(formats strfmt.Registry) error {

	if err := validate.Required("environmentRef", "body", m.EnvironmentRef); err != nil {
		return err
	}

	return nil
}

func (m *V2OnboardingV2OnboardingRequest) validateInfrastructureRef(formats strfmt.Registry) error {

	if err := validate.Required("infrastructureRef", "body", m.InfrastructureRef); err != nil {
		return err
	}

	return nil
}

func (m *V2OnboardingV2OnboardingRequest) validateMode(formats strfmt.Registry) error {

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	if err := validate.Required("mode", "body", m.Mode); err != nil {
		return err
	}

	if m.Mode != nil {
		if err := m.Mode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v2 onboarding v2 onboarding request based on the context it is used
func (m *V2OnboardingV2OnboardingRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChaosAdvanceConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDiscoveryAdvanceConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V2OnboardingV2OnboardingRequest) contextValidateChaosAdvanceConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.ChaosAdvanceConfiguration != nil {

		if swag.IsZero(m.ChaosAdvanceConfiguration) { // not required
			return nil
		}

		if err := m.ChaosAdvanceConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chaosAdvanceConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chaosAdvanceConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingV2OnboardingRequest) contextValidateDiscoveryAdvanceConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.DiscoveryAdvanceConfiguration != nil {

		if swag.IsZero(m.DiscoveryAdvanceConfiguration) { // not required
			return nil
		}

		if err := m.DiscoveryAdvanceConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("discoveryAdvanceConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("discoveryAdvanceConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *V2OnboardingV2OnboardingRequest) contextValidateMode(ctx context.Context, formats strfmt.Registry) error {

	if m.Mode != nil {

		if err := m.Mode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V2OnboardingV2OnboardingRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V2OnboardingV2OnboardingRequest) UnmarshalBinary(b []byte) error {
	var res V2OnboardingV2OnboardingRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
