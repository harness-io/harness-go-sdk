openapi: 3.0.0
info:
  title: API Specification
  version: 0.0.0
servers:
- url: /api/v1
security:
- bearerAuth: []
paths:
  /admin/users:
    get:
      tags:
      - admin
      operationId: adminListUsers
      parameters:
      - name: sort
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - id
          - email
          - created
          - updated
      - name: order
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
      - name: page
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 1
      - name: limit
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 30
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesUser'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - admin
      operationId: adminCreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiAdminUsersCreateRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /admin/users/{user_uid}:
    get:
      tags:
      - admin
      operationId: adminGetUser
      parameters:
      - name: user_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - admin
      operationId: adminDeleteUser
      parameters:
      - name: user_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - admin
      operationId: adminUpdateUser
      parameters:
      - name: user_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiAdminUsersUpdateRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /admin/users/{user_uid}/admin:
    patch:
      tags:
      - admin
      operationId: updateUserAdmin
      parameters:
      - name: user_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateAdminRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /connectors:
    post:
      tags:
      - connector
      operationId: createConnector
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateConnectorRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesConnector'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /connectors/{connector_ref}:
    get:
      tags:
      - connector
      operationId: findConnector
      parameters:
      - name: connector_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesConnector'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - connector
      operationId: deleteConnector
      parameters:
      - name: connector_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - connector
      operationId: updateConnector
      parameters:
      - name: connector_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateConnectorRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesConnector'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /login:
    post:
      tags:
      - account
      operationId: onLogin
      parameters:
      - name: include_cookie
        in: query
        description: If set to true the token is also returned as a cookie.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiLoginRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTokenResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /logout:
    post:
      tags:
      - account
      operationId: opLogout
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /plugins:
    get:
      tags:
      - plugins
      operationId: listPlugins
      parameters:
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: query
        in: query
        description: The substring which is used to filter the plugins by their name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesPlugin'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /principals:
    get:
      tags:
      - principals
      operationId: listPrincipals
      parameters:
      - name: query
        in: query
        description: The substring by which the principals are filtered.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: type
        in: query
        description: The types of principals to include.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - service
            - serviceaccount
            - user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesPrincipalInfo'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /register:
    post:
      tags:
      - account
      operationId: onRegister
      parameters:
      - name: include_cookie
        in: query
        description: If set to true the token is also returned as a cookie.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiRegisterRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTokenResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos:
    post:
      tags:
      - repository
      operationId: createRepository
      parameters:
      - name: space_path
        in: query
        description: path of parent space (Not needed in standalone).
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "false"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateRepositoryRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}:
    get:
      tags:
      - repository
      operationId: findRepository
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - repository
      operationId: deleteRepository
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - repository
      operationId: updateRepository
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateRepoRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/blame/{path}:
    get:
      tags:
      - repository
      operationId: getBlame
      parameters:
      - name: git_ref
        in: query
        description: The git reference (branch / tag / commitID) that will be used
          to retrieve the data. If no value is provided the default branch of the
          repository is used.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "{Repository Default Branch}"
      - name: line_from
        in: query
        description: Line number from which the file data is considered
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: line_to
        in: query
        description: Line number to which the file data is considered
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: path
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GitBlamePart'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/branches:
    get:
      tags:
      - repository
      operationId: listBranches
      parameters:
      - name: include_commit
        in: query
        description: Indicates whether optional commit information should be included
          in the response.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: query
        in: query
        description: The substring by which the branches are filtered.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: order
        in: query
        description: The order of the output.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: sort
        in: query
        description: The data by which the branches are sorted.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: name
          enum:
          - name
          - date
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepoBranch'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - repository
      operationId: createBranch
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateBranchRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoBranch'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/branches/{branch_name}:
    get:
      tags:
      - repository
      operationId: getBranch
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: branch_name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoBranch'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - repository
      operationId: deleteBranch
      parameters:
      - name: bypass_rules
        in: query
        description: Bypass rule violations if possible.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: branch_name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/checks/commits/{commit_sha}:
    get:
      tags:
      - status_checks
      operationId: listStatusCheckResults
      parameters:
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: query
        in: query
        description: The substring which is used to filter the status checks by their
          UID.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: commit_sha
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesCheck'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    put:
      tags:
      - status_checks
      operationId: reportStatusCheckResults
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: commit_sha
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/commits_commit_sha_body'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCheck'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/checks/recent:
    get:
      tags:
      - status_checks
      operationId: listStatusCheckRecent
      parameters:
      - name: query
        in: query
        description: The substring which is used to filter the status checks by their
          UID.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: since
        in: query
        description: The timestamp (in Unix time millis) since the status checks have
          been run.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/codeowners/validate:
    get:
      tags:
      - repository
      operationId: codeOwnersValidate
      parameters:
      - name: git_ref
        in: query
        description: The git reference (branch / tag / commitID) that will be used
          to retrieve the data. If no value is provided the default branch of the
          repository is used.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "{Repository Default Branch}"
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/commits:
    get:
      tags:
      - repository
      operationId: listCommits
      parameters:
      - name: git_ref
        in: query
        description: The git reference (branch / tag / commitID) that will be used
          to retrieve the data. If no value is provided the default branch of the
          repository is used.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "{Repository Default Branch}"
      - name: after
        in: query
        description: The result should only contain commits that occurred after the
          provided reference.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: path
        in: query
        description: Path for which commit information should be retrieved
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: since
        in: query
        description: Epoch since when commit information should be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: until
        in: query
        description: Epoch until when commit information should be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: committer
        in: query
        description: Committer pattern for which commit information should be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesListCommitResponse'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - repository
      operationId: commitFiles
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommitFilesRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCommitFilesResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/commits/{commit_sha}:
    get:
      tags:
      - repository
      operationId: getCommit
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: commit_sha
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCommit'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/commits/{commit_sha}/diff:
    get:
      tags:
      - repository
      operationId: getCommitDiff
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: commit_sha
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/commits/calculate-divergence:
    post:
      tags:
      - repository
      operationId: calculateCommitDivergence
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCalculateCommitDivergenceRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepoCommitDivergence'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/content/{path}:
    get:
      tags:
      - repository
      operationId: getContent
      parameters:
      - name: git_ref
        in: query
        description: The git reference (branch / tag / commitID) that will be used
          to retrieve the data. If no value is provided the default branch of the
          repository is used.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "{Repository Default Branch}"
      - name: include_commit
        in: query
        description: Indicates whether optional commit information should be included
          in the response.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: path
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiGetContentOutput'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/diff-stats/{range}:
    get:
      tags:
      - repository
      operationId: diffStats
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: range
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: main..dev
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesDiffStats'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/diff/{range}:
    get:
      tags:
      - repository
      operationId: rawDiff
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: range
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: main..dev
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GitFileDiff'
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/merge-check/{range}:
    post:
      tags:
      - repository
      operationId: mergeCheck
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: range
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: main..dev
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoMergeCheck'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/move:
    post:
      tags:
      - repository
      operationId: moveRepository
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMoveRepoRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/path-details:
    post:
      tags:
      - repository
      operationId: pathDetails
      parameters:
      - name: git_ref
        in: query
        description: The git reference (branch / tag / commitID) that will be used
          to retrieve the data. If no value is provided the default branch of the
          repository is used.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "{Repository Default Branch}"
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiPathsDetailsRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoPathsDetailsOutput'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pipelines:
    get:
      tags:
      - pipeline
      operationId: listPipelines
      parameters:
      - name: query
        in: query
        description: The substring which is used to filter the repositories by their
          path name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: latest
        in: query
        description: Whether to fetch latest build information for each pipeline.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesPipeline'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - pipeline
      operationId: createPipeline
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreatePipelineRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPipeline'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pipelines/{pipeline_uid}:
    get:
      tags:
      - pipeline
      operationId: findPipeline
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pipeline_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPipeline'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - pipeline
      operationId: deletePipeline
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pipeline_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - pipeline
      operationId: updatePipeline
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pipeline_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdatePipelineRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPipeline'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pipelines/{pipeline_uid}/executions:
    get:
      tags:
      - pipeline
      operationId: listExecutions
      parameters:
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pipeline_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesExecution'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - pipeline
      operationId: createExecution
      parameters:
      - name: branch
        in: query
        description: Branch to run the execution for.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pipeline_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesExecution'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pipelines/{pipeline_uid}/executions/{execution_number}:
    get:
      tags:
      - pipeline
      operationId: findExecution
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pipeline_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: execution_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesExecution'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - pipeline
      operationId: deleteExecution
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pipeline_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: execution_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pipelines/{pipeline_uid}/executions/{execution_number}/cancel:
    post:
      tags:
      - pipeline
      operationId: cancelExecution
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pipeline_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: execution_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesExecution'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pipelines/{pipeline_uid}/executions/{execution_number}/logs/{stage_number}/{step_number}:
    get:
      tags:
      - pipeline
      operationId: viewLogs
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pipeline_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: execution_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: stage_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: step_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LivelogLine'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pipelines/{pipeline_uid}/triggers:
    get:
      tags:
      - pipeline
      operationId: listTriggers
      parameters:
      - name: query
        in: query
        description: The substring which is used to filter the repositories by their
          path name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pipeline_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesTrigger'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - pipeline
      operationId: createTrigger
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pipeline_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateTriggerRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTrigger'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pipelines/{pipeline_uid}/triggers/{trigger_uid}:
    get:
      tags:
      - pipeline
      operationId: findTrigger
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pipeline_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: trigger_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTrigger'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - pipeline
      operationId: deleteTrigger
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pipeline_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: trigger_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - pipeline
      operationId: updateTrigger
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pipeline_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: trigger_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateTriggerRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTrigger'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pullreq:
    get:
      tags:
      - pullreq
      operationId: listPullReq
      parameters:
      - name: state
        in: query
        description: The state of the pull requests to include in the result.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: open
            enum:
            - closed
            - merged
            - open
      - name: source_repo_ref
        in: query
        description: Source repository ref of the pull requests.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: source_branch
        in: query
        description: Source branch of the pull requests.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: target_branch
        in: query
        description: Target branch of the pull requests.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: query
        in: query
        description: The substring by which the pull requests are filtered.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: created_by
        in: query
        description: The principal ID who created pull requests.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: order
        in: query
        description: The order of the output.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: sort
        in: query
        description: The data by which the pull requests are sorted.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: number
          enum:
          - created
          - edited
          - merged
          - number
          - updated
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesPullReq'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - pullreq
      operationId: createPullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreatePullReqRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pullreq/{pullreq_number}:
    get:
      tags:
      - pullreq
      operationId: getPullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - pullreq
      operationId: updatePullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdatePullReqRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pullreq/{pullreq_number}/activities:
    get:
      tags:
      - pullreq
      operationId: listPullReqActivities
      parameters:
      - name: kind
        in: query
        description: The kind of the pull request activity to include in the result.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - change-comment
            - comment
            - system
      - name: type
        in: query
        description: The type of the pull request activity to include in the result.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - branch-delete
            - branch-update
            - code-comment
            - comment
            - merge
            - review-submit
            - state-change
            - title-change
      - name: after
        in: query
        description: The result should contain only entries created at and after this
          timestamp (unix millis).
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
      - name: before
        in: query
        description: The result should contain only entries created before this timestamp
          (unix millis).
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesPullReqActivity'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pullreq/{pullreq_number}/codeowners:
    get:
      tags:
      - pullreq
      operationId: codeownersPullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCodeOwnerEvaluation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pullreq/{pullreq_number}/comments:
    post:
      tags:
      - pullreq
      operationId: commentCreatePullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommentCreatePullReqRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqActivity'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pullreq/{pullreq_number}/comments/{pullreq_comment_id}:
    delete:
      tags:
      - pullreq
      operationId: commentDeletePullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: pullreq_comment_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - pullreq
      operationId: commentUpdatePullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: pullreq_comment_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommentUpdatePullReqRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqActivity'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pullreq/{pullreq_number}/comments/{pullreq_comment_id}/status:
    put:
      tags:
      - pullreq
      operationId: commentStatusPullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: pullreq_comment_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommentStatusPullReqRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqActivity'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pullreq/{pullreq_number}/commits:
    get:
      tags:
      - pullreq
      operationId: listPullReqCommits
      parameters:
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesCommit'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pullreq/{pullreq_number}/file-views:
    get:
      tags:
      - pullreq
      operationId: fileViewListPullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesPullReqFileView'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    put:
      tags:
      - pullreq
      operationId: fileViewAddPullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiFileViewAddPullReqRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqFileView'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pullreq/{pullreq_number}/file-views/{file_path}:
    delete:
      tags:
      - pullreq
      operationId: fileViewDeletePullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: file_path
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pullreq/{pullreq_number}/merge:
    post:
      tags:
      - pullreq
      operationId: mergePullReqOp
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMergePullReq'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesMergeResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesMergeViolations'
  /repos/{repo_ref}/pullreq/{pullreq_number}/metadata:
    get:
      tags:
      - pullreq
      operationId: pullReqMetaData
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqStats'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pullreq/{pullreq_number}/reviewers:
    get:
      tags:
      - pullreq
      operationId: reviewerListPullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesPullReqReviewer'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    put:
      tags:
      - pullreq
      operationId: reviewerAddPullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiReviewerAddPullReqRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqReviewer'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pullreq/{pullreq_number}/reviewers/{pullreq_reviewer_id}:
    delete:
      tags:
      - pullreq
      operationId: reviewerDeletePullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: pullreq_reviewer_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pullreq/{pullreq_number}/reviews:
    post:
      tags:
      - pullreq
      operationId: reviewSubmitPullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiReviewSubmitPullReqRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/pullreq/{pullreq_number}/state:
    post:
      tags:
      - pullreq
      operationId: statePullReq
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiStatePullReqRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/raw/{path}:
    get:
      tags:
      - repository
      operationId: getRaw
      parameters:
      - name: git_ref
        in: query
        description: The git reference (branch / tag / commitID) that will be used
          to retrieve the data. If no value is provided the default branch of the
          repository is used.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "{Repository Default Branch}"
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: path
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/rules:
    get:
      tags:
      - repository
      operationId: ruleList
      parameters:
      - name: query
        in: query
        description: The substring by which the repository protection rules are filtered.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: order
        in: query
        description: The order of the output.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: sort
        in: query
        description: The field by which the protection rules are sorted.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: created_at
          enum:
          - created_at
          - uid
          - updated_at
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenapiRule'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - repository
      operationId: ruleAdd
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/repo_ref_rules_body'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiRule'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/rules/{rule_uid}:
    get:
      tags:
      - repository
      operationId: ruleGet
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rule_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenapiRule'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - repository
      operationId: ruleDelete
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rule_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - repository
      operationId: ruleUpdate
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rule_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rules_rule_uid_body'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiRule'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/service-accounts:
    get:
      tags:
      - repository
      operationId: listRepositoryServiceAccounts
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesServiceAccount'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/tags:
    get:
      tags:
      - repository
      operationId: listTags
      parameters:
      - name: include_commit
        in: query
        description: Indicates whether optional commit information should be included
          in the response.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: query
        in: query
        description: The substring by which the tags are filtered.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: order
        in: query
        description: The order of the output.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: sort
        in: query
        description: The data by which the tags are sorted.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: name
          enum:
          - name
          - date
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepoCommitTag'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - repository
      operationId: createTag
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateTagRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoCommitTag'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/tags/{tag_name}:
    delete:
      tags:
      - repository
      operationId: deleteTag
      parameters:
      - name: bypass_rules
        in: query
        description: Bypass rule violations if possible.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tag_name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/uploads:
    post:
      tags:
      - upload
      operationId: repoArtifactUpload
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResult'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/uploads/{file_ref}:
    get:
      tags:
      - upload
      operationId: repoArtifactDownload
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: file_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "307":
          description: Temporary Redirect
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/webhooks:
    get:
      tags:
      - webhook
      operationId: listWebhooks
      parameters:
      - name: query
        in: query
        description: The substring which is used to filter the spaces by their path
          name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        description: The data by which the webhooks are sorted.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: id
          enum:
          - id
          - display_name
          - created
          - updated
      - name: order
        in: query
        description: The order of the output.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenapiWebhookType'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - webhook
      operationId: createWebhook
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateWebhookRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/webhooks/{webhook_id}:
    get:
      tags:
      - webhook
      operationId: getWebhook
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: webhook_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - webhook
      operationId: deleteWebhook
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: webhook_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - webhook
      operationId: updateWebhook
      parameters:
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: webhook_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateWebhookRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/webhooks/{webhook_id}/executions:
    get:
      tags:
      - webhook
      operationId: listWebhookExecutions
      parameters:
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: webhook_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesWebhookExecution'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_ref}/webhooks/{webhook_id}/executions/{webhook_execution_id}:
    get:
      tags:
      - webhook
      operationId: getWebhookExecution
      parameters:
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: webhook_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: webhook_execution_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesWebhookExecution'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/import:
    post:
      tags:
      - repository
      operationId: importRepository
      parameters:
      - name: space_path
        in: query
        description: path of parent space (Not needed in standalone).
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "false"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/repos_import_body'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /resources/gitignore:
    get:
      tags:
      - resource
      operationId: listGitignore
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /resources/license:
    get:
      tags:
      - resource
      operationId: listLicenses
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /secrets:
    post:
      tags:
      - secret
      operationId: createSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateSecretRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSecret'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /secrets/{secret_ref}:
    get:
      tags:
      - secret
      operationId: findSecret
      parameters:
      - name: secret_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSecret'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - secret
      operationId: deleteSecret
      parameters:
      - name: secret_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - secret
      operationId: updateSecret
      parameters:
      - name: secret_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateSecretRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSecret'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /spaces:
    post:
      tags:
      - space
      operationId: createSpace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateSpaceRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /spaces/{space_ref}:
    get:
      tags:
      - space
      operationId: getSpace
      parameters:
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - space
      operationId: deleteSpace
      parameters:
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - space
      operationId: updateSpace
      parameters:
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateSpaceRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /spaces/{space_ref}/connectors:
    get:
      tags:
      - space
      operationId: listConnectors
      parameters:
      - name: query
        in: query
        description: The substring which is used to filter the repositories by their
          path name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesConnector'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /spaces/{space_ref}/export:
    post:
      tags:
      - space
      operationId: exportSpace
      parameters:
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiExportSpaceRequest'
      responses:
        "202":
          description: Accepted
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /spaces/{space_ref}/export-progress:
    get:
      tags:
      - space
      operationId: exportProgressSpace
      parameters:
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpaceExportProgressOutput'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /spaces/{space_ref}/members:
    get:
      tags:
      - space
      operationId: membershipList
      parameters:
      - name: query
        in: query
        description: The substring by which the space members are filtered.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: order
        in: query
        description: The order of the output.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: sort
        in: query
        description: The field by which the space members are sorted.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: name
          enum:
          - created
          - name
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesMembershipUser'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - space
      operationId: membershipAdd
      parameters:
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/space_ref_members_body'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesMembershipUser'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /spaces/{space_ref}/members/{user_uid}:
    delete:
      tags:
      - space
      operationId: membershipDelete
      parameters:
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - space
      operationId: membershipUpdate
      parameters:
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/members_user_uid_body'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesMembershipUser'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /spaces/{space_ref}/move:
    post:
      tags:
      - space
      operationId: moveSpace
      parameters:
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMoveSpaceRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /spaces/{space_ref}/repos:
    get:
      tags:
      - space
      operationId: listRepos
      parameters:
      - name: query
        in: query
        description: The substring which is used to filter the repositories by their
          path name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        description: The data by which the repositories are sorted.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: uid
          enum:
          - uid
          - created
          - updated
      - name: order
        in: query
        description: The order of the output.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesRepository'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /spaces/{space_ref}/secrets:
    get:
      tags:
      - space
      operationId: listSecrets
      parameters:
      - name: query
        in: query
        description: The substring which is used to filter the repositories by their
          path name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesSecret'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /spaces/{space_ref}/service-accounts:
    get:
      tags:
      - space
      operationId: listServiceAccounts
      parameters:
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesServiceAccount'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /spaces/{space_ref}/spaces:
    get:
      tags:
      - space
      operationId: listSpaces
      parameters:
      - name: query
        in: query
        description: The substring which is used to filter the spaces by their path
          name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        description: The data by which the spaces are sorted.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: uid
          enum:
          - uid
          - created
          - updated
      - name: order
        in: query
        description: The order of the output.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesSpace'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /spaces/{space_ref}/templates:
    get:
      tags:
      - space
      operationId: listTemplates
      parameters:
      - name: query
        in: query
        description: The substring which is used to filter the repositories by their
          path name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: space_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesTemplate'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /spaces/import:
    post:
      tags:
      - space
      operationId: importSpace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/spaces_import_body'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /system/config:
    get:
      tags:
      - system
      operationId: getSystemConfig
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfigOutput'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /templates:
    post:
      tags:
      - template
      operationId: createTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateTemplateRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTemplate'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /templates/{template_ref}:
    get:
      tags:
      - template
      operationId: findTemplate
      parameters:
      - name: template_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTemplate'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - template
      operationId: deleteTemplate
      parameters:
      - name: template_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - template
      operationId: updateTemplate
      parameters:
      - name: template_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateTemplateRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTemplate'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /user:
    get:
      tags:
      - user
      operationId: getUser
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - user
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInput'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /user/memberships:
    get:
      tags:
      - user
      operationId: membershipSpaces
      parameters:
      - name: query
        in: query
        description: The substring by which the spaces the users is a member of are
          filtered.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: order
        in: query
        description: The order of the output.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: asc
          enum:
          - asc
          - desc
      - name: sort
        in: query
        description: The field by which the spaces the user is a member of are sorted.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: uid
          enum:
          - created
          - uid
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesMembershipSpace'
                x-content-type: application/json
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /user/token:
    post:
      tags:
      - user
      operationId: createToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateTokenRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTokenResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
components:
  schemas:
    EnumCIStatus:
      type: string
    EnumCheckPayloadKind:
      type: string
      enum:
      - ""
      - markdown
      - pipeline
      - raw
    EnumCheckStatus:
      type: string
      enum:
      - error
      - failure
      - pending
      - running
      - success
    EnumContentEncodingType:
      type: string
      enum:
      - base64
      - utf8
    EnumMembershipRole:
      type: string
      enum:
      - contributor
      - executor
      - reader
      - space_owner
    EnumMergeCheckStatus:
      type: string
    EnumMergeMethod:
      type: string
      enum:
      - merge
      - rebase
      - squash
    EnumParentResourceType:
      type: string
      enum:
      - space
      - repo
    EnumPrincipalType:
      type: string
      enum:
      - service
      - serviceaccount
      - user
    EnumPullReqActivityKind:
      type: string
      enum:
      - change-comment
      - comment
      - system
    EnumPullReqActivityType:
      type: string
      enum:
      - branch-delete
      - branch-update
      - code-comment
      - comment
      - merge
      - review-submit
      - state-change
      - title-change
    EnumPullReqCommentStatus:
      type: string
      enum:
      - active
      - resolved
    EnumPullReqReviewDecision:
      type: string
      enum:
      - approved
      - changereq
      - pending
      - reviewed
    EnumPullReqReviewerType:
      type: string
      enum:
      - assigned
      - requested
      - self_assigned
    EnumPullReqState:
      type: string
      enum:
      - closed
      - merged
      - open
    EnumRuleState:
      type: string
      nullable: true
      enum:
      - active
      - disabled
      - monitor
    EnumTokenType:
      type: string
    EnumTriggerAction:
      type: string
      enum:
      - branch_created
      - branch_updated
      - pullreq_branch_updated
      - pullreq_closed
      - pullreq_created
      - pullreq_merged
      - pullreq_reopened
      - tag_created
      - tag_updated
    EnumWebhookExecutionResult:
      type: string
      nullable: true
      enum:
      - fatal_error
      - retriable_error
      - success
    EnumWebhookParent:
      type: string
      enum:
      - repo
      - space
    EnumWebhookTrigger:
      type: string
      enum:
      - branch_created
      - branch_deleted
      - branch_updated
      - pullreq_branch_updated
      - pullreq_closed
      - pullreq_comment_created
      - pullreq_created
      - pullreq_merged
      - pullreq_reopened
      - tag_created
      - tag_deleted
      - tag_updated
    GitBlamePart:
      type: object
      properties:
        commit:
          $ref: '#/components/schemas/GitCommit'
        lines:
          type: array
          nullable: true
          items:
            type: string
      example:
        commit:
          committer: null
          author:
            identity:
              name: name
              email: email
            when: 2000-01-23T04:56:07.000+00:00
          message: message
          title: title
          sha: sha
        lines:
        - lines
        - lines
    GitCommit:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/GitSignature'
        committer:
          $ref: '#/components/schemas/GitSignature'
        message:
          type: string
        sha:
          type: string
        title:
          type: string
      example:
        committer: null
        author:
          identity:
            name: name
            email: email
          when: 2000-01-23T04:56:07.000+00:00
        message: message
        title: title
        sha: sha
    GitFileAction:
      type: string
      enum:
      - CREATE
      - UPDATE
      - DELETE
      - MOVE
    GitFileDiff:
      type: object
      properties:
        additions:
          type: integer
        changes:
          type: integer
        deletions:
          type: integer
        is_binary:
          type: boolean
        is_submodule:
          type: boolean
        old_path:
          type: string
        old_sha:
          type: string
        patch:
          type: array
          items:
            minimum: 0
            type: integer
        path:
          type: string
        sha:
          type: string
        status:
          $ref: '#/components/schemas/GitFileDiffStatus'
      example:
        patch:
        - 0
        - 0
        path: path
        additions: 0
        deletions: 1
        changes: 6
        is_binary: true
        is_submodule: true
        old_sha: old_sha
        old_path: old_path
        sha: sha
        status: status
    GitFileDiffStatus:
      type: string
    GitIdentity:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
      example:
        name: name
        email: email
    GitPathDetails:
      type: object
      properties:
        last_commit:
          $ref: '#/components/schemas/GitCommit'
        path:
          type: string
      example:
        path: path
        last_commit:
          committer: null
          author:
            identity:
              name: name
              email: email
            when: 2000-01-23T04:56:07.000+00:00
          message: message
          title: title
          sha: sha
    GitSignature:
      type: object
      properties:
        identity:
          $ref: '#/components/schemas/GitIdentity'
        when:
          type: string
          format: date-time
      example:
        identity:
          name: name
          email: email
        when: 2000-01-23T04:56:07.000+00:00
    ImporterPipelineOption:
      type: string
      enum:
      - convert
      - ignore
    ImporterProvider:
      type: object
      properties:
        host:
          type: string
        password:
          type: string
        type:
          $ref: '#/components/schemas/ImporterProviderType'
        username:
          type: string
    ImporterProviderType:
      type: string
      enum:
      - github
      - gitlab
      - bitbucket
      - stash
      - gitea
      - gogs
    JobProgress:
      type: object
      properties:
        failure:
          type: string
        progress:
          type: integer
        result:
          type: string
        state:
          $ref: '#/components/schemas/JobState'
      example:
        result: result
        failure: failure
        progress: 0
        state: canceled
    JobState:
      type: string
      enum:
      - canceled
      - failed
      - finished
      - running
      - scheduled
    LivelogLine:
      type: object
      properties:
        out:
          type: string
        pos:
          type: integer
        time:
          type: integer
      example:
        pos: 0
        time: 6
        out: out
    OpenapiAdminUsersCreateRequest:
      type: object
      properties:
        display_name:
          type: string
        email:
          type: string
        password:
          type: string
        uid:
          type: string
    OpenapiAdminUsersUpdateRequest:
      type: object
      properties:
        display_name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
    OpenapiCalculateCommitDivergenceRequest:
      type: object
      properties:
        max_count:
          type: integer
        requests:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/RepoCommitDivergenceRequest'
    OpenapiCommentCreatePullReqRequest:
      type: object
      properties:
        line_end:
          type: integer
        line_end_new:
          type: boolean
        line_start:
          type: integer
        line_start_new:
          type: boolean
        parent_id:
          type: integer
        path:
          type: string
        source_commit_sha:
          type: string
        target_commit_sha:
          type: string
        text:
          type: string
    OpenapiCommentStatusPullReqRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/EnumPullReqCommentStatus'
    OpenapiCommentUpdatePullReqRequest:
      type: object
      properties:
        text:
          type: string
    OpenapiCommitFilesRequest:
      type: object
      properties:
        actions:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/RepoCommitFileAction'
        branch:
          type: string
        bypass_rules:
          type: boolean
        dry_run_rules:
          type: boolean
        message:
          type: string
        new_branch:
          type: string
        title:
          type: string
    OpenapiContent:
      type: object
      oneOf:
      - $ref: '#/components/schemas/RepoFileContent'
      - $ref: '#/components/schemas/OpenapiDirContent'
      - $ref: '#/components/schemas/RepoSymlinkContent'
      - $ref: '#/components/schemas/RepoSubmoduleContent'
    OpenapiContentInfo:
      type: object
      properties:
        latest_commit:
          $ref: '#/components/schemas/TypesCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/OpenapiContentType'
    OpenapiContentType:
      type: string
      enum:
      - file
      - dir
      - symlink
      - submodule
    OpenapiCreateBranchRequest:
      type: object
      properties:
        bypass_rules:
          type: boolean
        name:
          type: string
        target:
          type: string
    OpenapiCreateConnectorRequest:
      type: object
      properties:
        data:
          type: string
        description:
          type: string
        space_ref:
          type: string
        type:
          type: string
        uid:
          type: string
    OpenapiCreatePipelineRequest:
      type: object
      properties:
        config_path:
          type: string
        default_branch:
          type: string
        description:
          type: string
        disabled:
          type: boolean
        uid:
          type: string
    OpenapiCreatePullReqRequest:
      type: object
      properties:
        description:
          type: string
        is_draft:
          type: boolean
        source_branch:
          type: string
        source_repo_ref:
          type: string
        target_branch:
          type: string
        title:
          type: string
    OpenapiCreateRepositoryRequest:
      type: object
      properties:
        default_branch:
          type: string
        description:
          type: string
        fork_id:
          type: integer
        git_ignore:
          type: string
        is_public:
          type: boolean
        license:
          type: string
        parent_ref:
          type: string
        readme:
          type: boolean
        uid:
          type: string
    OpenapiCreateSecretRequest:
      type: object
      properties:
        data:
          type: string
        description:
          type: string
        space_ref:
          type: string
        uid:
          type: string
    OpenapiCreateSpaceRequest:
      type: object
      properties:
        description:
          type: string
        is_public:
          type: boolean
        parent_ref:
          type: string
        uid:
          type: string
    OpenapiCreateTagRequest:
      type: object
      properties:
        bypass_rules:
          type: boolean
        message:
          type: string
        name:
          type: string
        target:
          type: string
    OpenapiCreateTemplateRequest:
      type: object
      properties:
        data:
          type: string
        description:
          type: string
        space_ref:
          type: string
        type:
          type: string
        uid:
          type: string
    OpenapiCreateTokenRequest:
      type: object
      properties:
        lifetime:
          $ref: '#/components/schemas/TimeDuration'
        uid:
          type: string
    OpenapiCreateTriggerRequest:
      type: object
      properties:
        actions:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/EnumTriggerAction'
        description:
          type: string
        disabled:
          type: boolean
        secret:
          type: string
        uid:
          type: string
    OpenapiCreateWebhookRequest:
      type: object
      properties:
        description:
          type: string
        display_name:
          type: string
        enabled:
          type: boolean
        insecure:
          type: boolean
        secret:
          type: string
        triggers:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/EnumWebhookTrigger'
        url:
          type: string
    OpenapiDirContent:
      type: object
      properties:
        entries:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/OpenapiContentInfo'
    OpenapiExportSpaceRequest:
      type: object
      properties:
        account_id:
          type: string
        org_identifier:
          type: string
        project_identifier:
          type: string
        token:
          type: string
    OpenapiFileViewAddPullReqRequest:
      type: object
      properties:
        commit_sha:
          type: string
        path:
          type: string
    OpenapiGetContentOutput:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/OpenapiContent'
        latest_commit:
          $ref: '#/components/schemas/TypesCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/OpenapiContentType'
      example:
        path: path
        name: name
        latest_commit:
          committer: null
          author:
            identity:
              name: name
              email: email
            when: 2000-01-23T04:56:07.000+00:00
          message: message
          title: title
          sha: sha
        type: file
        sha: sha
        content: ""
    OpenapiLoginRequest:
      type: object
      properties:
        login_identifier:
          type: string
        password:
          type: string
    OpenapiMergePullReq:
      type: object
      properties:
        bypass_rules:
          type: boolean
        dry_run:
          type: boolean
        method:
          $ref: '#/components/schemas/EnumMergeMethod'
        source_sha:
          type: string
    OpenapiMoveRepoRequest:
      type: object
      properties:
        uid:
          type: string
          nullable: true
    OpenapiMoveSpaceRequest:
      type: object
      properties:
        uid:
          type: string
          nullable: true
    OpenapiPathsDetailsRequest:
      type: object
      properties:
        paths:
          type: array
          nullable: true
          items:
            type: string
    OpenapiRegisterRequest:
      type: object
      properties:
        display_name:
          type: string
        email:
          type: string
        password:
          type: string
        uid:
          type: string
    OpenapiReviewSubmitPullReqRequest:
      type: object
      properties:
        commit_sha:
          type: string
        decision:
          $ref: '#/components/schemas/EnumPullReqReviewDecision'
    OpenapiReviewerAddPullReqRequest:
      type: object
      properties:
        reviewer_id:
          type: integer
    OpenapiRule:
      type: object
      properties:
        created:
          type: integer
        created_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        definition:
          $ref: '#/components/schemas/OpenapiRuleDefinition'
        description:
          type: string
        pattern:
          $ref: '#/components/schemas/ProtectionPattern'
        state:
          $ref: '#/components/schemas/EnumRuleState'
        type:
          $ref: '#/components/schemas/OpenapiRuleType'
        uid:
          type: string
        updated:
          type: integer
        users:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TypesPrincipalInfo'
          nullable: true
      example:
        uid: uid
        created: 0
        pattern:
          include:
          - include
          - include
          default: true
          exclude:
          - exclude
          - exclude
        description: description
        definition: ""
        state: active
        type: branch
        created_by:
          uid: uid
          created: 0
          id: 6
          display_name: display_name
          type: service
          updated: 1
          email: email
        updated: 6
        users:
          key: null
    OpenapiRuleDefinition:
      type: object
      oneOf:
      - $ref: '#/components/schemas/ProtectionBranch'
    OpenapiRuleType:
      type: string
      enum:
      - branch
    OpenapiStatePullReqRequest:
      type: object
      properties:
        is_draft:
          type: boolean
        state:
          $ref: '#/components/schemas/EnumPullReqState'
    OpenapiUpdateAdminRequest:
      type: object
      properties:
        admin:
          type: boolean
    OpenapiUpdateConnectorRequest:
      type: object
      properties:
        data:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        uid:
          type: string
          nullable: true
    OpenapiUpdatePipelineRequest:
      type: object
      properties:
        config_path:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        disabled:
          type: boolean
          nullable: true
        uid:
          type: string
          nullable: true
    OpenapiUpdatePullReqRequest:
      type: object
      properties:
        description:
          type: string
        title:
          type: string
    OpenapiUpdateRepoRequest:
      type: object
      properties:
        description:
          type: string
          nullable: true
        is_public:
          type: boolean
          nullable: true
    OpenapiUpdateSecretRequest:
      type: object
      properties:
        data:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        uid:
          type: string
          nullable: true
    OpenapiUpdateSpaceRequest:
      type: object
      properties:
        description:
          type: string
          nullable: true
        is_public:
          type: boolean
          nullable: true
    OpenapiUpdateTemplateRequest:
      type: object
      properties:
        data:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        uid:
          type: string
          nullable: true
    OpenapiUpdateTriggerRequest:
      type: object
      properties:
        actions:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/EnumTriggerAction'
        description:
          type: string
          nullable: true
        disabled:
          type: boolean
          nullable: true
        secret:
          type: string
          nullable: true
        uid:
          type: string
          nullable: true
    OpenapiUpdateWebhookRequest:
      type: object
      properties:
        description:
          type: string
          nullable: true
        display_name:
          type: string
          nullable: true
        enabled:
          type: boolean
          nullable: true
        insecure:
          type: boolean
          nullable: true
        secret:
          type: string
          nullable: true
        triggers:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/EnumWebhookTrigger'
        url:
          type: string
          nullable: true
    OpenapiWebhookType:
      type: object
      properties:
        created:
          type: integer
        created_by:
          type: integer
        description:
          type: string
        display_name:
          type: string
        enabled:
          type: boolean
        has_secret:
          type: boolean
        id:
          type: integer
        insecure:
          type: boolean
        latest_execution_result:
          $ref: '#/components/schemas/EnumWebhookExecutionResult'
        parent_id:
          type: integer
        parent_type:
          $ref: '#/components/schemas/EnumWebhookParent'
        triggers:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/EnumWebhookTrigger'
        updated:
          type: integer
        url:
          type: string
        version:
          type: integer
      example:
        latest_execution_result: fatal_error
        has_secret: true
        created: 0
        description: description
        display_name: display_name
        parent_type: repo
        triggers:
        - branch_created
        - branch_created
        created_by: 6
        version: 2
        enabled: true
        url: url
        parent_id: 5
        insecure: true
        id: 1
        updated: 5
    ProtectionBranch:
      type: object
      properties:
        bypass:
          $ref: '#/components/schemas/ProtectionDefBypass'
        lifecycle:
          $ref: '#/components/schemas/ProtectionDefLifecycle'
        pullreq:
          $ref: '#/components/schemas/ProtectionDefPullReq'
    ProtectionDefApprovals:
      type: object
      properties:
        require_code_owners:
          type: boolean
        require_latest_commit:
          type: boolean
        require_minimum_count:
          type: integer
    ProtectionDefBypass:
      type: object
      properties:
        repo_owners:
          type: boolean
        user_ids:
          type: array
          items:
            type: integer
    ProtectionDefComments:
      type: object
      properties:
        require_resolve_all:
          type: boolean
    ProtectionDefLifecycle:
      type: object
      properties:
        create_forbidden:
          type: boolean
        delete_forbidden:
          type: boolean
        update_forbidden:
          type: boolean
    ProtectionDefMerge:
      type: object
      properties:
        delete_branch:
          type: boolean
        strategies_allowed:
          type: array
          items:
            $ref: '#/components/schemas/EnumMergeMethod'
    ProtectionDefPullReq:
      type: object
      properties:
        approvals:
          $ref: '#/components/schemas/ProtectionDefApprovals'
        comments:
          $ref: '#/components/schemas/ProtectionDefComments'
        merge:
          $ref: '#/components/schemas/ProtectionDefMerge'
        status_checks:
          $ref: '#/components/schemas/ProtectionDefStatusChecks'
    ProtectionDefStatusChecks:
      type: object
      properties:
        require_uids:
          type: array
          items:
            type: string
    ProtectionPattern:
      type: object
      properties:
        default:
          type: boolean
        exclude:
          type: array
          items:
            type: string
        include:
          type: array
          items:
            type: string
      nullable: true
      example:
        include:
        - include
        - include
        default: true
        exclude:
        - exclude
        - exclude
    RepoBranch:
      type: object
      properties:
        commit:
          $ref: '#/components/schemas/TypesCommit'
        name:
          type: string
        sha:
          type: string
      example:
        commit:
          committer: null
          author:
            identity:
              name: name
              email: email
            when: 2000-01-23T04:56:07.000+00:00
          message: message
          title: title
          sha: sha
        name: name
        sha: sha
    RepoCommitDivergence:
      type: object
      properties:
        ahead:
          type: integer
        behind:
          type: integer
      example:
        behind: 6
        ahead: 0
    RepoCommitDivergenceRequest:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
    RepoCommitFileAction:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/GitFileAction'
        encoding:
          $ref: '#/components/schemas/EnumContentEncodingType'
        path:
          type: string
        payload:
          type: string
        sha:
          type: string
    RepoCommitTag:
      type: object
      properties:
        commit:
          $ref: '#/components/schemas/TypesCommit'
        is_annotated:
          type: boolean
        message:
          type: string
        name:
          type: string
        sha:
          type: string
        tagger:
          $ref: '#/components/schemas/TypesSignature'
        title:
          type: string
      example:
        is_annotated: true
        tagger:
          identity:
            name: name
            email: email
          when: 2000-01-23T04:56:07.000+00:00
        commit:
          committer: null
          author:
            identity:
              name: name
              email: email
            when: 2000-01-23T04:56:07.000+00:00
          message: message
          title: title
          sha: sha
        name: name
        message: message
        title: title
        sha: sha
    RepoContent: {}
    RepoContentInfo:
      type: object
      properties:
        latest_commit:
          $ref: '#/components/schemas/TypesCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/RepoContentType'
    RepoContentType:
      type: string
    RepoFileContent:
      type: object
      properties:
        data:
          type: string
        data_size:
          type: integer
        encoding:
          $ref: '#/components/schemas/EnumContentEncodingType'
        size:
          type: integer
    RepoMergeCheck:
      type: object
      properties:
        conflict_files:
          type: array
          items:
            type: string
        mergeable:
          type: boolean
      example:
        conflict_files:
        - conflict_files
        - conflict_files
        mergeable: true
    RepoPathsDetailsOutput:
      type: object
      properties:
        details:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/GitPathDetails'
      example:
        details:
        - path: path
          last_commit:
            committer: null
            author:
              identity:
                name: name
                email: email
              when: 2000-01-23T04:56:07.000+00:00
            message: message
            title: title
            sha: sha
        - path: path
          last_commit:
            committer: null
            author:
              identity:
                name: name
                email: email
              when: 2000-01-23T04:56:07.000+00:00
            message: message
            title: title
            sha: sha
    RepoSubmoduleContent:
      type: object
      properties:
        commit_sha:
          type: string
        url:
          type: string
    RepoSymlinkContent:
      type: object
      properties:
        size:
          type: integer
        target:
          type: string
    SpaceExportProgressOutput:
      type: object
      properties:
        repos:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/JobProgress'
      example:
        repos:
        - result: result
          failure: failure
          progress: 0
          state: canceled
        - result: result
          failure: failure
          progress: 0
          state: canceled
    SpaceImportRepositoriesOutput:
      type: object
      properties:
        duplicate_repos:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesRepository'
        importing_repos:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesRepository'
    SystemConfigOutput:
      type: object
      properties:
        public_resource_creation_enabled:
          type: boolean
        user_signup_allowed:
          type: boolean
      example:
        public_resource_creation_enabled: true
        user_signup_allowed: true
    TimeDuration:
      type: integer
      nullable: true
    TypesCheck:
      type: object
      properties:
        created:
          type: integer
        id:
          type: integer
        link:
          type: string
        metadata: {}
        payload:
          $ref: '#/components/schemas/TypesCheckPayload'
        reported_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        status:
          $ref: '#/components/schemas/EnumCheckStatus'
        summary:
          type: string
        uid:
          type: string
        updated:
          type: integer
      example:
        summary: summary
        uid: uid
        metadata: ""
        payload:
          data: ""
          kind: ""
          version: version
        created: 0
        link: link
        reported_by:
          uid: uid
          created: 0
          id: 6
          display_name: display_name
          type: service
          updated: 1
          email: email
        id: 6
        updated: 1
        status: error
    TypesCheckPayload:
      type: object
      properties:
        data: {}
        kind:
          $ref: '#/components/schemas/EnumCheckPayloadKind'
        version:
          type: string
      example:
        data: ""
        kind: ""
        version: version
    TypesCodeCommentFields:
      type: object
      properties:
        line_new:
          type: integer
        line_old:
          type: integer
        merge_base_sha:
          type: string
        outdated:
          type: boolean
        path:
          type: string
        source_sha:
          type: string
        span_new:
          type: integer
        span_old:
          type: integer
      example:
        span_old: 5
        path: path
        line_old: 6
        merge_base_sha: merge_base_sha
        outdated: true
        span_new: 1
        line_new: 0
        source_sha: source_sha
    TypesCodeOwnerEvaluation:
      type: object
      properties:
        evaluation_entries:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesCodeOwnerEvaluationEntry'
        file_sha:
          type: string
      example:
        file_sha: file_sha
        evaluation_entries:
        - user_group_owner_evaluations:
          - evaluations:
            - null
            - null
            name: name
            id: id
          - evaluations:
            - null
            - null
            name: name
            id: id
          pattern: pattern
          owner_evaluations:
          - owner:
              uid: uid
              created: 0
              id: 6
              display_name: display_name
              type: service
              updated: 1
              email: email
            review_decision: approved
            review_sha: review_sha
          - owner:
              uid: uid
              created: 0
              id: 6
              display_name: display_name
              type: service
              updated: 1
              email: email
            review_decision: approved
            review_sha: review_sha
        - user_group_owner_evaluations:
          - evaluations:
            - null
            - null
            name: name
            id: id
          - evaluations:
            - null
            - null
            name: name
            id: id
          pattern: pattern
          owner_evaluations:
          - owner:
              uid: uid
              created: 0
              id: 6
              display_name: display_name
              type: service
              updated: 1
              email: email
            review_decision: approved
            review_sha: review_sha
          - owner:
              uid: uid
              created: 0
              id: 6
              display_name: display_name
              type: service
              updated: 1
              email: email
            review_decision: approved
            review_sha: review_sha
    TypesCodeOwnerEvaluationEntry:
      type: object
      properties:
        owner_evaluations:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesOwnerEvaluation'
        pattern:
          type: string
        user_group_owner_evaluations:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesUserGroupOwnerEvaluation'
      example:
        user_group_owner_evaluations:
        - evaluations:
          - null
          - null
          name: name
          id: id
        - evaluations:
          - null
          - null
          name: name
          id: id
        pattern: pattern
        owner_evaluations:
        - owner:
            uid: uid
            created: 0
            id: 6
            display_name: display_name
            type: service
            updated: 1
            email: email
          review_decision: approved
          review_sha: review_sha
        - owner:
            uid: uid
            created: 0
            id: 6
            display_name: display_name
            type: service
            updated: 1
            email: email
          review_decision: approved
          review_sha: review_sha
    TypesCommit:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/TypesSignature'
        committer:
          $ref: '#/components/schemas/TypesSignature'
        message:
          type: string
        sha:
          type: string
        title:
          type: string
      example:
        committer: null
        author:
          identity:
            name: name
            email: email
          when: 2000-01-23T04:56:07.000+00:00
        message: message
        title: title
        sha: sha
    TypesCommitFilesResponse:
      type: object
      properties:
        commit_id:
          type: string
        dry_run_rules:
          type: boolean
        rule_violations:
          type: array
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
      example:
        dry_run_rules: true
        rule_violations:
        - bypassable: true
          bypassed: true
          violations:
          - code: code
            message: message
            params:
            - ""
            - ""
          - code: code
            message: message
            params:
            - ""
            - ""
          rule:
            repo_path: repo_path
            uid: uid
            state: active
            type: type
            space_path: space_path
        - bypassable: true
          bypassed: true
          violations:
          - code: code
            message: message
            params:
            - ""
            - ""
          - code: code
            message: message
            params:
            - ""
            - ""
          rule:
            repo_path: repo_path
            uid: uid
            state: active
            type: type
            space_path: space_path
        commit_id: commit_id
    TypesConnector:
      type: object
      properties:
        created:
          type: integer
        data:
          type: string
        description:
          type: string
        id:
          type: integer
        space_id:
          type: integer
        type:
          type: string
        uid:
          type: string
        updated:
          type: integer
      example:
        uid: uid
        data: data
        created: 0
        description: description
        id: 6
        type: type
        space_id: 1
        updated: 5
    TypesDiffStats:
      type: object
      properties:
        commits:
          type: integer
          nullable: true
        files_changed:
          type: integer
          nullable: true
      example:
        files_changed: 6
        commits: 0
    TypesExecution:
      type: object
      properties:
        action:
          type: string
        after:
          type: string
        author_avatar:
          type: string
        author_email:
          type: string
        author_login:
          type: string
        author_name:
          type: string
        before:
          type: string
        created:
          type: integer
        created_by:
          type: integer
        cron:
          type: string
        debug:
          type: boolean
        deploy_id:
          type: integer
        deploy_to:
          type: string
        error:
          type: string
        event:
          type: string
        finished:
          type: integer
        link:
          type: string
        message:
          type: string
        number:
          type: integer
        params:
          type: object
          additionalProperties:
            type: string
        parent:
          type: integer
        pipeline_id:
          type: integer
        ref:
          type: string
        repo_id:
          type: integer
        sender:
          type: string
        source:
          type: string
        source_repo:
          type: string
        stages:
          type: array
          items:
            $ref: '#/components/schemas/TypesStage'
        started:
          type: integer
        status:
          $ref: '#/components/schemas/EnumCIStatus'
        target:
          type: string
        timestamp:
          type: integer
        title:
          type: string
        trigger:
          type: string
        updated:
          type: integer
      example:
        author_name: author_name
        parent: 9
        before: before
        link: link
        source: source
        error: error
        title: title
        number: 7
        ref: ref
        pipeline_id: 3
        action: action
        author_email: author_email
        after: after
        event: event
        deploy_id: 5
        timestamp: 8
        cron: cron
        author_login: author_login
        debug: true
        source_repo: source_repo
        created: 1
        finished: 2
        started: 6
        trigger: trigger
        author_avatar: author_avatar
        message: message
        params:
          key: params
        created_by: 5
        target: target
        sender: sender
        repo_id: 2
        stages:
        - on_failure: true
          throttle: 9
          stopped: 9
          depends_on:
          - depends_on
          - depends_on
          os: os
          kernel: kernel
          kind: kind
          on_success: true
          started: 6
          error: error
          type: type
          steps:
          - detached: true
            schema: schema
            image: image
            number: 1
            stopped: 5
            depends_on:
            - depends_on
            - depends_on
            exit_code: 7
            name: name
            started: 4
            error: error
            errignore: true
            status: null
          - detached: true
            schema: schema
            image: image
            number: 1
            stopped: 5
            depends_on:
            - depends_on
            - depends_on
            exit_code: 7
            name: name
            started: 4
            error: error
            errignore: true
            status: null
          errignore: true
          labels:
            key: labels
          execution_id: 4
          number: 1
          machine: machine
          repo_id: 1
          exit_code: 7
          limit: 1
          name: name
          variant: variant
          arch: arch
          status: status
        - on_failure: true
          throttle: 9
          stopped: 9
          depends_on:
          - depends_on
          - depends_on
          os: os
          kernel: kernel
          kind: kind
          on_success: true
          started: 6
          error: error
          type: type
          steps:
          - detached: true
            schema: schema
            image: image
            number: 1
            stopped: 5
            depends_on:
            - depends_on
            - depends_on
            exit_code: 7
            name: name
            started: 4
            error: error
            errignore: true
            status: null
          - detached: true
            schema: schema
            image: image
            number: 1
            stopped: 5
            depends_on:
            - depends_on
            - depends_on
            exit_code: 7
            name: name
            started: 4
            error: error
            errignore: true
            status: null
          errignore: true
          labels:
            key: labels
          execution_id: 4
          number: 1
          machine: machine
          repo_id: 1
          exit_code: 7
          limit: 1
          name: name
          variant: variant
          arch: arch
          status: status
        updated: 9
        deploy_to: deploy_to
        status: null
    TypesIdentity:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
      example:
        name: name
        email: email
    TypesListCommitResponse:
      type: object
      properties:
        commits:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesCommit'
        rename_details:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesRenameDetails'
        total_commits:
          type: integer
      example:
        commits:
        - committer: null
          author:
            identity:
              name: name
              email: email
            when: 2000-01-23T04:56:07.000+00:00
          message: message
          title: title
          sha: sha
        - committer: null
          author:
            identity:
              name: name
              email: email
            when: 2000-01-23T04:56:07.000+00:00
          message: message
          title: title
          sha: sha
        rename_details:
        - new_path: new_path
          commit_sha_before: commit_sha_before
          commit_sha_after: commit_sha_after
          old_path: old_path
        - new_path: new_path
          commit_sha_before: commit_sha_before
          commit_sha_after: commit_sha_after
          old_path: old_path
        total_commits: 0
    TypesMembershipSpace:
      type: object
      properties:
        added_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        created:
          type: integer
        role:
          $ref: '#/components/schemas/EnumMembershipRole'
        space:
          $ref: '#/components/schemas/TypesSpace'
        updated:
          type: integer
      example:
        role: contributor
        added_by:
          uid: uid
          created: 0
          id: 6
          display_name: display_name
          type: service
          updated: 1
          email: email
        created: 0
        updated: 6
        space:
          path: path
          uid: uid
          created: 0
          parent_id: 5
          is_public: true
          description: description
          id: 1
          created_by: 6
          updated: 5
    TypesMembershipUser:
      type: object
      properties:
        added_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        created:
          type: integer
        principal:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        role:
          $ref: '#/components/schemas/EnumMembershipRole'
        updated:
          type: integer
      example:
        principal: null
        role: contributor
        added_by:
          uid: uid
          created: 0
          id: 6
          display_name: display_name
          type: service
          updated: 1
          email: email
        created: 0
        updated: 6
    TypesMergeResponse:
      type: object
      properties:
        allowed_methods:
          type: array
          items:
            $ref: '#/components/schemas/EnumMergeMethod'
        branch_deleted:
          type: boolean
        conflict_files:
          type: array
          items:
            type: string
        dry_run:
          type: boolean
        rule_violations:
          type: array
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
        sha:
          type: string
      example:
        allowed_methods:
        - merge
        - merge
        conflict_files:
        - conflict_files
        - conflict_files
        rule_violations:
        - bypassable: true
          bypassed: true
          violations:
          - code: code
            message: message
            params:
            - ""
            - ""
          - code: code
            message: message
            params:
            - ""
            - ""
          rule:
            repo_path: repo_path
            uid: uid
            state: active
            type: type
            space_path: space_path
        - bypassable: true
          bypassed: true
          violations:
          - code: code
            message: message
            params:
            - ""
            - ""
          - code: code
            message: message
            params:
            - ""
            - ""
          rule:
            repo_path: repo_path
            uid: uid
            state: active
            type: type
            space_path: space_path
        dry_run: true
        sha: sha
        branch_deleted: true
    TypesMergeViolations:
      type: object
      properties:
        conflict_files:
          type: array
          items:
            type: string
        rule_violations:
          type: array
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
    TypesOwnerEvaluation:
      type: object
      properties:
        owner:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        review_decision:
          $ref: '#/components/schemas/EnumPullReqReviewDecision'
        review_sha:
          type: string
      example:
        owner:
          uid: uid
          created: 0
          id: 6
          display_name: display_name
          type: service
          updated: 1
          email: email
        review_decision: approved
        review_sha: review_sha
    TypesPipeline:
      type: object
      properties:
        config_path:
          type: string
        created:
          type: integer
        created_by:
          type: integer
        default_branch:
          type: string
        description:
          type: string
        disabled:
          type: boolean
        execution:
          $ref: '#/components/schemas/TypesExecution'
        id:
          type: integer
        repo_id:
          type: integer
        seq:
          type: integer
        uid:
          type: string
        updated:
          type: integer
      example:
        execution:
          author_name: author_name
          parent: 9
          before: before
          link: link
          source: source
          error: error
          title: title
          number: 7
          ref: ref
          pipeline_id: 3
          action: action
          author_email: author_email
          after: after
          event: event
          deploy_id: 5
          timestamp: 8
          cron: cron
          author_login: author_login
          debug: true
          source_repo: source_repo
          created: 1
          finished: 2
          started: 6
          trigger: trigger
          author_avatar: author_avatar
          message: message
          params:
            key: params
          created_by: 5
          target: target
          sender: sender
          repo_id: 2
          stages:
          - on_failure: true
            throttle: 9
            stopped: 9
            depends_on:
            - depends_on
            - depends_on
            os: os
            kernel: kernel
            kind: kind
            on_success: true
            started: 6
            error: error
            type: type
            steps:
            - detached: true
              schema: schema
              image: image
              number: 1
              stopped: 5
              depends_on:
              - depends_on
              - depends_on
              exit_code: 7
              name: name
              started: 4
              error: error
              errignore: true
              status: null
            - detached: true
              schema: schema
              image: image
              number: 1
              stopped: 5
              depends_on:
              - depends_on
              - depends_on
              exit_code: 7
              name: name
              started: 4
              error: error
              errignore: true
              status: null
            errignore: true
            labels:
              key: labels
            execution_id: 4
            number: 1
            machine: machine
            repo_id: 1
            exit_code: 7
            limit: 1
            name: name
            variant: variant
            arch: arch
            status: status
          - on_failure: true
            throttle: 9
            stopped: 9
            depends_on:
            - depends_on
            - depends_on
            os: os
            kernel: kernel
            kind: kind
            on_success: true
            started: 6
            error: error
            type: type
            steps:
            - detached: true
              schema: schema
              image: image
              number: 1
              stopped: 5
              depends_on:
              - depends_on
              - depends_on
              exit_code: 7
              name: name
              started: 4
              error: error
              errignore: true
              status: null
            - detached: true
              schema: schema
              image: image
              number: 1
              stopped: 5
              depends_on:
              - depends_on
              - depends_on
              exit_code: 7
              name: name
              started: 4
              error: error
              errignore: true
              status: null
            errignore: true
            labels:
              key: labels
            execution_id: 4
            number: 1
            machine: machine
            repo_id: 1
            exit_code: 7
            limit: 1
            name: name
            variant: variant
            arch: arch
            status: status
          updated: 9
          deploy_to: deploy_to
          status: null
        uid: uid
        created: 0
        repo_id: 3
        description: description
        default_branch: default_branch
        disabled: true
        config_path: config_path
        id: 6
        created_by: 6
        updated: 1
        seq: 6
    TypesPlugin:
      type: object
      properties:
        description:
          type: string
        logo:
          type: string
        spec:
          type: string
        type:
          type: string
        uid:
          type: string
        version:
          type: string
      example:
        uid: uid
        description: description
        logo: logo
        type: type
        version: version
        spec: spec
    TypesPrincipalInfo:
      type: object
      properties:
        created:
          type: integer
        display_name:
          type: string
        email:
          type: string
        id:
          type: integer
        type:
          $ref: '#/components/schemas/EnumPrincipalType'
        uid:
          type: string
        updated:
          type: integer
      example:
        uid: uid
        created: 0
        id: 6
        display_name: display_name
        type: service
        updated: 1
        email: email
    TypesPullReq:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        created:
          type: integer
        description:
          type: string
        edited:
          type: integer
        is_draft:
          type: boolean
        merge_base_sha:
          type: string
        merge_check_status:
          $ref: '#/components/schemas/EnumMergeCheckStatus'
        merge_conflicts:
          type: array
          items:
            type: string
        merge_method:
          $ref: '#/components/schemas/EnumMergeMethod'
        merge_sha:
          type: string
          nullable: true
        merge_target_sha:
          type: string
          nullable: true
        merged:
          type: integer
          nullable: true
        merger:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        number:
          type: integer
        source_branch:
          type: string
        source_repo_id:
          type: integer
        source_sha:
          type: string
        state:
          $ref: '#/components/schemas/EnumPullReqState'
        stats:
          $ref: '#/components/schemas/TypesPullReqStats'
        target_branch:
          type: string
        target_repo_id:
          type: integer
        title:
          type: string
      example:
        merge_base_sha: merge_base_sha
        edited: 6
        author:
          uid: uid
          created: 0
          id: 6
          display_name: display_name
          type: service
          updated: 1
          email: email
        created: 0
        merge_target_sha: merge_target_sha
        merged: 1
        description: description
        merge_conflicts:
        - merge_conflicts
        - merge_conflicts
        source_repo_id: 5
        target_branch: target_branch
        title: title
        source_sha: source_sha
        merge_method: merge
        source_branch: source_branch
        number: 5
        target_repo_id: 2
        stats:
          files_changed: 9
          commits: 2
          conversations: 7
          unresolved_count: 3
        is_draft: true
        merge_check_status: merge_check_status
        merge_sha: merge_sha
        state: closed
        merger: null
    TypesPullReqActivity:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        code_comment:
          $ref: '#/components/schemas/TypesCodeCommentFields'
        created:
          type: integer
        deleted:
          type: integer
          nullable: true
        edited:
          type: integer
        id:
          type: integer
        kind:
          $ref: '#/components/schemas/EnumPullReqActivityKind'
        metadata:
          type: object
          additionalProperties: {}
          nullable: true
        order:
          type: integer
        parent_id:
          type: integer
          nullable: true
        payload: {}
        pullreq_id:
          type: integer
        repo_id:
          type: integer
        resolved:
          type: integer
          nullable: true
        resolver:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        sub_order:
          type: integer
        text:
          type: string
        type:
          $ref: '#/components/schemas/EnumPullReqActivityType'
        updated:
          type: integer
      example:
        resolver: null
        metadata:
          key: ""
        edited: 7
        author:
          uid: uid
          created: 0
          id: 6
          display_name: display_name
          type: service
          updated: 1
          email: email
        created: 5
        kind: change-comment
        type: branch-delete
        code_comment:
          span_old: 5
          path: path
          line_old: 6
          merge_base_sha: merge_base_sha
          outdated: true
          span_new: 1
          line_new: 0
          source_sha: source_sha
        deleted: 2
        payload: ""
        pullreq_id: 4
        parent_id: 2
        repo_id: 7
        sub_order: 1
        id: 9
        text: text
        updated: 1
        order: 3
        resolved: 1
    TypesPullReqFileView:
      type: object
      properties:
        obsolete:
          type: boolean
        path:
          type: string
        sha:
          type: string
      example:
        path: path
        obsolete: true
        sha: sha
    TypesPullReqReviewer:
      type: object
      properties:
        added_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        created:
          type: integer
        latest_review_id:
          type: integer
          nullable: true
        review_decision:
          $ref: '#/components/schemas/EnumPullReqReviewDecision'
        reviewer:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        sha:
          type: string
        type:
          $ref: '#/components/schemas/EnumPullReqReviewerType'
        updated:
          type: integer
      example:
        review_decision: approved
        added_by:
          uid: uid
          created: 0
          id: 6
          display_name: display_name
          type: service
          updated: 1
          email: email
        created: 0
        latest_review_id: 6
        reviewer: null
        type: assigned
        sha: sha
        updated: 1
    TypesPullReqStats:
      type: object
      properties:
        commits:
          type: integer
          nullable: true
        conversations:
          type: integer
        files_changed:
          type: integer
          nullable: true
        unresolved_count:
          type: integer
      example:
        files_changed: 9
        commits: 2
        conversations: 7
        unresolved_count: 3
    TypesRenameDetails:
      type: object
      properties:
        commit_sha_after:
          type: string
        commit_sha_before:
          type: string
        new_path:
          type: string
        old_path:
          type: string
      example:
        new_path: new_path
        commit_sha_before: commit_sha_before
        commit_sha_after: commit_sha_after
        old_path: old_path
    TypesRepository:
      type: object
      properties:
        created:
          type: integer
        created_by:
          type: integer
        default_branch:
          type: string
        description:
          type: string
        fork_id:
          type: integer
        git_url:
          type: string
        id:
          type: integer
        importing:
          type: boolean
        is_public:
          type: boolean
        num_closed_pulls:
          type: integer
        num_forks:
          type: integer
        num_merged_pulls:
          type: integer
        num_open_pulls:
          type: integer
        num_pulls:
          type: integer
        parent_id:
          type: integer
        path:
          type: string
        uid:
          type: string
        updated:
          type: integer
      example:
        num_pulls: 3
        created: 0
        fork_id: 1
        num_open_pulls: 9
        description: description
        created_by: 6
        importing: true
        path: path
        uid: uid
        num_merged_pulls: 7
        parent_id: 2
        is_public: true
        default_branch: default_branch
        id: 5
        git_url: git_url
        updated: 4
        num_closed_pulls: 5
        num_forks: 2
    TypesRuleInfo:
      type: object
      properties:
        repo_path:
          type: string
        space_path:
          type: string
        state:
          $ref: '#/components/schemas/EnumRuleState'
        type:
          $ref: '#/components/schemas/TypesRuleType'
        uid:
          type: string
      example:
        repo_path: repo_path
        uid: uid
        state: active
        type: type
        space_path: space_path
    TypesRuleType:
      type: string
    TypesRuleViolations:
      type: object
      properties:
        bypassable:
          type: boolean
        bypassed:
          type: boolean
        rule:
          $ref: '#/components/schemas/TypesRuleInfo'
        violations:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesViolation'
      example:
        bypassable: true
        bypassed: true
        violations:
        - code: code
          message: message
          params:
          - ""
          - ""
        - code: code
          message: message
          params:
          - ""
          - ""
        rule:
          repo_path: repo_path
          uid: uid
          state: active
          type: type
          space_path: space_path
    TypesRulesViolations:
      type: object
      properties:
        violations:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
    TypesSecret:
      type: object
      properties:
        created:
          type: integer
        created_by:
          type: integer
        description:
          type: string
        id:
          type: integer
        space_id:
          type: integer
        uid:
          type: string
        updated:
          type: integer
      example:
        uid: uid
        created: 0
        description: description
        id: 1
        created_by: 6
        space_id: 5
        updated: 5
    TypesServiceAccount:
      type: object
      properties:
        admin:
          type: boolean
        blocked:
          type: boolean
        created:
          type: integer
        display_name:
          type: string
        email:
          type: string
        parent_id:
          type: integer
        parent_type:
          $ref: '#/components/schemas/EnumParentResourceType'
        uid:
          type: string
        updated:
          type: integer
      example:
        uid: uid
        blocked: true
        created: 0
        parent_id: 6
        admin: true
        display_name: display_name
        parent_type: space
        updated: 1
        email: email
    TypesSignature:
      type: object
      properties:
        identity:
          $ref: '#/components/schemas/TypesIdentity'
        when:
          type: string
          format: date-time
      example:
        identity:
          name: name
          email: email
        when: 2000-01-23T04:56:07.000+00:00
    TypesSpace:
      type: object
      properties:
        created:
          type: integer
        created_by:
          type: integer
        description:
          type: string
        id:
          type: integer
        is_public:
          type: boolean
        parent_id:
          type: integer
        path:
          type: string
        uid:
          type: string
        updated:
          type: integer
      example:
        path: path
        uid: uid
        created: 0
        parent_id: 5
        is_public: true
        description: description
        id: 1
        created_by: 6
        updated: 5
    TypesStage:
      type: object
      properties:
        arch:
          type: string
        depends_on:
          type: array
          items:
            type: string
        errignore:
          type: boolean
        error:
          type: string
        execution_id:
          type: integer
        exit_code:
          type: integer
        kernel:
          type: string
        kind:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        limit:
          type: integer
        machine:
          type: string
        name:
          type: string
        number:
          type: integer
        on_failure:
          type: boolean
        on_success:
          type: boolean
        os:
          type: string
        repo_id:
          type: integer
        started:
          type: integer
        status:
          $ref: '#/components/schemas/EnumCIStatus'
        steps:
          type: array
          items:
            $ref: '#/components/schemas/TypesStep'
        stopped:
          type: integer
        throttle:
          type: integer
        type:
          type: string
        variant:
          type: string
      example:
        on_failure: true
        throttle: 9
        stopped: 9
        depends_on:
        - depends_on
        - depends_on
        os: os
        kernel: kernel
        kind: kind
        on_success: true
        started: 6
        error: error
        type: type
        steps:
        - detached: true
          schema: schema
          image: image
          number: 1
          stopped: 5
          depends_on:
          - depends_on
          - depends_on
          exit_code: 7
          name: name
          started: 4
          error: error
          errignore: true
          status: null
        - detached: true
          schema: schema
          image: image
          number: 1
          stopped: 5
          depends_on:
          - depends_on
          - depends_on
          exit_code: 7
          name: name
          started: 4
          error: error
          errignore: true
          status: null
        errignore: true
        labels:
          key: labels
        execution_id: 4
        number: 1
        machine: machine
        repo_id: 1
        exit_code: 7
        limit: 1
        name: name
        variant: variant
        arch: arch
        status: status
    TypesStep:
      type: object
      properties:
        depends_on:
          type: array
          items:
            type: string
        detached:
          type: boolean
        errignore:
          type: boolean
        error:
          type: string
        exit_code:
          type: integer
        image:
          type: string
        name:
          type: string
        number:
          type: integer
        schema:
          type: string
        started:
          type: integer
        status:
          $ref: '#/components/schemas/EnumCIStatus'
        stopped:
          type: integer
      example:
        detached: true
        schema: schema
        image: image
        number: 1
        stopped: 5
        depends_on:
        - depends_on
        - depends_on
        exit_code: 7
        name: name
        started: 4
        error: error
        errignore: true
        status: null
    TypesTemplate:
      type: object
      properties:
        created:
          type: integer
        data:
          type: string
        description:
          type: string
        id:
          type: integer
        space_id:
          type: integer
        uid:
          type: string
        updated:
          type: integer
      example:
        uid: uid
        data: data
        created: 0
        description: description
        id: 6
        space_id: 1
        updated: 5
    TypesToken:
      type: object
      properties:
        created_by:
          type: integer
        expires_at:
          type: integer
          nullable: true
        issued_at:
          type: integer
        principal_id:
          type: integer
        type:
          $ref: '#/components/schemas/EnumTokenType'
        uid:
          type: string
      example:
        uid: uid
        expires_at: 6
        type: type
        created_by: 0
        issued_at: 1
        principal_id: 5
    TypesTokenResponse:
      type: object
      properties:
        access_token:
          type: string
        token:
          $ref: '#/components/schemas/TypesToken'
      example:
        access_token: access_token
        token:
          uid: uid
          expires_at: 6
          type: type
          created_by: 0
          issued_at: 1
          principal_id: 5
    TypesTrigger:
      type: object
      properties:
        actions:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/EnumTriggerAction'
        created:
          type: integer
        created_by:
          type: integer
        description:
          type: string
        disabled:
          type: boolean
        id:
          type: integer
        pipeline_id:
          type: integer
        repo_id:
          type: integer
        trigger_type:
          type: string
        uid:
          type: string
        updated:
          type: integer
      example:
        uid: uid
        created: 0
        repo_id: 5
        trigger_type: trigger_type
        pipeline_id: 5
        description: description
        disabled: true
        id: 1
        actions:
        - branch_created
        - branch_created
        created_by: 6
        updated: 2
    TypesUser:
      type: object
      properties:
        admin:
          type: boolean
        blocked:
          type: boolean
        created:
          type: integer
        display_name:
          type: string
        email:
          type: string
        uid:
          type: string
        updated:
          type: integer
      example:
        uid: uid
        blocked: true
        created: 0
        admin: true
        display_name: display_name
        updated: 6
        email: email
    TypesUserGroupOwnerEvaluation:
      type: object
      properties:
        evaluations:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesOwnerEvaluation'
        id:
          type: string
        name:
          type: string
      example:
        evaluations:
        - null
        - null
        name: name
        id: id
    TypesViolation:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        params:
          type: array
          nullable: true
          items: {}
      example:
        code: code
        message: message
        params:
        - ""
        - ""
    TypesWebhookExecution:
      type: object
      properties:
        created:
          type: integer
        duration:
          type: integer
        error:
          type: string
        id:
          type: integer
        request:
          $ref: '#/components/schemas/TypesWebhookExecutionRequest'
        response:
          $ref: '#/components/schemas/TypesWebhookExecutionResponse'
        result:
          $ref: '#/components/schemas/EnumWebhookExecutionResult'
        retrigger_of:
          type: integer
          nullable: true
        retriggerable:
          type: boolean
        trigger_type:
          $ref: '#/components/schemas/EnumWebhookTrigger'
        webhook_id:
          type: integer
      example:
        duration: 6
        result: fatal_error
        request:
          headers: headers
          body: body
          url: url
        retriggerable: true
        webhook_id: 2
        created: 0
        response:
          headers: headers
          status_code: 5
          body: body
          status: status
        trigger_type: branch_created
        retrigger_of: 5
        id: 1
        error: error
    TypesWebhookExecutionRequest:
      type: object
      properties:
        body:
          type: string
        headers:
          type: string
        url:
          type: string
      example:
        headers: headers
        body: body
        url: url
    TypesWebhookExecutionResponse:
      type: object
      properties:
        body:
          type: string
        headers:
          type: string
        status:
          type: string
        status_code:
          type: integer
      example:
        headers: headers
        status_code: 5
        body: body
        status: status
    UploadResult:
      type: object
      properties:
        file_path:
          type: string
      example:
        file_path: file_path
    UserUpdateInput:
      type: object
      properties:
        display_name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
    UsererrorError:
      type: object
      properties:
        message:
          type: string
        values:
          type: object
          additionalProperties: {}
    commits_commit_sha_body:
      type: object
      properties:
        check_uid:
          type: string
        link:
          type: string
        payload:
          $ref: '#/components/schemas/TypesCheckPayload'
        status:
          $ref: '#/components/schemas/EnumCheckStatus'
        summary:
          type: string
    repo_ref_rules_body:
      type: object
      properties:
        definition:
          $ref: '#/components/schemas/OpenapiRuleDefinition'
        description:
          type: string
        pattern:
          $ref: '#/components/schemas/ProtectionPattern'
        state:
          $ref: '#/components/schemas/EnumRuleState'
        type:
          $ref: '#/components/schemas/OpenapiRuleType'
        uid:
          type: string
    rules_rule_uid_body:
      type: object
      properties:
        definition:
          $ref: '#/components/schemas/OpenapiRuleDefinition'
        description:
          type: string
          nullable: true
        pattern:
          $ref: '#/components/schemas/ProtectionPattern'
        state:
          $ref: '#/components/schemas/EnumRuleState'
        type:
          $ref: '#/components/schemas/OpenapiRuleType'
        uid:
          type: string
    repos_import_body:
      type: object
      properties:
        description:
          type: string
        parent_ref:
          type: string
        pipelines:
          $ref: '#/components/schemas/ImporterPipelineOption'
        provider:
          $ref: '#/components/schemas/ImporterProvider'
        provider_repo:
          type: string
        uid:
          type: string
    inline_response_200:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
      example:
        label: label
        value: value
    space_ref_members_body:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/EnumMembershipRole'
        user_uid:
          type: string
    members_user_uid_body:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/EnumMembershipRole'
    spaces_import_body:
      type: object
      properties:
        description:
          type: string
        is_public:
          type: boolean
        parent_ref:
          type: string
        pipelines:
          $ref: '#/components/schemas/ImporterPipelineOption'
        provider:
          $ref: '#/components/schemas/ImporterProvider'
        provider_space:
          type: string
        uid:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
