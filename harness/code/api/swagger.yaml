openapi: 3.0.0
info:
  title: API Specification
  version: 0.0.0
servers:
- url: /gateway/code/api/v1
security:
- bearerAuth: []
  x-api-key: []
paths:
  /repos:
    get:
      tags:
      - repository
      summary: List repositories
      operationId: listRepos
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: query
        in: query
        description: The substring which is used to filter the repositories by their
          path name.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        description: The data by which the repositories are sorted.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - identifier
          - created
          - updated
          default: identifier
      - name: order
        in: query
        description: The order of the output.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
          default: asc
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesRepository'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - repository
      summary: Create repository
      operationId: createRepository
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateRepositoryRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}:
    get:
      tags:
      - repository
      summary: Get repository
      operationId: getRepository
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - repository
      summary: Soft delete repository
      operationId: deleteRepository
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoSoftDeleteResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - repository
      summary: Update repository
      operationId: updateRepository
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateRepoRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/blame/{path}:
    get:
      tags:
      - repository
      summary: Get git blame
      operationId: getBlame
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: git_ref
        in: query
        description: The git reference (branch / tag / commitID) that will be used
          to retrieve the data. If no value is provided the default branch of the
          repository is used.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "{Repository Default Branch}"
      - name: line_from
        in: query
        description: Line number from which the file data is considered
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: line_to
        in: query
        description: Line number to which the file data is considered
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: path
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GitBlamePart'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/branches:
    get:
      tags:
      - repository
      summary: List branches
      operationId: listBranches
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: include_commit
        in: query
        description: Indicates whether optional commit information should be included
          in the response.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: query
        in: query
        description: The substring by which the branches are filtered.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: order
        in: query
        description: The order of the output.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
          default: asc
      - name: sort
        in: query
        description: The data by which the branches are sorted.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - name
          - date
          default: name
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepoBranch'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - repository
      summary: Create branch
      operationId: createBranch
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateBranchRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoBranch'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/branches/{branch_name}:
    get:
      tags:
      - repository
      summary: Get branch
      operationId: getBranch
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: branch_name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoBranch'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - repository
      summary: Delete branch
      operationId: deleteBranch
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: bypass_rules
        in: query
        description: Bypass rule violations if possible.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: branch_name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/checks/commits/{commit_sha}:
    get:
      tags:
      - status_checks
      summary: List status check results
      operationId: listStatusCheckResults
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: query
        in: query
        description: The substring which is used to filter the status checks by their
          UID.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: commit_sha
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesCheck'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    put:
      tags:
      - status_checks
      summary: Report status check results
      operationId: reportStatusCheckResults
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: commit_sha
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/commits_commit_sha_body'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCheck'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/checks/recent:
    get:
      tags:
      - status_checks
      summary: List recent status check
      operationId: listStatusCheckRecent
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: query
        in: query
        description: The substring which is used to filter the status checks by their
          UID.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: since
        in: query
        description: The timestamp (in Unix time millis) since the status checks have
          been run.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/codeowners/validate:
    get:
      tags:
      - repository
      summary: Validate code owners file
      operationId: codeOwnersValidate
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: git_ref
        in: query
        description: The git reference (branch / tag / commitID) that will be used
          to retrieve the data. If no value is provided the default branch of the
          repository is used.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "{Repository Default Branch}"
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/commits:
    get:
      tags:
      - repository
      summary: List commits
      operationId: listCommits
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: git_ref
        in: query
        description: The git reference (branch / tag / commitID) that will be used
          to retrieve the data. If no value is provided the default branch of the
          repository is used.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "{Repository Default Branch}"
      - name: after
        in: query
        description: The result should only contain commits that occurred after the
          provided reference.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: path
        in: query
        description: Path for which commit information should be retrieved
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: ""
      - name: since
        in: query
        description: Epoch since when commit information should be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: until
        in: query
        description: Epoch until when commit information should be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: committer
        in: query
        description: Committer pattern for which commit information should be retrieved.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesListCommitResponse'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - repository
      summary: Commit files
      operationId: commitFiles
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommitFilesRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCommitFilesResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/commits/{commit_sha}:
    get:
      tags:
      - repository
      summary: Get commit
      operationId: getCommit
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: commit_sha
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCommit'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/commits/{commit_sha}/diff:
    get:
      tags:
      - repository
      summary: Get raw git diff of a commit
      operationId: getCommitDiff
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: commit_sha
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
                x-content-type: text/plain
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/commits/calculate-divergence:
    post:
      tags:
      - repository
      summary: Get commit divergence
      operationId: calculateCommitDivergence
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCalculateCommitDivergenceRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepoCommitDivergence'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/content/{path}:
    get:
      tags:
      - repository
      summary: Get content of a file
      operationId: getContent
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: path
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiGetContentOutput'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/diff-stats/{range}:
    get:
      tags:
      - repository
      summary: Get diff stats
      operationId: diffStats
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: path
        in: query
        description: provide path for diff operation
        required: false
        style: form
        explode: true
        schema:
          type: array
          description: provide path for diff operation
          items:
            type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: range
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: main..dev
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesDiffStats'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/diff/{range}:
    get:
      tags:
      - repository
      summary: Get raw diff
      operationId: rawDiff
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: path
        in: query
        description: provide path for diff operation
        required: false
        style: form
        explode: true
        schema:
          type: array
          description: provide path for diff operation
          items:
            type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: range
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: main..dev
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GitFileDiff'
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - repository
      summary: Get raw diff
      operationId: rawDiffPost
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: range
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: main..dev
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiPostRawDiffRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GitFileDiff'
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/merge-check/{range}:
    post:
      tags:
      - repository
      summary: Check mergeability
      operationId: mergeCheck
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: path
        in: query
        description: provide path for diff operation
        required: false
        style: form
        explode: true
        schema:
          type: array
          description: provide path for diff operation
          items:
            type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: range
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: main..dev
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoMergeCheck'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/move:
    post:
      tags:
      - repository
      summary: Move repository
      operationId: moveRepository
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMoveRepoRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/path-details:
    post:
      tags:
      - repository
      summary: Get commit details
      operationId: pathDetails
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: git_ref
        in: query
        description: The git reference (branch / tag / commitID) that will be used
          to retrieve the data. If no value is provided the default branch of the
          repository is used.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "{Repository Default Branch}"
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiPathsDetailsRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoPathsDetailsOutput'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq:
    get:
      tags:
      - pullreq
      summary: List pull requests
      operationId: listPullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: state
        in: query
        description: The state of the pull requests to include in the result.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - closed
            - merged
            - open
            default: open
      - name: source_repo_identifier
        in: query
        description: Source repository ref of the pull requests.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: source_branch
        in: query
        description: Source branch of the pull requests.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: target_branch
        in: query
        description: Target branch of the pull requests.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: query
        in: query
        description: The substring by which the pull requests are filtered.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: created_by
        in: query
        description: The principal ID who created pull requests.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: order
        in: query
        description: The order of the output.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
          default: asc
      - name: sort
        in: query
        description: The data by which the pull requests are sorted.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - created
          - edited
          - merged
          - number
          - updated
          default: number
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesPullReq'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - pullreq
      summary: Create pull request
      operationId: createPullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreatePullReqRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}:
    get:
      tags:
      - pullreq
      summary: Get pull request
      operationId: getPullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - pullreq
      summary: Update pull request
      operationId: updatePullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdatePullReqRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/activities:
    get:
      tags:
      - pullreq
      summary: List activities
      operationId: listPullReqActivities
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: kind
        in: query
        description: The kind of the pull request activity to include in the result.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - change-comment
            - comment
            - system
      - name: type
        in: query
        description: The type of the pull request activity to include in the result.
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            enum:
            - branch-delete
            - branch-update
            - code-comment
            - comment
            - merge
            - review-submit
            - state-change
            - title-change
      - name: after
        in: query
        description: The result should contain only entries created at and after this
          timestamp (unix millis).
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
      - name: before
        in: query
        description: The result should contain only entries created before this timestamp
          (unix millis).
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesPullReqActivity'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/checks:
    get:
      tags:
      - pullreq
      summary: Get status checks
      operationId: checksPullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesPullReqChecks'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/codeowners:
    get:
      tags:
      - pullreq
      summary: Get code owners
      operationId: codeownersPullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCodeOwnerEvaluation'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/comments:
    post:
      tags:
      - pullreq
      summary: Create new pull request comment
      operationId: commentCreatePullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommentCreatePullReqRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqActivity'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/comments/{pullreq_comment_id}:
    delete:
      tags:
      - pullreq
      summary: Delete pull request comment
      operationId: commentDeletePullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: pullreq_comment_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - pullreq
      summary: Update pull request comment
      operationId: commentUpdatePullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: pullreq_comment_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommentUpdatePullReqRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqActivity'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/comments/{pullreq_comment_id}/status:
    put:
      tags:
      - pullreq
      summary: Update status of pull request comment
      operationId: commentStatusPullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: pullreq_comment_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommentStatusPullReqRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqActivity'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/commits:
    get:
      tags:
      - pullreq
      summary: List commits
      operationId: listPullReqCommits
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesCommit'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/diff:
    get:
      tags:
      - pullreq
      summary: Get file changes
      operationId: diffPullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: path
        in: query
        description: provide path for diff operation
        required: false
        style: form
        explode: true
        schema:
          type: array
          description: provide path for diff operation
          items:
            type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GitFileDiff'
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - pullreq
      summary: Get file changes
      operationId: diffPullReqPost
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiPostRawPRDiffRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GitFileDiff'
                x-content-type: application/json
            text/plain:
              schema:
                type: string
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/file-views:
    get:
      tags:
      - pullreq
      summary: List viewed files
      operationId: fileViewListPullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesPullReqFileView'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    put:
      tags:
      - pullreq
      summary: Mark file as viewed
      operationId: fileViewAddPullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiFileViewAddPullReqRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqFileView'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/file-views/{file_path}:
    delete:
      tags:
      - pullreq
      summary: Remove file view
      operationId: fileViewDeletePullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: file_path
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/merge:
    post:
      tags:
      - pullreq
      summary: Merge
      operationId: mergePullReqOp
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMergePullReq'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesMergeResponse'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesMergeViolations'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/metadata:
    get:
      tags:
      - pullreq
      summary: Get metadata
      operationId: pullReqMetaData
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqStats'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/reviewers:
    get:
      tags:
      - pullreq
      summary: List reviewers
      operationId: reviewerListPullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesPullReqReviewer'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    put:
      tags:
      - pullreq
      summary: Add reviewer
      operationId: reviewerAddPullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiReviewerAddPullReqRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqReviewer'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/reviewers/{pullreq_reviewer_id}:
    delete:
      tags:
      - pullreq
      summary: Remove reviewer
      operationId: reviewerDeletePullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      - name: pullreq_reviewer_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/reviews:
    post:
      tags:
      - pullreq
      summary: Submit review
      operationId: reviewSubmitPullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiReviewSubmitPullReqRequest'
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/pullreq/{pullreq_number}/state:
    post:
      tags:
      - pullreq
      summary: Update state of pull request
      operationId: statePullReq
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pullreq_number
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiStatePullReqRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/purge:
    post:
      tags:
      - repository
      summary: Purge repository
      operationId: purgeRepository
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: deleted_at
        in: query
        description: The exact time the resource was delete at in epoch format.
        required: true
        style: form
        explode: true
        schema:
          type: integer
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/raw/{path}:
    get:
      tags:
      - repository
      summary: Get raw file content
      operationId: getRaw
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: git_ref
        in: query
        description: The git reference (branch / tag / commitID) that will be used
          to retrieve the data. If no value is provided the default branch of the
          repository is used.
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "{Repository Default Branch}"
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: path
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/restore:
    post:
      tags:
      - repository
      summary: Restore repository
      operationId: restoreRepository
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: deleted_at
        in: query
        description: The exact time the resource was delete at in epoch format.
        required: true
        style: form
        explode: true
        schema:
          type: integer
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiRestoreRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/rules:
    get:
      tags:
      - repository
      summary: List protection rules
      operationId: ruleList
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: query
        in: query
        description: The substring by which the repository protection rules are filtered.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: order
        in: query
        description: The order of the output.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
          default: asc
      - name: sort
        in: query
        description: The field by which the protection rules are sorted.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - created_at
          - identifier
          - uid
          - updated_at
          default: created_at
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenapiRule'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - repository
      summary: Add protection rule
      operationId: ruleAdd
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/repo_identifier_rules_body'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiRule'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/rules/{rule_uid}:
    get:
      tags:
      - repository
      summary: Get protection rule
      operationId: ruleGet
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rule_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiRule'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - repository
      summary: Delete protection rule
      operationId: ruleDelete
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rule_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - repository
      summary: Update protection rule
      operationId: ruleUpdate
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: rule_uid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rules_rule_uid_body'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiRule'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/tags:
    get:
      tags:
      - repository
      summary: List tags
      operationId: listTags
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: include_commit
        in: query
        description: Indicates whether optional commit information should be included
          in the response.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: query
        in: query
        description: The substring by which the tags are filtered.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: order
        in: query
        description: The order of the output.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
          default: asc
      - name: sort
        in: query
        description: The data by which the tags are sorted.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - name
          - date
          default: name
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RepoCommitTag'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - repository
      summary: Create tag
      operationId: createTag
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateTagRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoCommitTag'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/tags/{tag_name}:
    delete:
      tags:
      - repository
      summary: Delete tag
      operationId: deleteTag
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: bypass_rules
        in: query
        description: Bypass rule violations if possible.
        required: false
        style: form
        explode: true
        schema:
          type: boolean
          default: false
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: tag_name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRulesViolations'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/uploads:
    post:
      tags:
      - upload
      summary: Repo artifact upload
      operationId: repoArtifactUpload
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResult'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/uploads/{file_ref}:
    get:
      tags:
      - upload
      summary: Repo artifact download
      operationId: repoArtifactDownload
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: file_ref
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "307":
          description: Temporary Redirect
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/webhooks:
    get:
      tags:
      - webhook
      summary: List webhooks
      operationId: listWebhooks
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: query
        in: query
        description: The substring which is used to filter the webhooks by their identifier.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sort
        in: query
        description: The data by which the webhooks are sorted.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - id
          - uid
          - display_name
          - created
          - updated
          default: identifier
      - name: order
        in: query
        description: The order of the output.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
          default: asc
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OpenapiWebhookType'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    post:
      tags:
      - webhook
      summary: Create webhook
      operationId: createWebhook
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateWebhookRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/webhooks/{webhook_identifier}:
    get:
      tags:
      - webhook
      summary: Get webhook
      operationId: getWebhook
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: webhook_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    delete:
      tags:
      - webhook
      summary: Delete webhook
      operationId: deleteWebhook
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: webhook_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
    patch:
      tags:
      - webhook
      summary: Update webhook
      operationId: updateWebhook
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: webhook_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateWebhookRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/webhooks/{webhook_identifier}/executions:
    get:
      tags:
      - webhook
      summary: List webhook executions
      operationId: listWebhookExecutions
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: webhook_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TypesWebhookExecution'
                x-content-type: application/json
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/{repo_identifier}/webhooks/{webhook_identifier}/executions/{webhook_execution_id}:
    get:
      tags:
      - webhook
      summary: Get webhook execution
      operationId: getWebhookExecution
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: page
        in: query
        description: The page to return.
        required: false
        style: form
        explode: true
        schema:
          minimum: 1
          type: integer
          default: 1
      - name: limit
        in: query
        description: The maximum number of results to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 100
          minimum: 1
          type: integer
          default: 30
      - name: repo_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: webhook_identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: webhook_execution_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesWebhookExecution'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /repos/import:
    post:
      tags:
      - repository
      summary: Import repository
      operationId: importRepository
      parameters:
      - name: accountIdentifier
        in: query
        description: Account Identifier for the Entity..
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        description: Organization Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        description: Project Identifier for the Entity..
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/repos_import_body'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /resources/gitignore:
    get:
      tags:
      - resource
      summary: List available gitignore names
      operationId: listGitignore
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
  /resources/license:
    get:
      tags:
      - resource
      summary: List available license names
      operationId: listLicenses
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200'
                x-content-type: application/json
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
components:
  schemas:
    EnumCheckPayloadKind:
      type: string
      enum:
      - ""
      - markdown
      - pipeline
      - raw
    EnumCheckStatus:
      type: string
      enum:
      - error
      - failure
      - pending
      - running
      - success
    EnumContentEncodingType:
      type: string
      enum:
      - base64
      - utf8
    EnumFileDiffStatus:
      type: string
    EnumMergeCheckStatus:
      type: string
    EnumMergeMethod:
      type: string
      enum:
      - merge
      - rebase
      - squash
    EnumPrincipalType:
      type: string
      enum:
      - service
      - serviceaccount
      - user
    EnumPullReqActivityKind:
      type: string
      enum:
      - change-comment
      - comment
      - system
    EnumPullReqActivityType:
      type: string
      enum:
      - branch-delete
      - branch-update
      - code-comment
      - comment
      - merge
      - review-submit
      - state-change
      - title-change
    EnumPullReqCommentStatus:
      type: string
      enum:
      - active
      - resolved
    EnumPullReqReviewDecision:
      type: string
      enum:
      - approved
      - changereq
      - pending
      - reviewed
    EnumPullReqReviewerType:
      type: string
      enum:
      - assigned
      - requested
      - self_assigned
    EnumPullReqState:
      type: string
      enum:
      - closed
      - merged
      - open
    EnumRuleState:
      type: string
      nullable: true
      enum:
      - active
      - disabled
      - monitor
    EnumWebhookExecutionResult:
      type: string
      nullable: true
      enum:
      - fatal_error
      - retriable_error
      - success
    EnumWebhookParent:
      type: string
      enum:
      - repo
      - space
    EnumWebhookTrigger:
      type: string
      enum:
      - branch_created
      - branch_deleted
      - branch_updated
      - pullreq_branch_updated
      - pullreq_closed
      - pullreq_comment_created
      - pullreq_created
      - pullreq_merged
      - pullreq_reopened
      - tag_created
      - tag_deleted
      - tag_updated
    GitBlamePart:
      type: object
      properties:
        commit:
          $ref: '#/components/schemas/GitCommit'
        lines:
          type: array
          nullable: true
          items:
            type: string
      example:
        commit:
          committer: null
          author:
            identity:
              name: name
              email: email
            when: 2000-01-23T04:56:07.000+00:00
          diff_stats: {}
          file_stats: {}
          message: message
          title: title
          sha: sha
          parent_shas:
          - parent_shas
          - parent_shas
        lines:
        - lines
        - lines
    GitCommit:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/GitSignature'
        committer:
          $ref: '#/components/schemas/GitSignature'
        diff_stats:
          $ref: '#/components/schemas/GitCommitDiffStats'
        file_stats:
          $ref: '#/components/schemas/GitCommitFileStats'
        message:
          type: string
        parent_shas:
          type: array
          items:
            type: string
        sha:
          type: string
        title:
          type: string
      example:
        committer: null
        author:
          identity:
            name: name
            email: email
          when: 2000-01-23T04:56:07.000+00:00
        diff_stats: {}
        file_stats: {}
        message: message
        title: title
        sha: sha
        parent_shas:
        - parent_shas
        - parent_shas
    GitCommitDiffStats:
      type: object
    GitCommitFileStats:
      type: object
    GitFileAction:
      type: string
      enum:
      - CREATE
      - UPDATE
      - DELETE
      - MOVE
    GitFileDiff:
      type: object
      properties:
        additions:
          type: integer
        changes:
          type: integer
        deletions:
          type: integer
        is_binary:
          type: boolean
        is_submodule:
          type: boolean
        old_path:
          type: string
        old_sha:
          type: string
        patch:
          type: array
          items:
            minimum: 0
            type: integer
        path:
          type: string
        sha:
          type: string
        status:
          $ref: '#/components/schemas/EnumFileDiffStatus'
      example:
        patch:
        - 0
        - 0
        path: path
        additions: 0
        deletions: 1
        changes: 6
        is_binary: true
        is_submodule: true
        old_sha: old_sha
        old_path: old_path
        sha: sha
        status: status
    GitIdentity:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
      example:
        name: name
        email: email
    GitPathDetails:
      type: object
      properties:
        last_commit:
          $ref: '#/components/schemas/GitCommit'
        path:
          type: string
      example:
        path: path
        last_commit:
          committer: null
          author:
            identity:
              name: name
              email: email
            when: 2000-01-23T04:56:07.000+00:00
          diff_stats: {}
          file_stats: {}
          message: message
          title: title
          sha: sha
          parent_shas:
          - parent_shas
          - parent_shas
    GitSignature:
      type: object
      properties:
        identity:
          $ref: '#/components/schemas/GitIdentity'
        when:
          type: string
          format: date-time
      example:
        identity:
          name: name
          email: email
        when: 2000-01-23T04:56:07.000+00:00
    ImporterPipelineOption:
      type: string
      enum:
      - convert
      - ignore
    ImporterProvider:
      type: object
      properties:
        host:
          type: string
        password:
          type: string
        type:
          $ref: '#/components/schemas/ImporterProviderType'
        username:
          type: string
    ImporterProviderType:
      type: string
      enum:
      - github
      - gitlab
      - bitbucket
      - stash
      - gitea
      - gogs
    OpenapiCalculateCommitDivergenceRequest:
      type: object
      properties:
        max_count:
          type: integer
        requests:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/RepoCommitDivergenceRequest'
    OpenapiCommentCreatePullReqRequest:
      type: object
      properties:
        line_end:
          type: integer
        line_end_new:
          type: boolean
        line_start:
          type: integer
        line_start_new:
          type: boolean
        parent_id:
          type: integer
        path:
          type: string
        source_commit_sha:
          type: string
        target_commit_sha:
          type: string
        text:
          type: string
    OpenapiCommentStatusPullReqRequest:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/EnumPullReqCommentStatus'
    OpenapiCommentUpdatePullReqRequest:
      type: object
      properties:
        text:
          type: string
    OpenapiCommitFilesRequest:
      type: object
      properties:
        actions:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/RepoCommitFileAction'
        branch:
          type: string
        bypass_rules:
          type: boolean
        dry_run_rules:
          type: boolean
        message:
          type: string
        new_branch:
          type: string
        title:
          type: string
    OpenapiContent:
      type: object
      oneOf:
      - $ref: '#/components/schemas/RepoFileContent'
      - $ref: '#/components/schemas/OpenapiDirContent'
      - $ref: '#/components/schemas/RepoSymlinkContent'
      - $ref: '#/components/schemas/RepoSubmoduleContent'
    OpenapiContentInfo:
      type: object
      properties:
        latest_commit:
          $ref: '#/components/schemas/TypesCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/OpenapiContentType'
    OpenapiContentType:
      type: string
      enum:
      - file
      - dir
      - symlink
      - submodule
    OpenapiCreateBranchRequest:
      type: object
      properties:
        bypass_rules:
          type: boolean
        name:
          type: string
        target:
          type: string
    OpenapiCreatePullReqRequest:
      type: object
      properties:
        description:
          type: string
        is_draft:
          type: boolean
        source_branch:
          type: string
        source_repo_ref:
          type: string
        target_branch:
          type: string
        title:
          type: string
    OpenapiCreateRepositoryRequest:
      type: object
      properties:
        default_branch:
          type: string
        description:
          type: string
        fork_id:
          type: integer
        git_ignore:
          type: string
        identifier:
          type: string
        is_public:
          type: boolean
        license:
          type: string
        parent_ref:
          type: string
        readme:
          type: boolean
        uid:
          type: string
          deprecated: true
    OpenapiCreateTagRequest:
      type: object
      properties:
        bypass_rules:
          type: boolean
        message:
          type: string
        name:
          type: string
        target:
          type: string
    OpenapiCreateWebhookRequest:
      type: object
      properties:
        description:
          type: string
        display_name:
          type: string
        enabled:
          type: boolean
        identifier:
          type: string
        insecure:
          type: boolean
        secret:
          type: string
        triggers:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/EnumWebhookTrigger'
        uid:
          type: string
          deprecated: true
        url:
          type: string
    OpenapiDirContent:
      type: object
      properties:
        entries:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/OpenapiContentInfo'
    OpenapiFileViewAddPullReqRequest:
      type: object
      properties:
        commit_sha:
          type: string
        path:
          type: string
    OpenapiGetContentOutput:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/OpenapiContent'
        latest_commit:
          $ref: '#/components/schemas/TypesCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/OpenapiContentType'
      example:
        path: path
        name: name
        latest_commit:
          committer: null
          author:
            identity:
              name: name
              email: email
            when: 2000-01-23T04:56:07.000+00:00
          diff_stats:
            total: 1
            additions: 0
            deletions: 6
          message: message
          title: title
          sha: sha
          parent_shas:
          - parent_shas
          - parent_shas
        type: file
        sha: sha
        content: ""
    OpenapiMergePullReq:
      type: object
      properties:
        bypass_rules:
          type: boolean
        dry_run:
          type: boolean
        method:
          $ref: '#/components/schemas/EnumMergeMethod'
        source_sha:
          type: string
    OpenapiMoveRepoRequest:
      type: object
      properties:
        identifier:
          type: string
          nullable: true
        uid:
          type: string
          nullable: true
          deprecated: true
    OpenapiPathsDetailsRequest:
      type: object
      properties:
        paths:
          type: array
          nullable: true
          items:
            type: string
    OpenapiPostRawDiffRequest:
      type: array
      nullable: true
      items:
        $ref: '#/components/schemas/TypesFileDiffRequest'
    OpenapiPostRawPRDiffRequest:
      type: array
      nullable: true
      items:
        $ref: '#/components/schemas/TypesFileDiffRequest'
    OpenapiRestoreRequest:
      type: object
      properties:
        new_identifier:
          type: string
    OpenapiReviewSubmitPullReqRequest:
      type: object
      properties:
        commit_sha:
          type: string
        decision:
          $ref: '#/components/schemas/EnumPullReqReviewDecision'
    OpenapiReviewerAddPullReqRequest:
      type: object
      properties:
        reviewer_id:
          type: integer
    OpenapiRule:
      type: object
      properties:
        created:
          type: integer
        created_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        definition:
          $ref: '#/components/schemas/OpenapiRuleDefinition'
        description:
          type: string
        identifier:
          type: string
        pattern:
          $ref: '#/components/schemas/ProtectionPattern'
        state:
          $ref: '#/components/schemas/EnumRuleState'
        type:
          $ref: '#/components/schemas/OpenapiRuleType'
        updated:
          type: integer
        users:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/TypesPrincipalInfo'
          nullable: true
      example:
        identifier: identifier
        created: 0
        pattern:
          include:
          - include
          - include
          default: true
          exclude:
          - exclude
          - exclude
        description: description
        definition: ""
        state: active
        type: branch
        created_by:
          uid: uid
          created: 5
          id: 5
          display_name: display_name
          type: service
          updated: 2
          email: email
        updated: 6
        users:
          key: null
    OpenapiRuleDefinition:
      type: object
      oneOf:
      - $ref: '#/components/schemas/ProtectionBranch'
    OpenapiRuleType:
      type: string
      enum:
      - branch
    OpenapiStatePullReqRequest:
      type: object
      properties:
        is_draft:
          type: boolean
        state:
          $ref: '#/components/schemas/EnumPullReqState'
    OpenapiUpdatePullReqRequest:
      type: object
      properties:
        description:
          type: string
        title:
          type: string
    OpenapiUpdateRepoRequest:
      type: object
      properties:
        description:
          type: string
          nullable: true
        is_public:
          type: boolean
          nullable: true
    OpenapiUpdateWebhookRequest:
      type: object
      properties:
        description:
          type: string
          nullable: true
        display_name:
          type: string
          nullable: true
        enabled:
          type: boolean
          nullable: true
        identifier:
          type: string
          nullable: true
        insecure:
          type: boolean
          nullable: true
        secret:
          type: string
          nullable: true
        triggers:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/EnumWebhookTrigger'
        uid:
          type: string
          nullable: true
          deprecated: true
        url:
          type: string
          nullable: true
    OpenapiWebhookType:
      type: object
      properties:
        created:
          type: integer
        created_by:
          type: integer
        description:
          type: string
        display_name:
          type: string
        enabled:
          type: boolean
        has_secret:
          type: boolean
        id:
          type: integer
        identifier:
          type: string
        insecure:
          type: boolean
        latest_execution_result:
          $ref: '#/components/schemas/EnumWebhookExecutionResult'
        parent_id:
          type: integer
        parent_type:
          $ref: '#/components/schemas/EnumWebhookParent'
        triggers:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/EnumWebhookTrigger'
        updated:
          type: integer
        url:
          type: string
        version:
          type: integer
      example:
        identifier: identifier
        latest_execution_result: fatal_error
        has_secret: true
        created: 0
        description: description
        display_name: display_name
        parent_type: repo
        triggers:
        - branch_created
        - branch_created
        created_by: 6
        version: 2
        enabled: true
        url: url
        parent_id: 5
        insecure: true
        id: 1
        updated: 5
    ProtectionBranch:
      type: object
      properties:
        bypass:
          $ref: '#/components/schemas/ProtectionDefBypass'
        lifecycle:
          $ref: '#/components/schemas/ProtectionDefLifecycle'
        pullreq:
          $ref: '#/components/schemas/ProtectionDefPullReq'
    ProtectionDefApprovals:
      type: object
      properties:
        require_code_owners:
          type: boolean
        require_latest_commit:
          type: boolean
        require_minimum_count:
          type: integer
        require_no_change_request:
          type: boolean
    ProtectionDefBypass:
      type: object
      properties:
        repo_owners:
          type: boolean
        user_ids:
          type: array
          items:
            type: integer
    ProtectionDefComments:
      type: object
      properties:
        require_resolve_all:
          type: boolean
    ProtectionDefLifecycle:
      type: object
      properties:
        create_forbidden:
          type: boolean
        delete_forbidden:
          type: boolean
        update_forbidden:
          type: boolean
    ProtectionDefMerge:
      type: object
      properties:
        delete_branch:
          type: boolean
        strategies_allowed:
          type: array
          items:
            $ref: '#/components/schemas/EnumMergeMethod'
    ProtectionDefPullReq:
      type: object
      properties:
        approvals:
          $ref: '#/components/schemas/ProtectionDefApprovals'
        comments:
          $ref: '#/components/schemas/ProtectionDefComments'
        merge:
          $ref: '#/components/schemas/ProtectionDefMerge'
        status_checks:
          $ref: '#/components/schemas/ProtectionDefStatusChecks'
    ProtectionDefStatusChecks:
      type: object
      properties:
        require_identifiers:
          type: array
          items:
            type: string
    ProtectionPattern:
      type: object
      properties:
        default:
          type: boolean
        exclude:
          type: array
          items:
            type: string
        include:
          type: array
          items:
            type: string
      nullable: true
      example:
        include:
        - include
        - include
        default: true
        exclude:
        - exclude
        - exclude
    RepoBranch:
      type: object
      properties:
        commit:
          $ref: '#/components/schemas/TypesCommit'
        name:
          type: string
        sha:
          type: string
      example:
        commit:
          committer: null
          author:
            identity:
              name: name
              email: email
            when: 2000-01-23T04:56:07.000+00:00
          diff_stats:
            total: 1
            additions: 0
            deletions: 6
          message: message
          title: title
          sha: sha
          parent_shas:
          - parent_shas
          - parent_shas
        name: name
        sha: sha
    RepoCommitDivergence:
      type: object
      properties:
        ahead:
          type: integer
        behind:
          type: integer
      example:
        behind: 6
        ahead: 0
    RepoCommitDivergenceRequest:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
    RepoCommitFileAction:
      type: object
      properties:
        action:
          $ref: '#/components/schemas/GitFileAction'
        encoding:
          $ref: '#/components/schemas/EnumContentEncodingType'
        path:
          type: string
        payload:
          type: string
        sha:
          type: string
    RepoCommitTag:
      type: object
      properties:
        commit:
          $ref: '#/components/schemas/TypesCommit'
        is_annotated:
          type: boolean
        message:
          type: string
        name:
          type: string
        sha:
          type: string
        tagger:
          $ref: '#/components/schemas/TypesSignature'
        title:
          type: string
      example:
        is_annotated: true
        tagger:
          identity:
            name: name
            email: email
          when: 2000-01-23T04:56:07.000+00:00
        commit:
          committer: null
          author:
            identity:
              name: name
              email: email
            when: 2000-01-23T04:56:07.000+00:00
          diff_stats:
            total: 1
            additions: 0
            deletions: 6
          message: message
          title: title
          sha: sha
          parent_shas:
          - parent_shas
          - parent_shas
        name: name
        message: message
        title: title
        sha: sha
    RepoContent: {}
    RepoContentInfo:
      type: object
      properties:
        latest_commit:
          $ref: '#/components/schemas/TypesCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/RepoContentType'
    RepoContentType:
      type: string
    RepoFileContent:
      type: object
      properties:
        data:
          type: string
        data_size:
          type: integer
        encoding:
          $ref: '#/components/schemas/EnumContentEncodingType'
        size:
          type: integer
    RepoMergeCheck:
      type: object
      properties:
        conflict_files:
          type: array
          items:
            type: string
        mergeable:
          type: boolean
      example:
        conflict_files:
        - conflict_files
        - conflict_files
        mergeable: true
    RepoPathsDetailsOutput:
      type: object
      properties:
        details:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/GitPathDetails'
      example:
        details:
        - path: path
          last_commit:
            committer: null
            author:
              identity:
                name: name
                email: email
              when: 2000-01-23T04:56:07.000+00:00
            diff_stats: {}
            file_stats: {}
            message: message
            title: title
            sha: sha
            parent_shas:
            - parent_shas
            - parent_shas
        - path: path
          last_commit:
            committer: null
            author:
              identity:
                name: name
                email: email
              when: 2000-01-23T04:56:07.000+00:00
            diff_stats: {}
            file_stats: {}
            message: message
            title: title
            sha: sha
            parent_shas:
            - parent_shas
            - parent_shas
    RepoSoftDeleteResponse:
      type: object
      properties:
        deleted_at:
          type: integer
      example:
        deleted_at: 0
    RepoSubmoduleContent:
      type: object
      properties:
        commit_sha:
          type: string
        url:
          type: string
    RepoSymlinkContent:
      type: object
      properties:
        size:
          type: integer
        target:
          type: string
    TypesCheck:
      type: object
      properties:
        created:
          type: integer
        ended:
          type: integer
        id:
          type: integer
        identifier:
          type: string
        link:
          type: string
        metadata: {}
        payload:
          $ref: '#/components/schemas/TypesCheckPayload'
        reported_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        started:
          type: integer
        status:
          $ref: '#/components/schemas/EnumCheckStatus'
        summary:
          type: string
        updated:
          type: integer
      example:
        summary: summary
        identifier: identifier
        metadata: ""
        payload:
          data: ""
          kind: ""
          version: version
        created: 0
        ended: 6
        link: link
        reported_by:
          uid: uid
          created: 5
          id: 5
          display_name: display_name
          type: service
          updated: 2
          email: email
        started: 7
        id: 1
        updated: 9
        status: error
    TypesCheckPayload:
      type: object
      properties:
        data: {}
        kind:
          $ref: '#/components/schemas/EnumCheckPayloadKind'
        version:
          type: string
      example:
        data: ""
        kind: ""
        version: version
    TypesCodeCommentFields:
      type: object
      properties:
        line_new:
          type: integer
        line_old:
          type: integer
        merge_base_sha:
          type: string
        outdated:
          type: boolean
        path:
          type: string
        source_sha:
          type: string
        span_new:
          type: integer
        span_old:
          type: integer
      example:
        span_old: 5
        path: path
        line_old: 6
        merge_base_sha: merge_base_sha
        outdated: true
        span_new: 1
        line_new: 0
        source_sha: source_sha
    TypesCodeOwnerEvaluation:
      type: object
      properties:
        evaluation_entries:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesCodeOwnerEvaluationEntry'
        file_sha:
          type: string
      example:
        file_sha: file_sha
        evaluation_entries:
        - user_group_owner_evaluations:
          - evaluations:
            - null
            - null
            name: name
            id: id
          - evaluations:
            - null
            - null
            name: name
            id: id
          pattern: pattern
          owner_evaluations:
          - owner:
              uid: uid
              created: 5
              id: 5
              display_name: display_name
              type: service
              updated: 2
              email: email
            review_decision: approved
            review_sha: review_sha
          - owner:
              uid: uid
              created: 5
              id: 5
              display_name: display_name
              type: service
              updated: 2
              email: email
            review_decision: approved
            review_sha: review_sha
        - user_group_owner_evaluations:
          - evaluations:
            - null
            - null
            name: name
            id: id
          - evaluations:
            - null
            - null
            name: name
            id: id
          pattern: pattern
          owner_evaluations:
          - owner:
              uid: uid
              created: 5
              id: 5
              display_name: display_name
              type: service
              updated: 2
              email: email
            review_decision: approved
            review_sha: review_sha
          - owner:
              uid: uid
              created: 5
              id: 5
              display_name: display_name
              type: service
              updated: 2
              email: email
            review_decision: approved
            review_sha: review_sha
    TypesCodeOwnerEvaluationEntry:
      type: object
      properties:
        owner_evaluations:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesOwnerEvaluation'
        pattern:
          type: string
        user_group_owner_evaluations:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesUserGroupOwnerEvaluation'
      example:
        user_group_owner_evaluations:
        - evaluations:
          - null
          - null
          name: name
          id: id
        - evaluations:
          - null
          - null
          name: name
          id: id
        pattern: pattern
        owner_evaluations:
        - owner:
            uid: uid
            created: 5
            id: 5
            display_name: display_name
            type: service
            updated: 2
            email: email
          review_decision: approved
          review_sha: review_sha
        - owner:
            uid: uid
            created: 5
            id: 5
            display_name: display_name
            type: service
            updated: 2
            email: email
          review_decision: approved
          review_sha: review_sha
    TypesCommit:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/TypesSignature'
        committer:
          $ref: '#/components/schemas/TypesSignature'
        diff_stats:
          $ref: '#/components/schemas/TypesCommitDiffStats'
        message:
          type: string
        parent_shas:
          type: array
          items:
            type: string
        sha:
          type: string
        title:
          type: string
      example:
        committer: null
        author:
          identity:
            name: name
            email: email
          when: 2000-01-23T04:56:07.000+00:00
        diff_stats:
          total: 1
          additions: 0
          deletions: 6
        message: message
        title: title
        sha: sha
        parent_shas:
        - parent_shas
        - parent_shas
    TypesCommitDiffStats:
      type: object
      properties:
        additions:
          type: integer
        deletions:
          type: integer
        total:
          type: integer
      example:
        total: 1
        additions: 0
        deletions: 6
    TypesCommitFilesResponse:
      type: object
      properties:
        commit_id:
          type: string
        dry_run_rules:
          type: boolean
        rule_violations:
          type: array
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
      example:
        dry_run_rules: true
        rule_violations:
        - bypassable: true
          bypassed: true
          violations:
          - code: code
            message: message
            params:
            - ""
            - ""
          - code: code
            message: message
            params:
            - ""
            - ""
          rule:
            identifier: identifier
            repo_path: repo_path
            state: active
            type: type
            space_path: space_path
        - bypassable: true
          bypassed: true
          violations:
          - code: code
            message: message
            params:
            - ""
            - ""
          - code: code
            message: message
            params:
            - ""
            - ""
          rule:
            identifier: identifier
            repo_path: repo_path
            state: active
            type: type
            space_path: space_path
        commit_id: commit_id
    TypesDiffStats:
      type: object
      properties:
        commits:
          type: integer
          nullable: true
        files_changed:
          type: integer
          nullable: true
      example:
        files_changed: 6
        commits: 0
    TypesFileDiffRequest:
      type: object
      properties:
        path:
          type: string
        start_line:
          type: integer
    TypesIdentity:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
      example:
        name: name
        email: email
    TypesListCommitResponse:
      type: object
      properties:
        commits:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesCommit'
        rename_details:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesRenameDetails'
        total_commits:
          type: integer
      example:
        commits:
        - committer: null
          author:
            identity:
              name: name
              email: email
            when: 2000-01-23T04:56:07.000+00:00
          diff_stats:
            total: 1
            additions: 0
            deletions: 6
          message: message
          title: title
          sha: sha
          parent_shas:
          - parent_shas
          - parent_shas
        - committer: null
          author:
            identity:
              name: name
              email: email
            when: 2000-01-23T04:56:07.000+00:00
          diff_stats:
            total: 1
            additions: 0
            deletions: 6
          message: message
          title: title
          sha: sha
          parent_shas:
          - parent_shas
          - parent_shas
        rename_details:
        - new_path: new_path
          commit_sha_before: commit_sha_before
          commit_sha_after: commit_sha_after
          old_path: old_path
        - new_path: new_path
          commit_sha_before: commit_sha_before
          commit_sha_after: commit_sha_after
          old_path: old_path
        total_commits: 0
    TypesMergeResponse:
      type: object
      properties:
        allowed_methods:
          type: array
          items:
            $ref: '#/components/schemas/EnumMergeMethod'
        branch_deleted:
          type: boolean
        conflict_files:
          type: array
          items:
            type: string
        dry_run:
          type: boolean
        rule_violations:
          type: array
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
        sha:
          type: string
      example:
        allowed_methods:
        - merge
        - merge
        conflict_files:
        - conflict_files
        - conflict_files
        rule_violations:
        - bypassable: true
          bypassed: true
          violations:
          - code: code
            message: message
            params:
            - ""
            - ""
          - code: code
            message: message
            params:
            - ""
            - ""
          rule:
            identifier: identifier
            repo_path: repo_path
            state: active
            type: type
            space_path: space_path
        - bypassable: true
          bypassed: true
          violations:
          - code: code
            message: message
            params:
            - ""
            - ""
          - code: code
            message: message
            params:
            - ""
            - ""
          rule:
            identifier: identifier
            repo_path: repo_path
            state: active
            type: type
            space_path: space_path
        dry_run: true
        sha: sha
        branch_deleted: true
    TypesMergeViolations:
      type: object
      properties:
        conflict_files:
          type: array
          items:
            type: string
        rule_violations:
          type: array
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
    TypesOwnerEvaluation:
      type: object
      properties:
        owner:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        review_decision:
          $ref: '#/components/schemas/EnumPullReqReviewDecision'
        review_sha:
          type: string
      example:
        owner:
          uid: uid
          created: 5
          id: 5
          display_name: display_name
          type: service
          updated: 2
          email: email
        review_decision: approved
        review_sha: review_sha
    TypesPrincipalInfo:
      type: object
      properties:
        created:
          type: integer
        display_name:
          type: string
        email:
          type: string
        id:
          type: integer
        type:
          $ref: '#/components/schemas/EnumPrincipalType'
        uid:
          type: string
        updated:
          type: integer
      example:
        uid: uid
        created: 5
        id: 5
        display_name: display_name
        type: service
        updated: 2
        email: email
    TypesPullReq:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        created:
          type: integer
        description:
          type: string
        edited:
          type: integer
        is_draft:
          type: boolean
        merge_base_sha:
          type: string
        merge_check_status:
          $ref: '#/components/schemas/EnumMergeCheckStatus'
        merge_conflicts:
          type: array
          items:
            type: string
        merge_method:
          $ref: '#/components/schemas/EnumMergeMethod'
        merge_sha:
          type: string
          nullable: true
        merge_target_sha:
          type: string
          nullable: true
        merged:
          type: integer
          nullable: true
        merger:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        number:
          type: integer
        source_branch:
          type: string
        source_repo_id:
          type: integer
        source_sha:
          type: string
        state:
          $ref: '#/components/schemas/EnumPullReqState'
        stats:
          $ref: '#/components/schemas/TypesPullReqStats'
        target_branch:
          type: string
        target_repo_id:
          type: integer
        title:
          type: string
      example:
        merge_base_sha: merge_base_sha
        edited: 6
        author:
          uid: uid
          created: 5
          id: 5
          display_name: display_name
          type: service
          updated: 2
          email: email
        created: 0
        merge_target_sha: merge_target_sha
        merged: 1
        description: description
        merge_conflicts:
        - merge_conflicts
        - merge_conflicts
        source_repo_id: 5
        target_branch: target_branch
        title: title
        source_sha: source_sha
        merge_method: merge
        source_branch: source_branch
        number: 5
        target_repo_id: 2
        stats:
          files_changed: 9
          commits: 2
          conversations: 7
          unresolved_count: 3
        is_draft: true
        merge_check_status: merge_check_status
        merge_sha: merge_sha
        state: closed
        merger: null
    TypesPullReqActivity:
      type: object
      properties:
        author:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        code_comment:
          $ref: '#/components/schemas/TypesCodeCommentFields'
        created:
          type: integer
        deleted:
          type: integer
          nullable: true
        edited:
          type: integer
        id:
          type: integer
        kind:
          $ref: '#/components/schemas/EnumPullReqActivityKind'
        metadata:
          type: object
          additionalProperties: {}
          nullable: true
        order:
          type: integer
        parent_id:
          type: integer
          nullable: true
        payload: {}
        pullreq_id:
          type: integer
        repo_id:
          type: integer
        resolved:
          type: integer
          nullable: true
        resolver:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        sub_order:
          type: integer
        text:
          type: string
        type:
          $ref: '#/components/schemas/EnumPullReqActivityType'
        updated:
          type: integer
      example:
        resolver: null
        metadata:
          key: ""
        edited: 7
        author:
          uid: uid
          created: 5
          id: 5
          display_name: display_name
          type: service
          updated: 2
          email: email
        created: 5
        kind: change-comment
        type: branch-delete
        code_comment:
          span_old: 5
          path: path
          line_old: 6
          merge_base_sha: merge_base_sha
          outdated: true
          span_new: 1
          line_new: 0
          source_sha: source_sha
        deleted: 2
        payload: ""
        pullreq_id: 4
        parent_id: 2
        repo_id: 7
        sub_order: 1
        id: 9
        text: text
        updated: 1
        order: 3
        resolved: 1
    TypesPullReqCheck:
      type: object
      properties:
        bypassable:
          type: boolean
        check:
          $ref: '#/components/schemas/TypesCheck'
        required:
          type: boolean
      example:
        bypassable: true
        check:
          summary: summary
          identifier: identifier
          metadata: ""
          payload:
            data: ""
            kind: ""
            version: version
          created: 0
          ended: 6
          link: link
          reported_by:
            uid: uid
            created: 5
            id: 5
            display_name: display_name
            type: service
            updated: 2
            email: email
          started: 7
          id: 1
          updated: 9
          status: error
        required: true
    TypesPullReqChecks:
      type: object
      properties:
        checks:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesPullReqCheck'
        commit_sha:
          type: string
      example:
        commit_sha: commit_sha
        checks:
        - bypassable: true
          check:
            summary: summary
            identifier: identifier
            metadata: ""
            payload:
              data: ""
              kind: ""
              version: version
            created: 0
            ended: 6
            link: link
            reported_by:
              uid: uid
              created: 5
              id: 5
              display_name: display_name
              type: service
              updated: 2
              email: email
            started: 7
            id: 1
            updated: 9
            status: error
          required: true
        - bypassable: true
          check:
            summary: summary
            identifier: identifier
            metadata: ""
            payload:
              data: ""
              kind: ""
              version: version
            created: 0
            ended: 6
            link: link
            reported_by:
              uid: uid
              created: 5
              id: 5
              display_name: display_name
              type: service
              updated: 2
              email: email
            started: 7
            id: 1
            updated: 9
            status: error
          required: true
    TypesPullReqFileView:
      type: object
      properties:
        obsolete:
          type: boolean
        path:
          type: string
        sha:
          type: string
      example:
        path: path
        obsolete: true
        sha: sha
    TypesPullReqReviewer:
      type: object
      properties:
        added_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        created:
          type: integer
        latest_review_id:
          type: integer
          nullable: true
        review_decision:
          $ref: '#/components/schemas/EnumPullReqReviewDecision'
        reviewer:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        sha:
          type: string
        type:
          $ref: '#/components/schemas/EnumPullReqReviewerType'
        updated:
          type: integer
      example:
        review_decision: approved
        added_by:
          uid: uid
          created: 5
          id: 5
          display_name: display_name
          type: service
          updated: 2
          email: email
        created: 0
        latest_review_id: 6
        reviewer: null
        type: assigned
        sha: sha
        updated: 1
    TypesPullReqStats:
      type: object
      properties:
        commits:
          type: integer
          nullable: true
        conversations:
          type: integer
        files_changed:
          type: integer
          nullable: true
        unresolved_count:
          type: integer
      example:
        files_changed: 9
        commits: 2
        conversations: 7
        unresolved_count: 3
    TypesRenameDetails:
      type: object
      properties:
        commit_sha_after:
          type: string
        commit_sha_before:
          type: string
        new_path:
          type: string
        old_path:
          type: string
      example:
        new_path: new_path
        commit_sha_before: commit_sha_before
        commit_sha_after: commit_sha_after
        old_path: old_path
    TypesRepository:
      type: object
      properties:
        created:
          type: integer
        created_by:
          type: integer
        default_branch:
          type: string
        deleted:
          type: integer
          nullable: true
        description:
          type: string
        fork_id:
          type: integer
        git_url:
          type: string
        id:
          type: integer
        identifier:
          type: string
        importing:
          type: boolean
        is_public:
          type: boolean
        num_closed_pulls:
          type: integer
        num_forks:
          type: integer
        num_merged_pulls:
          type: integer
        num_open_pulls:
          type: integer
        num_pulls:
          type: integer
        parent_id:
          type: integer
        path:
          type: string
        size:
          type: integer
        size_updated:
          type: integer
        updated:
          type: integer
      example:
        num_pulls: 2
        identifier: identifier
        created: 0
        fork_id: 5
        num_open_pulls: 3
        description: description
        created_by: 6
        size_updated: 1
        importing: true
        path: path
        deleted: 1
        size: 7
        num_merged_pulls: 9
        parent_id: 4
        is_public: true
        default_branch: default_branch
        id: 5
        git_url: git_url
        updated: 1
        num_closed_pulls: 2
        num_forks: 7
    TypesRuleInfo:
      type: object
      properties:
        identifier:
          type: string
        repo_path:
          type: string
        space_path:
          type: string
        state:
          $ref: '#/components/schemas/EnumRuleState'
        type:
          $ref: '#/components/schemas/TypesRuleType'
      example:
        identifier: identifier
        repo_path: repo_path
        state: active
        type: type
        space_path: space_path
    TypesRuleType:
      type: string
    TypesRuleViolations:
      type: object
      properties:
        bypassable:
          type: boolean
        bypassed:
          type: boolean
        rule:
          $ref: '#/components/schemas/TypesRuleInfo'
        violations:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesViolation'
      example:
        bypassable: true
        bypassed: true
        violations:
        - code: code
          message: message
          params:
          - ""
          - ""
        - code: code
          message: message
          params:
          - ""
          - ""
        rule:
          identifier: identifier
          repo_path: repo_path
          state: active
          type: type
          space_path: space_path
    TypesRulesViolations:
      type: object
      properties:
        violations:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesRuleViolations'
    TypesSignature:
      type: object
      properties:
        identity:
          $ref: '#/components/schemas/TypesIdentity'
        when:
          type: string
          format: date-time
      example:
        identity:
          name: name
          email: email
        when: 2000-01-23T04:56:07.000+00:00
    TypesUserGroupOwnerEvaluation:
      type: object
      properties:
        evaluations:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/TypesOwnerEvaluation'
        id:
          type: string
        name:
          type: string
      example:
        evaluations:
        - null
        - null
        name: name
        id: id
    TypesViolation:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        params:
          type: array
          nullable: true
          items: {}
      example:
        code: code
        message: message
        params:
        - ""
        - ""
    TypesWebhookExecution:
      type: object
      properties:
        created:
          type: integer
        duration:
          type: integer
        error:
          type: string
        id:
          type: integer
        request:
          $ref: '#/components/schemas/TypesWebhookExecutionRequest'
        response:
          $ref: '#/components/schemas/TypesWebhookExecutionResponse'
        result:
          $ref: '#/components/schemas/EnumWebhookExecutionResult'
        retrigger_of:
          type: integer
          nullable: true
        retriggerable:
          type: boolean
        trigger_type:
          $ref: '#/components/schemas/EnumWebhookTrigger'
        webhook_id:
          type: integer
      example:
        duration: 6
        result: fatal_error
        request:
          headers: headers
          body: body
          url: url
        retriggerable: true
        webhook_id: 2
        created: 0
        response:
          headers: headers
          status_code: 5
          body: body
          status: status
        trigger_type: branch_created
        retrigger_of: 5
        id: 1
        error: error
    TypesWebhookExecutionRequest:
      type: object
      properties:
        body:
          type: string
        headers:
          type: string
        url:
          type: string
      example:
        headers: headers
        body: body
        url: url
    TypesWebhookExecutionResponse:
      type: object
      properties:
        body:
          type: string
        headers:
          type: string
        status:
          type: string
        status_code:
          type: integer
      example:
        headers: headers
        status_code: 5
        body: body
        status: status
    UploadResult:
      type: object
      properties:
        file_path:
          type: string
      example:
        file_path: file_path
    UsererrorError:
      type: object
      properties:
        message:
          type: string
        values:
          type: object
          additionalProperties: {}
    commits_commit_sha_body:
      type: object
      properties:
        check_uid:
          type: string
          deprecated: true
        ended:
          type: integer
        identifier:
          type: string
        link:
          type: string
        payload:
          $ref: '#/components/schemas/TypesCheckPayload'
        started:
          type: integer
        status:
          $ref: '#/components/schemas/EnumCheckStatus'
        summary:
          type: string
    repo_identifier_rules_body:
      type: object
      properties:
        definition:
          $ref: '#/components/schemas/OpenapiRuleDefinition'
        description:
          type: string
        identifier:
          type: string
        pattern:
          $ref: '#/components/schemas/ProtectionPattern'
        state:
          $ref: '#/components/schemas/EnumRuleState'
        type:
          $ref: '#/components/schemas/OpenapiRuleType'
        uid:
          type: string
          deprecated: true
    rules_rule_uid_body:
      type: object
      properties:
        definition:
          $ref: '#/components/schemas/OpenapiRuleDefinition'
        description:
          type: string
          nullable: true
        identifier:
          type: string
          nullable: true
        pattern:
          $ref: '#/components/schemas/ProtectionPattern'
        state:
          $ref: '#/components/schemas/EnumRuleState'
        type:
          $ref: '#/components/schemas/OpenapiRuleType'
        uid:
          type: string
          nullable: true
          deprecated: true
    repos_import_body:
      type: object
      properties:
        description:
          type: string
        identifier:
          type: string
        parent_ref:
          type: string
        pipelines:
          $ref: '#/components/schemas/ImporterPipelineOption'
        provider:
          $ref: '#/components/schemas/ImporterProvider'
        provider_repo:
          type: string
        uid:
          type: string
          deprecated: true
    inline_response_200:
      type: object
      properties:
        label:
          type: string
        value:
          type: string
      example:
        label: label
        value: value
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
    x-api-key:
      type: apiKey
      name: x-api-key
      in: header
