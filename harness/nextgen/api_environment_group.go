
/*
 * CD NextGen API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 2.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type EnvironmentGroupApiService service
/*
EnvironmentGroupApiService Create an Environment Group
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountIdentifier
 * @param optional nil or *EnvironmentGroupApiCreateEnvironmentGroupOpts - Optional Parameters:
     * @param "Body" (optional.Interface of EnvironmentGroupRequestDto) -
     * @param "Branch" (optional.String) -
     * @param "RepoIdentifier" (optional.String) -
     * @param "GetDefaultFromOtherRepo" (optional.Bool) -
     * @param "ParentEntityConnectorRef" (optional.String) -
     * @param "ParentEntityRepoName" (optional.String) -
     * @param "ParentEntityAccountIdentifier" (optional.String) -
     * @param "ParentEntityOrgIdentifier" (optional.String) -
     * @param "ParentEntityProjectIdentifier" (optional.String) -
     * @param "RepoName" (optional.String) -
@return ResponseEnvironmentGroupResponse
*/

type EnvironmentGroupApiCreateEnvironmentGroupOpts struct {
    Body optional.Interface
    Branch optional.String
    RepoIdentifier optional.String
    GetDefaultFromOtherRepo optional.Bool
    ParentEntityConnectorRef optional.String
    ParentEntityRepoName optional.String
    ParentEntityAccountIdentifier optional.String
    ParentEntityOrgIdentifier optional.String
    ParentEntityProjectIdentifier optional.String
    RepoName optional.String
}

func (a *EnvironmentGroupApiService) CreateEnvironmentGroup(ctx context.Context, accountIdentifier string, localVarOptionals *EnvironmentGroupApiCreateEnvironmentGroupOpts) (ResponseEnvironmentGroupResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseEnvironmentGroupResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/environmentGroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.Branch.IsSet() {
		localVarQueryParams.Add("branch", parameterToString(localVarOptionals.Branch.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RepoIdentifier.IsSet() {
		localVarQueryParams.Add("repoIdentifier", parameterToString(localVarOptionals.RepoIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GetDefaultFromOtherRepo.IsSet() {
		localVarQueryParams.Add("getDefaultFromOtherRepo", parameterToString(localVarOptionals.GetDefaultFromOtherRepo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentEntityConnectorRef.IsSet() {
		localVarQueryParams.Add("parentEntityConnectorRef", parameterToString(localVarOptionals.ParentEntityConnectorRef.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentEntityRepoName.IsSet() {
		localVarQueryParams.Add("parentEntityRepoName", parameterToString(localVarOptionals.ParentEntityRepoName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentEntityAccountIdentifier.IsSet() {
		localVarQueryParams.Add("parentEntityAccountIdentifier", parameterToString(localVarOptionals.ParentEntityAccountIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentEntityOrgIdentifier.IsSet() {
		localVarQueryParams.Add("parentEntityOrgIdentifier", parameterToString(localVarOptionals.ParentEntityOrgIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentEntityProjectIdentifier.IsSet() {
		localVarQueryParams.Add("parentEntityProjectIdentifier", parameterToString(localVarOptionals.ParentEntityProjectIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RepoName.IsSet() {
		localVarQueryParams.Add("repoName", parameterToString(localVarOptionals.RepoName.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {

		localVarOptionalBody:= localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseEnvironmentGroupResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
EnvironmentGroupApiService Delete en Environment Group by Identifier
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envGroupIdentifier
 * @param accountIdentifier
 * @param optional nil or *EnvironmentGroupApiDeleteEnvironmentGroupOpts - Optional Parameters:
     * @param "IfMatch" (optional.String) -
     * @param "OrgIdentifier" (optional.String) -
     * @param "ProjectIdentifier" (optional.String) -
     * @param "Branch" (optional.String) -
     * @param "RepoIdentifier" (optional.String) -
     * @param "RootFolder" (optional.String) -
     * @param "FilePath" (optional.String) -
     * @param "CommitMsg" (optional.String) -
     * @param "LastObjectId" (optional.String) -
     * @param "ForceDelete" (optional.Bool) -
@return ResponseEnvironmentGroupDeleteResponse
*/

type EnvironmentGroupApiDeleteEnvironmentGroupOpts struct {
    IfMatch optional.String
    OrgIdentifier optional.String
    ProjectIdentifier optional.String
    Branch optional.String
    RepoIdentifier optional.String
    RootFolder optional.String
    FilePath optional.String
    CommitMsg optional.String
    LastObjectId optional.String
    ForceDelete optional.Bool
}

func (a *EnvironmentGroupApiService) DeleteEnvironmentGroup(ctx context.Context, envGroupIdentifier string, accountIdentifier string, localVarOptionals *EnvironmentGroupApiDeleteEnvironmentGroupOpts) (ResponseEnvironmentGroupDeleteResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseEnvironmentGroupDeleteResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/environmentGroup/{envGroupIdentifier}"
	localVarPath = strings.Replace(localVarPath, "{"+"envGroupIdentifier"+"}", fmt.Sprintf("%v", envGroupIdentifier), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrgIdentifier.IsSet() {
		localVarQueryParams.Add("orgIdentifier", parameterToString(localVarOptionals.OrgIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Branch.IsSet() {
		localVarQueryParams.Add("branch", parameterToString(localVarOptionals.Branch.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RepoIdentifier.IsSet() {
		localVarQueryParams.Add("repoIdentifier", parameterToString(localVarOptionals.RepoIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RootFolder.IsSet() {
		localVarQueryParams.Add("rootFolder", parameterToString(localVarOptionals.RootFolder.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilePath.IsSet() {
		localVarQueryParams.Add("filePath", parameterToString(localVarOptionals.FilePath.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CommitMsg.IsSet() {
		localVarQueryParams.Add("commitMsg", parameterToString(localVarOptionals.CommitMsg.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastObjectId.IsSet() {
		localVarQueryParams.Add("lastObjectId", parameterToString(localVarOptionals.LastObjectId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ForceDelete.IsSet() {
		localVarQueryParams.Add("forceDelete", parameterToString(localVarOptionals.ForceDelete.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.IfMatch.IsSet() {
		localVarHeaderParams["If-Match"] = parameterToString(localVarOptionals.IfMatch.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseEnvironmentGroupDeleteResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
EnvironmentGroupApiService Gets a Environment Group by identifier
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param envGroupIdentifier
 * @param accountIdentifier
 * @param optional nil or *EnvironmentGroupApiGetEnvironmentGroupOpts - Optional Parameters:
     * @param "OrgIdentifier" (optional.String) -
     * @param "ProjectIdentifier" (optional.String) -
     * @param "Deleted" (optional.Bool) -
     * @param "Branch" (optional.String) -
     * @param "RepoIdentifier" (optional.String) -
     * @param "GetDefaultFromOtherRepo" (optional.Bool) -
     * @param "ParentEntityConnectorRef" (optional.String) -
     * @param "ParentEntityRepoName" (optional.String) -
     * @param "ParentEntityAccountIdentifier" (optional.String) -
     * @param "ParentEntityOrgIdentifier" (optional.String) -
     * @param "ParentEntityProjectIdentifier" (optional.String) -
     * @param "RepoName" (optional.String) -
@return ResponseEnvironmentGroupResponse
*/

type EnvironmentGroupApiGetEnvironmentGroupOpts struct {
    OrgIdentifier optional.String
    ProjectIdentifier optional.String
    Deleted optional.Bool
    Branch optional.String
    RepoIdentifier optional.String
    GetDefaultFromOtherRepo optional.Bool
    ParentEntityConnectorRef optional.String
    ParentEntityRepoName optional.String
    ParentEntityAccountIdentifier optional.String
    ParentEntityOrgIdentifier optional.String
    ParentEntityProjectIdentifier optional.String
    RepoName optional.String
}

func (a *EnvironmentGroupApiService) GetEnvironmentGroup(ctx context.Context, envGroupIdentifier string, accountIdentifier string, localVarOptionals *EnvironmentGroupApiGetEnvironmentGroupOpts) (ResponseEnvironmentGroupResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseEnvironmentGroupResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/environmentGroup/{envGroupIdentifier}"
	localVarPath = strings.Replace(localVarPath, "{"+"envGroupIdentifier"+"}", fmt.Sprintf("%v", envGroupIdentifier), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrgIdentifier.IsSet() {
		localVarQueryParams.Add("orgIdentifier", parameterToString(localVarOptionals.OrgIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Deleted.IsSet() {
		localVarQueryParams.Add("deleted", parameterToString(localVarOptionals.Deleted.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Branch.IsSet() {
		localVarQueryParams.Add("branch", parameterToString(localVarOptionals.Branch.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RepoIdentifier.IsSet() {
		localVarQueryParams.Add("repoIdentifier", parameterToString(localVarOptionals.RepoIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GetDefaultFromOtherRepo.IsSet() {
		localVarQueryParams.Add("getDefaultFromOtherRepo", parameterToString(localVarOptionals.GetDefaultFromOtherRepo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentEntityConnectorRef.IsSet() {
		localVarQueryParams.Add("parentEntityConnectorRef", parameterToString(localVarOptionals.ParentEntityConnectorRef.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentEntityRepoName.IsSet() {
		localVarQueryParams.Add("parentEntityRepoName", parameterToString(localVarOptionals.ParentEntityRepoName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentEntityAccountIdentifier.IsSet() {
		localVarQueryParams.Add("parentEntityAccountIdentifier", parameterToString(localVarOptionals.ParentEntityAccountIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentEntityOrgIdentifier.IsSet() {
		localVarQueryParams.Add("parentEntityOrgIdentifier", parameterToString(localVarOptionals.ParentEntityOrgIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentEntityProjectIdentifier.IsSet() {
		localVarQueryParams.Add("parentEntityProjectIdentifier", parameterToString(localVarOptionals.ParentEntityProjectIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RepoName.IsSet() {
		localVarQueryParams.Add("repoName", parameterToString(localVarOptionals.RepoName.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseEnvironmentGroupResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
EnvironmentGroupApiService Gets Environment Group list
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountIdentifier
 * @param optional nil or *EnvironmentGroupApiGetEnvironmentGroupListOpts - Optional Parameters:
     * @param "Body" (optional.Interface of FilterProperties) -
     * @param "OrgIdentifier" (optional.String) -
     * @param "ProjectIdentifier" (optional.String) -
     * @param "EnvGroupIdentifiers" (optional.Interface of []string) -
     * @param "SearchTerm" (optional.String) -
     * @param "Page" (optional.Int32) -
     * @param "Size" (optional.Int32) -
     * @param "Sort" (optional.Interface of []string) -
     * @param "FilterIdentifier" (optional.String) -
     * @param "Branch" (optional.String) -
     * @param "RepoIdentifier" (optional.String) -
     * @param "GetDefaultFromOtherRepo" (optional.Bool) -
     * @param "ParentEntityConnectorRef" (optional.String) -
     * @param "ParentEntityRepoName" (optional.String) -
     * @param "ParentEntityAccountIdentifier" (optional.String) -
     * @param "ParentEntityOrgIdentifier" (optional.String) -
     * @param "ParentEntityProjectIdentifier" (optional.String) -
     * @param "RepoName" (optional.String) -
     * @param "IncludeAllEnvGroupsAccessibleAtScope" (optional.Bool) -
@return ResponsePageEnvironmentGroupResponse
*/

type EnvironmentGroupApiGetEnvironmentGroupListOpts struct {
    Body optional.Interface
    OrgIdentifier optional.String
    ProjectIdentifier optional.String
    EnvGroupIdentifiers optional.Interface
    SearchTerm optional.String
    Page optional.Int32
    Size optional.Int32
    Sort optional.Interface
    FilterIdentifier optional.String
    Branch optional.String
    RepoIdentifier optional.String
    GetDefaultFromOtherRepo optional.Bool
    ParentEntityConnectorRef optional.String
    ParentEntityRepoName optional.String
    ParentEntityAccountIdentifier optional.String
    ParentEntityOrgIdentifier optional.String
    ParentEntityProjectIdentifier optional.String
    RepoName optional.String
    IncludeAllEnvGroupsAccessibleAtScope optional.Bool
}

func (a *EnvironmentGroupApiService) GetEnvironmentGroupList(ctx context.Context, accountIdentifier string, localVarOptionals *EnvironmentGroupApiGetEnvironmentGroupListOpts) (ResponsePageEnvironmentGroupResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponsePageEnvironmentGroupResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/environmentGroup/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.OrgIdentifier.IsSet() {
		localVarQueryParams.Add("orgIdentifier", parameterToString(localVarOptionals.OrgIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ProjectIdentifier.IsSet() {
		localVarQueryParams.Add("projectIdentifier", parameterToString(localVarOptionals.ProjectIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.EnvGroupIdentifiers.IsSet() {
		localVarQueryParams.Add("envGroupIdentifiers", parameterToString(localVarOptionals.EnvGroupIdentifiers.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.SearchTerm.IsSet() {
		localVarQueryParams.Add("searchTerm", parameterToString(localVarOptionals.SearchTerm.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Page.IsSet() {
		localVarQueryParams.Add("page", parameterToString(localVarOptionals.Page.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Size.IsSet() {
		localVarQueryParams.Add("size", parameterToString(localVarOptionals.Size.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sort.IsSet() {
		localVarQueryParams.Add("sort", parameterToString(localVarOptionals.Sort.Value(), "multi"))
	}
	if localVarOptionals != nil && localVarOptionals.FilterIdentifier.IsSet() {
		localVarQueryParams.Add("filterIdentifier", parameterToString(localVarOptionals.FilterIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Branch.IsSet() {
		localVarQueryParams.Add("branch", parameterToString(localVarOptionals.Branch.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RepoIdentifier.IsSet() {
		localVarQueryParams.Add("repoIdentifier", parameterToString(localVarOptionals.RepoIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GetDefaultFromOtherRepo.IsSet() {
		localVarQueryParams.Add("getDefaultFromOtherRepo", parameterToString(localVarOptionals.GetDefaultFromOtherRepo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentEntityConnectorRef.IsSet() {
		localVarQueryParams.Add("parentEntityConnectorRef", parameterToString(localVarOptionals.ParentEntityConnectorRef.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentEntityRepoName.IsSet() {
		localVarQueryParams.Add("parentEntityRepoName", parameterToString(localVarOptionals.ParentEntityRepoName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentEntityAccountIdentifier.IsSet() {
		localVarQueryParams.Add("parentEntityAccountIdentifier", parameterToString(localVarOptionals.ParentEntityAccountIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentEntityOrgIdentifier.IsSet() {
		localVarQueryParams.Add("parentEntityOrgIdentifier", parameterToString(localVarOptionals.ParentEntityOrgIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ParentEntityProjectIdentifier.IsSet() {
		localVarQueryParams.Add("parentEntityProjectIdentifier", parameterToString(localVarOptionals.ParentEntityProjectIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RepoName.IsSet() {
		localVarQueryParams.Add("repoName", parameterToString(localVarOptionals.RepoName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeAllEnvGroupsAccessibleAtScope.IsSet() {
		localVarQueryParams.Add("includeAllEnvGroupsAccessibleAtScope", parameterToString(localVarOptionals.IncludeAllEnvGroupsAccessibleAtScope.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {

		localVarOptionalBody:= localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponsePageEnvironmentGroupResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
EnvironmentGroupApiService Update an Environment Group by Identifier
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param accountIdentifier
 * @param envGroupIdentifier
 * @param optional nil or *EnvironmentGroupApiUpdateEnvironmentGroupOpts - Optional Parameters:
     * @param "Body" (optional.Interface of EnvironmentGroupRequestDto) -
     * @param "IfMatch" (optional.String) -
     * @param "Branch" (optional.String) -
     * @param "RepoIdentifier" (optional.String) -
     * @param "RootFolder" (optional.String) -
     * @param "FilePath" (optional.String) -
     * @param "CommitMsg" (optional.String) -
     * @param "LastObjectId" (optional.String) -
     * @param "ResolvedConflictCommitId" (optional.String) -
     * @param "BaseBranch" (optional.String) -
     * @param "ConnectorRef" (optional.String) -
     * @param "StoreType" (optional.String) -
     * @param "LastCommitId" (optional.String) -
@return ResponseEnvironmentGroupResponse
*/

type EnvironmentGroupApiUpdateEnvironmentGroupOpts struct {
    Body optional.Interface
    IfMatch optional.String
    Branch optional.String
    RepoIdentifier optional.String
    RootFolder optional.String
    FilePath optional.String
    CommitMsg optional.String
    LastObjectId optional.String
    ResolvedConflictCommitId optional.String
    BaseBranch optional.String
    ConnectorRef optional.String
    StoreType optional.String
    LastCommitId optional.String
}

func (a *EnvironmentGroupApiService) UpdateEnvironmentGroup(ctx context.Context, accountIdentifier string, envGroupIdentifier string, localVarOptionals *EnvironmentGroupApiUpdateEnvironmentGroupOpts) (ResponseEnvironmentGroupResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Put")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseEnvironmentGroupResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/environmentGroup/{envGroupIdentifier}"
	localVarPath = strings.Replace(localVarPath, "{"+"envGroupIdentifier"+"}", fmt.Sprintf("%v", envGroupIdentifier), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("accountIdentifier", parameterToString(accountIdentifier, ""))
	if localVarOptionals != nil && localVarOptionals.Branch.IsSet() {
		localVarQueryParams.Add("branch", parameterToString(localVarOptionals.Branch.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RepoIdentifier.IsSet() {
		localVarQueryParams.Add("repoIdentifier", parameterToString(localVarOptionals.RepoIdentifier.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RootFolder.IsSet() {
		localVarQueryParams.Add("rootFolder", parameterToString(localVarOptionals.RootFolder.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.FilePath.IsSet() {
		localVarQueryParams.Add("filePath", parameterToString(localVarOptionals.FilePath.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CommitMsg.IsSet() {
		localVarQueryParams.Add("commitMsg", parameterToString(localVarOptionals.CommitMsg.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastObjectId.IsSet() {
		localVarQueryParams.Add("lastObjectId", parameterToString(localVarOptionals.LastObjectId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ResolvedConflictCommitId.IsSet() {
		localVarQueryParams.Add("resolvedConflictCommitId", parameterToString(localVarOptionals.ResolvedConflictCommitId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.BaseBranch.IsSet() {
		localVarQueryParams.Add("baseBranch", parameterToString(localVarOptionals.BaseBranch.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ConnectorRef.IsSet() {
		localVarQueryParams.Add("connectorRef", parameterToString(localVarOptionals.ConnectorRef.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.StoreType.IsSet() {
		localVarQueryParams.Add("storeType", parameterToString(localVarOptionals.StoreType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastCommitId.IsSet() {
		localVarQueryParams.Add("lastCommitId", parameterToString(localVarOptionals.LastCommitId.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "application/yaml"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json", "application/yaml"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.IfMatch.IsSet() {
		localVarHeaderParams["If-Match"] = parameterToString(localVarOptionals.IfMatch.Value(), "")
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {

		localVarOptionalBody:= localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil {
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseEnvironmentGroupResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 400 {
			var v Failure
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		if localVarHttpResponse.StatusCode == 500 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
